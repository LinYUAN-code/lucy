import{R as V}from"./RightTips-4f346bf7.js";import{i as u}from"./index.cjs-5f979497.js";import{_ as R,u as I,c as w,b as A,r as k,A as H,d as L,o as _,e as f,g as o,t as F,m as P,f as S,h as T,F as G,j as C,k as j,s as U,y as E,z as N,i as $,E as B}from"./index-9387c24e.js";/* empty css                                                                  */import{C as M}from"./Header-f97b559f.js";const J=s=>(E("data-v-308ab53e"),s=s(),N(),s),z={class:"dialog-body"},D={class:"content"},O={class:"handle"},q={class:"support-grammers-list"},W=J(()=>o("span",{class:"preview"},"预览处理结果",-1)),K={class:"btn-container"},Q={__name:"FormatTip",props:{needHandle:{type:Array,required:!0}},emits:["saveGrammar"],setup(s,{emit:r}){const p=s,c=I(),h=e=>{for(let t in d)a.value.includes(d[t].handleText)&&(e=d[t].handle(e));return e},g=w(()=>c.getters["grammarStore/getGrammar"]),v=()=>{let e=g.value;return a.value.length&&(e=h(e)),e},x=()=>{if(a.value.length){let e=g.value;r("saveGrammar",h(e))}},d=A({needUnion:{text:"同类项",handleText:"合并同类项",handle:e=>u.unionGrammers(e)},needLiftUp:{text:"左公因子",handleText:"提取左公因子",handle:e=>u.liftUpCommonTocken(e)},needClearRecursion:{text:"左递归",handleText:"消除左递归",handle:e=>u.clearRightRecursion(e)}}),m=w(()=>{let e="";return p.needHandle.forEach((t,n)=>{e+=d[t].text,n<p.needHandle.length-1&&(e+="/")}),e}),a=k([]);return H(()=>{a.value=p.needHandle.map(e=>d[e].handleText)}),(e,t)=>{const n=L("el-checkbox"),i=L("el-checkbox-group"),b=L("el-popover"),y=L("el-button");return _(),f("div",z,[o("div",D,"检测到该文法存在"+F(P(m))+"，是否需要进行文法改写？",1),S(i,{modelValue:a.value,"onUpdate:modelValue":t[0]||(t[0]=l=>a.value=l),class:"checkbox"},{default:T(()=>[(_(!0),f(G,null,C(p.needHandle,l=>(_(),j(n,{key:l,label:d[l].handleText,size:"large"},null,8,["label"]))),128))]),_:1},8,["modelValue"]),o("div",O,[S(b,{placement:"top",width:250,trigger:"hover"},{reference:T(()=>[W]),default:T(()=>[o("ul",q,[(_(!0),f(G,null,C(v(),l=>(_(),f("li",{key:l},F(l),1))),128))])]),_:1}),o("div",K,[S(y,{type:"primary",onClick:x},{default:T(()=>[U("确定")]),_:1})])])])}}},X=R(Q,[["__scopeId","data-v-308ab53e"]]);const Y=s=>(E("data-v-7ecddf26"),s=s(),N(),s),Z={class:"judge-container"},ee={class:"judge"},te=Y(()=>o("div",{class:"rules"},[o("div",null," LL(1)文法规则 "),o("div",null," 1、对于每一个产生式 A → α1|α2|…|αn, FIRST(αi) ∩ FIRST(αj) = Φ, 对于所有的 i 和 j, 有1≤i, j ≤ n, i≠j "),o("div",null," 2、对于每一个非终结符 A , 如果 FIRST(A) 包含 ε, FIRST(A) ∩ FOLLOW(A) = Φ ")],-1)),re={class:"conclusion"},ae={__name:"GrammarJudge",setup(s){const r=I(),p=k(!0),c=k([]),h=k(!1),g=w(()=>r.getters["grammarStore/getCustomMode"]),v=w(()=>r.getters["grammarStore/getGrammar"]),x=()=>{const m=r.getters["grammarStore/getLL1Parser"],a=r.getters["grammarStore/getFirstSet"],e=r.getters["grammarStore/getFollowSet"],t=m.getPredictTable(a,e);if(!t.length)return;let n=!0;try{t.forEach(i=>{const{terminal2Derivation:b={}}=i;b.forEach(y=>{const{derivations:l=[]}=y;if(l.length>1)throw n=!1,new Error("End")})})}catch(i){if(i.message!=="End")throw i}if(p.value=n,!g.value&&(c.value=[],u.checkNeedunionGrammers(v.value)&&c.value.push("needUnion"),u.checkNeedliftUpCommonTocken(v.value)&&c.value.push("needLiftUp"),u.checkNeedClearRightRecursion(v.value)&&c.value.push("needClearRecursion"),c.value.length>0)){h.value=!0;return}h.value=!1},d=m=>{if(!g.value){try{const{nonTerminals:a,terminals:e}=u.getTockFromSimpleGrammers(m);r.commit("grammarStore/updateNonTerminal",a),r.commit("grammarStore/updateTerminal",e),r.commit("grammarStore/updateGrammar",m);const t=new u.LL1Parser(e,a,m),n=t.getFirstSet(),i=t.getFollowSet(n);r.commit("grammarStore/updateLL1Parser",t),r.commit("grammarStore/updateFirstSet",n),r.commit("grammarStore/updateFollowSet",i)}catch{B({message:"操作失败",type:"error"});return}x()}};return H(()=>{x()}),(m,a)=>(_(),f("div",Z,[S(V,{type:"grammar"}),o("div",ee,[S(M,{step:1,type:"LL1"}),te,o("div",re," 该文法"+F(p.value?"":"不")+"是LL1文法 ",1),h.value?(_(),j(X,{key:0,needHandle:c.value,onSaveGrammar:d},null,8,["needHandle"])):$("",!0)])]))}},de=R(ae,[["__scopeId","data-v-7ecddf26"]]);export{de as default};
