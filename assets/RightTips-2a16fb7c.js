import{_ as G,u as w,a as B,r as C,c as D,d as i,o as e,e as s,g as t,f as _,h as b,k as L,t as n,m as c,F as p,j as g,i as u,y as I,z as T}from"./index-5b4ceb49.js";const d={simple:{text:"默认模式",statement:`该模式仅支持教学意义的简单文法，所有非终结符的格式为大写字母（A-Z）或带上标的大写字母（A'-Z'、A''-Z''...）,
        所有终结符为小写字母（a-z）或Greek Symbols（ε,μ...），如需要自定义终结符和非终结符，请切换自定义模式`,grammars:["A => A c | A a d | b d | ε",`A => A c
                    | A a d
                    | b d
                    | ε`,`S => A a | b
                    A => A c | S d | ε`,"首个文法表达式左边的非终结符将作为文法分析的开始符号","（如果需要，复制ε）","（所有token需要用空格分开）"],examples:["A => A'' | b d A''","A' => c | a d","A'' => A' A'' | ε"]},custom:{text:"自定义模式",statement:"该模式支持自定义文法，需要输入自定义终结符和非终结符，请在文法下方输入自定义终结符和非终结符，如不需要自定义，请切换简单模式",grammars:["bterm => bterm  bfactor | bterm  a d | b d | ϵ",`bterm  => bterm  bfactor
                        | bterm  a d
                        | b d
                        | ϵ`,"S => bterm  a | b","bterm  => bterm  bfactor | S d | ϵ","首个文法表达式左边的非终结符将作为文法分析的开始符号","（如果需要，复制ε）","（所有token需要用空格分开）"],examples:["bexpr => bexpr or bterm | bterm",`bterm => bterm and bfactor
                    | bfactor`,`bfactor => not bfactor | ( bexpr )
                    | true | false`]}},z=[{text:"文法定义",route:"/"},{text:"LL(1)文法判定",route:"/LL1Grammar"},{text:"LL(1)分析表构造",route:"/LL1Table"},{text:"LL(1)预测分析",route:"/LL1Analysis"}],E=[{text:"文法定义",route:"/"},{text:"LR(0)自动机构造",route:"/Automaton"},{text:"LR(0)分析表构造",route:"/LR0Table",params:{type:"LR0"}},{text:"LR(0)模拟分析",route:"/LR0Analysis",params:{type:"LR0"}}],nt=[{key:"LL1",text:"LL(1)分析",route:z[1].route},{key:"LR0",text:"LR(0)分析",route:E[1].route}];const a=o=>(I("data-v-fe03f95c"),o=o(),T(),o),F={class:"right-contant-container"},N={key:0,class:"right-contant"},V={key:0,class:"examples"},Z={class:"mode"},q={class:"statement"},j={class:"support-grammers"},H=a(()=>t("span",{class:"support-grammers-title"},"支持的文法输入格式",-1)),J={class:"support-grammers-list"},K={class:"support-grammers"},M=a(()=>t("span",{class:"support-grammers-title"},"例子",-1)),O={class:"support-grammers-list"},P={key:1},Q={class:"title"},U=a(()=>t("span",{class:"support-grammers-title"},"文法",-1)),W={class:"support-grammers-list"},X={key:2},Y=a(()=>t("div",{class:"argument-title"},"增广文法",-1)),$=a(()=>t("div",{class:"argument-statement"},"假定文法G是一个以S为开始符号的文法，构造一个新的文法G‘,称G'是G的增广文法，G'定义如下：",-1)),tt=a(()=>t("ul",{class:"argument-ul"},[t("li",null,"只增加一个新的非终结符S’(G‘的开始符号)；"),t("li",null,"增加一个新的产生式S’->S；"),t("li",null,"增广文法会有一个仅含项目S'->S·的状态，这是唯一的接受态；")],-1)),et=[Y,$,tt],st={__name:"RightTips",props:{type:{type:String,required:!0},mode:{type:String},showArgument:{type:Boolean}},setup(o){const m=o,y=w(),A=B(),l=C(!0),f=D(()=>y.getters["grammarStore/getGrammar"]),x=()=>{l.value=!l.value},v=()=>{A.push({path:"/",query:{step:1}})};return(ot,rt)=>{const k=i("DArrowLeft"),R=i("DArrowRight"),h=i("el-icon"),S=i("Edit");return e(),s("div",F,[t("div",{class:"fold-btn",onClick:x},[_(h,{size:20},{default:b(()=>[l.value?(e(),L(k,{key:0})):(e(),L(R,{key:1}))]),_:1})]),l.value?(e(),s("div",N,[o.type==="examples"?(e(),s("div",V,[t("div",Z,n(c(d)[m.mode].text),1),t("div",q,n(c(d)[m.mode].statement),1),t("div",j,[H,t("ul",J,[(e(!0),s(p,null,g(c(d)[m.mode].grammars,r=>(e(),s("li",{key:r},n(r),1))),128))])]),t("div",K,[M,t("ul",O,[(e(!0),s(p,null,g(c(d)[m.mode].examples,r=>(e(),s("li",{key:r},n(r),1))),128))])])])):u("",!0),o.type==="grammar"?(e(),s("div",P,[t("div",Q,[U,_(h,{class:"icon",onClick:v},{default:b(()=>[_(S)]),_:1})]),t("ul",W,[(e(!0),s(p,null,g(c(f),r=>(e(),s("li",{key:r},n(r),1))),128))])])):u("",!0),o.showArgument?(e(),s("div",X,et)):u("",!0)])):u("",!0)])}}},ct=G(st,[["__scopeId","data-v-fe03f95c"]]);export{E as L,ct as R,nt as a,z as b,d as m};
