"use strict";function e(e,t){return t.map((e=>e.replaceAll(/\s/g,""))).map((t=>{const n=t.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),i=n[1].split("|").filter((e=>e&&"|"!==e)).map((t=>e.splitDerivation(t)));return{nonTerminal:n[0],derivations:i}}))}function t(e){switch(e){case"+":case"*":case"(":case")":return`\\${e}`;default:return e}}const n="ε",i="$";var r;!function(e){e[e.Normal=0]="Normal",e[e.Warnning=1]="Warnning",e[e.Error=2]="Error",e[e.None=3]="None"}(r||(r={}));let o=r.Normal;o=r.Error;var s=new class{logLevel;logChannel;constructor(e=r.Normal,t=console){this.logLevel=e,this.logChannel=t}log(...e){this.logLevel<=r.Normal&&this.logChannel.log("[normal]",...e)}warn(...e){this.logLevel<=r.Warnning&&this.logChannel.warn("[warn]",...e)}error(...e){this.logLevel<=r.Error&&this.logChannel.error("[error]",...e)}logTo(e){this.logChannel=e}}(o);function l(t,i){s.log("[generateFirstSet start]");const r=e(t,i);s.log("[grammers after transferString2Grammers]",r);const o=new Array(...r.map((e=>({tocken:e.nonTerminal,terminals:new Set})))),l=new Map;r.forEach((e=>{l.set(e.nonTerminal,e.derivations)})),o.push(...t.terminals.map((e=>({tocken:e[0],terminals:new Set([e[0]]),isTerminal:!0})))),o.forEach((e=>{if(!e.isTerminal)for(let t of l.get(e.tocken))1!==t.length||t[0]!==n||e.terminals.has(n)||e.terminals.add(n)}));const a=new Map;for(let e of o)a.set(e.tocken,e);for(;;){let e=!1;if(o.forEach((i=>{if(!i.isTerminal)for(let r of l.get(i.tocken))for(let o=0;o<r.length;o++){const l=r[o];if(t.isTerminal(l)){if(i.terminals.has(l)||(s.log(l),e=!0,i.terminals.add(l)),l!==n)break}else{const t=a.get(l);if(t.terminals.forEach((t=>{t!==n&&(i.terminals.has(t)||(e=!0,i.terminals.add(t)))})),!t.terminals.has(n))break}o===r.length-1&&i.terminals.add(n)}})),!e)break}return o.filter((e=>!e.isTerminal)).sort(((e,t)=>e.tocken<t.tocken?-1:1)).map((e=>(e.terminals=new Set(Array.from(e.terminals).sort(((e,t)=>e<t?-1:1))),e)))}function a(e,t,i){const r=new Map;i.forEach((e=>{r.set(e.tocken,e)}));const o=new Set;for(let i=0;i<t.length;i++){const s=t[i];if(e.isTerminal(s)){if(s!==n){o.add(s);break}}else if(r.get(s)?.terminals.forEach((e=>{o.add(e)})),!r.get(s).terminals.has(n))break;i===t.length-1&&o.add(n)}return{tocken:t.join(""),terminals:o}}function c(e,t,i){const r=new Set;for(let o=0;o<t.length;o++){const s=t[o];if(e.isTerminal(s)){if(s!==n){r.add(s);break}}else if(i.get(s)?.terminals.forEach((e=>{r.add(e)})),!i.get(s).terminals.has(n))break;o===t.length-1&&r.add(n)}return{tocken:t.join(""),terminals:r}}function h(t,r,o){s.log("[generateFllowSet start]"),o=o?Array.from(o):l(t,r);const a=e(t,r);s.log("[grammers after transferString2Grammers]",a);const c=new Array(...a.map((e=>({tocken:e.nonTerminal,terminals:new Set([i])})))),h=new Map;a.forEach((e=>{h.set(e.nonTerminal,e.derivations)})),c.push(...t.terminals.map((e=>({tocken:e[0],terminals:new Set([i]),isTerminal:!0}))));const m=new Map;for(let e of c)m.set(e.tocken,e);o.push(...t.terminals.map((e=>({tocken:e[0],terminals:new Set([e[0]]),isTerminal:!0}))));const f=new Map;for(let e of o)f.set(e.tocken,e);for(;;){let e=!1;if(a.forEach((t=>{for(let i of t.derivations)for(let t=i.length-2;t>=0;t--){const r=m.get(i[t]);for(let o=t+1;o<i.length;o++){const t=f.get(i[o]).terminals;for(let i of t)i!==n&&(r?.terminals.has(i)||(e=!0,r?.terminals.add(i)));if(!t.has(n))break}}})),a.forEach((t=>{const i=m.get(t.nonTerminal);for(let r of t.derivations)for(let t=r.length-1;t>=0;t--){const o=r[t],s=m.get(o);for(let t of i.terminals)t!==n&&(s?.terminals.has(t)||(e=!0,s?.terminals.add(t)));if(!f.get(o).terminals.has(n))break}})),!e)break}return c.filter((e=>!e.isTerminal)).sort(((e,t)=>e.tocken<t.tocken?-1:1)).map((e=>(e.terminals=new Set(Array.from(e.terminals).sort(((e,t)=>e<t?-1:1))),e)))}class m{nonTerminals;terminals;currentLine=0;currentColumn=0;source="";constructor(e,t){this.nonTerminals=[...t],this.terminals=[...e]}setSource(e){this.source=e,this.currentLine=0,this.currentColumn=0}getSource(){console.log(this.source)}remainString(){return this.source.slice(this.currentColumn)}next(){if(this.currentColumn>=this.source.length)return{tocken:i,origin:i};for(let e of this.terminals){const t=this.source.slice(this.currentColumn).match(e[1]);if(t)return{tocken:e[0],origin:t[0]}}throw new Error(`[词法分析]: 匹配下一个tocken失败  源输入字符串: ${this.source} 剩余字符串: ${this.source.slice(this.currentColumn)}`)}pop(){try{const e=this.next();return e.tocken!==i&&(this.currentColumn+=e.origin.length),e}catch(e){throw e}}nextNotEmptyTerminal(){for(;;){const e=this.next();if("whiteSpace"!==e.tocken)return e;this.currentColumn+=e.origin.length}}nextNotEmpty(e){const t=this.currentColumn;for(let t=0;t<e-1;t++)this.popNotEmptyTerminal();const n=this.nextNotEmptyTerminal();return this.currentColumn=t,n}popNotEmptyTerminal(){const e=this.nextNotEmptyTerminal();return e.tocken!==i&&(this.currentColumn+=e.origin.length),e}isTerminal(e){let t=!0;return this.nonTerminals.some((n=>n===e&&(t=!1,!0))),t}splitDerivation(e){const n=[];let i=0;const r=e;for(;e.length;){for(let t of this.nonTerminals){const i=e.match(new RegExp("^"+t));if(i){n.push(t),e=e.slice(i[0].length);break}}for(let i of this.terminals){const r=e.match(new RegExp("^"+t(i[0])));if(r){n.push(i[0]),e=e.slice(r[0].length);break}}if(i++,i>5e4)throw new Error(`[splitDerivation] error: excute over MAX_EXCUTE str: ${r}  remaining str: ${e} `)}return n}getNewNonTerminal(e){let t=e;for(;;)if(t+="'",-1===this.nonTerminals.indexOf(t))return this.nonTerminals.unshift(t),t}}function f(t,i,r,o){const l=e(t,i),a=[],h=new Map;t.nonTerminals.forEach((e=>{const t={nonTerminal:e,terminal2Derivation:new Map};h.set(e,t),a.push(t)}));const m=new Map,f=new Map;for(let e of o)f.set(e.tocken,e);for(let e of r)m.set(e.tocken,e);return l.forEach((e=>{for(let i of e.derivations){const r=c(t,i,m),o=h.get(e.nonTerminal);s.log(r);let l=new Map;for(let t of r.terminals){if(t===n)continue;let r=o?.terminal2Derivation.get(t);l.set(t,!0),r||(r={nonTerminal:e.nonTerminal,derivations:[]},o?.terminal2Derivation.set(t,r)),r.derivations.push(i)}if(r.terminals.has(n))for(let t of f.get(e.nonTerminal).terminals){if(l.has(t))continue;let n=o?.terminal2Derivation.get(t);n||(n={nonTerminal:e.nonTerminal,derivations:[]},o?.terminal2Derivation.set(t,n)),n.derivations.push(i)}}})),a}function g(e,t){for(let n of e.terminals){const e=n[0];t.forEach((t=>{const n=t.terminal2Derivation.get(e);if(n&&n.derivations.length>1)return!1}))}return!0}const p=/^[A-Z]'*/,d=/[a-z|\u0391-\u03C9]/;function u(e){const t=new Set,n=new Set;return e.forEach((e=>{const i=e.replaceAll(/\s/g,"").split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),r=i[0];t.add(r),i[1].split("|").filter((e=>e&&"|"!==e)).forEach((e=>{for(;e.length;){let i=null;if(i=e.match(p),i)t.add(i[0]),e=e.slice(i[0].length);else{if(i=e.match(d),!i)throw new Error(`[getTockFromSimpleGrammers error] cant recognize the character remaining: ${e}`);n.add(JSON.stringify([i[0],"^"+i[0]])),e=e.slice(i[0].length)}}}))})),{nonTerminals:Array.from(t).sort(((e,t)=>t.length-e.length)),terminals:Array.from(n).map((e=>{const t=JSON.parse(e);return t[1]=new RegExp(t[1]),t}))}}function k(e){e=e.sort(((e,t)=>e<t?-1:1));let t="";for(let n of e)t+=` ${T(n)}`;return t}function T(e){let t=`${e.nonTerminal} -> `;for(let n=0;n<e.derivation.length;n++)n===e.matchPoint&&(n||(t+=" "),t+="· "),n===e.derivation.length-1?t+=`${e.derivation[n]}`:t+=`${e.derivation[n]} `,n===e.derivation.length-1&&e.matchPoint===e.derivation.length&&(t+="·");return t}function S(e,t,n){for(let i=0;i<e.length;i++){const r=e[i],o=r.derivation[r.matchPoint];if(n.isTerminal(o))continue;t.get(o)?.forEach((t=>{let n=!1;for(let i of e)if(i.nonTerminal===o&&0===i.matchPoint){if(i.derivation.length!==t.length)continue;let e=!0;for(let n=0;n<t.length;n++)if(i.derivation[n]!==t[n]){e=!1;break}if(e){n=!0;break}}n||e.push({nonTerminal:o,matchPoint:0,derivation:t})}))}}const v="Augument_S";function w(e,t=!0){e=e.sort(((e,t)=>e<t?-1:1));let n="";for(let i of e)n+=` ${x(i,t)}`;return n}function x(e,t=!0){let n=`${e.nonTerminal} -> `;for(let t=0;t<e.derivation.length;t++)t===e.matchPoint&&(t||(n+=" "),n+="· "),t===e.derivation.length-1?n+=`${e.derivation[t]}`:n+=`${e.derivation[t]} `,t===e.derivation.length-1&&e.matchPoint===e.derivation.length&&(n+="·");return e.lookAheadTocken?.length&&t&&(n+=" , "+e.lookAheadTocken.join("/")),n}function b(e,t,i,r){for(let o=0;o<e.length;o++){const s=e[o],l=s.derivation[s.matchPoint];if(i.isTerminal(l))continue;const c=t.get(l),h=[...a(i,s.derivation.slice(s.matchPoint+1),r).terminals];h.length&&-1===h.indexOf(n)||h.push(...s.lookAheadTocken),c?.forEach((t=>{let n=!1;for(let i of e)if(i.nonTerminal===l&&0===i.matchPoint){if(i.derivation.length!==t.length)continue;let e=!0;for(let n=0;n<t.length;n++)if(i.derivation[n]!==t[n]){e=!1;break}if(e){n=!0;break}}n||e.push({nonTerminal:l,matchPoint:0,derivation:t,lookAheadTocken:h})}))}}function N(e,t){for(let n of e)if(n.id===t)return n}exports.LL1Parser=class{lexer;textGrammers;constructor(e,t,n){this.lexer=new m(e,t),this.textGrammers=n}getFirstSet(){return l(this.lexer,this.textGrammers)}getFollowSet(e){return e||(e=this.getFirstSet()),h(this.lexer,this.textGrammers,e)}getPredictTable(e,t){return e||(e=this.getFirstSet()),t||(t=this.getFollowSet(e)),f(this.lexer,this.textGrammers,e,t)}getPredictProcess(e,t,r){if(r||(r=f(this.lexer,this.textGrammers,this.getFirstSet(),this.getFollowSet())),!this.lexer.nonTerminals.some((e=>t===e)))throw new Error("1");return function(e,t,r,o){let l=r.replaceAll(/\s/g,"");const a=[];let c=1;const h={id:0,text:o,check:!1},m=[h];let f={parseStack:[i,o],remainingInput:r,parseAction:""};e.setSource(l);const g=new Map;t.forEach((e=>{g.set(e.nonTerminal,e)}));try{for(;;){const t=f.parseStack[f.parseStack.length-1];if(e.isTerminal(t)){const n=e.next();if(t!==n.tocken)throw new Error(`[预测错误] 非终结符匹配错误: ${t} stack: ${f.parseStack} 剩余字符串: ${e.remainString()}`);{if(f.parseAction=`match ${n.tocken}${n.tocken===n.origin?"":": "+n.origin}`,a.push(f),f=JSON.parse(JSON.stringify(f)),e.pop(),f.parseAction="",f.remainingInput=e.remainString(),f.parseStack.pop(),0===f.parseStack.length)break;const t=m.pop();t.children||(t.children=[]),t.children.push({id:c++,text:n.origin,check:!1})}continue}const i=e.next(),r=g.get(t).terminal2Derivation.get(i.tocken);if(1!==r?.derivations?.length)throw new Error(`[预测错误] 分析输入错误  终结符: ${i}   剩余字符串: ${e.remainString()} 文法: ${r} `);f.parseAction=`Predict ${r.nonTerminal} -> ${r.derivations[0].join(" ")}`,s.log("[predict State]",f),a.push(f),f=JSON.parse(JSON.stringify(f)),f.parseStack.pop();const o=m.pop(),l=r.derivations[0].filter((e=>e!==n));o.children||(o.children=[]);for(let e of l)o.children.push({id:c++,text:e,check:!1});m.push(...[...o.children].reverse()),f.parseStack.push(...l.reverse()),f.parseAction="",f.remainingInput=e.remainString()}}catch(e){f.parseAction=e.toString(),a.push(f)}return a.astNode=h,a}(this.lexer,r,e,t)}checkPredickTableIsValid(e){return g(this.lexer,e)}checkIsLL0(){return g(this.lexer,this.getPredictTable())}getFirstSetProgressive(){return function*(t,i){yield["1. 如果X式一个终结符号，那么FIRST(X) = X ","2. 如果 X -> ε 是一个产生式，那么将e加人到 FIRST（X)中。","3. A -> B0B1B2B3，i = 0，循环i\n            FIRST(Bi) - ε 加入到 FIRST(A)中\n            如果FIRST(B1)ε\n            若B0 - B3均含有ε，将ε加入到FIRST(A)中\n        ","4. 去除所有终结符号的表项"],s.log("[generateFirstSet start]");const r=e(t,i);s.log("[grammers after transferString2Grammers]",r);const o=new Array(...r.map((e=>({tocken:e.nonTerminal,terminals:new Set})))),l=new Map;r.forEach((e=>{l.set(e.nonTerminal,e.derivations)})),o.push(...t.terminals.map((e=>({tocken:e[0],terminals:new Set([e[0]]),isTerminal:!0})))),yield{ruleIndex:0,result:o},o.forEach((e=>{if(!e.isTerminal)for(let t of l.get(e.tocken))1!==t.length||t[0]!==n||e.terminals.has(n)||e.terminals.add(n)})),yield{ruleIndex:1,result:o};const a=new Map;for(let e of o)a.set(e.tocken,e);for(;;){let e=!1;if(o.forEach((i=>{if(!i.isTerminal)for(let r of l.get(i.tocken))for(let o=0;o<r.length;o++){const l=r[o];if(t.isTerminal(l)){if(i.terminals.has(l)||(s.log(l),e=!0,i.terminals.add(l)),l!==n)break}else{const t=a.get(l);if(t.terminals.forEach((t=>{t!==n&&(i.terminals.has(t)||(e=!0,i.terminals.add(t)))})),!t.terminals.has(n))break}o===r.length-1&&i.terminals.add(n)}})),!e)break;yield{ruleIndex:2,result:o}}yield{ruleIndex:3,result:o.filter((e=>!e.isTerminal)).sort(((e,t)=>e.tocken<t.tocken?-1:1)).map((e=>(e.terminals=new Set(Array.from(e.terminals).sort(((e,t)=>e<t?-1:1))),e)))}}(this.lexer,this.textGrammers)}getFollowSetProgressive(t){return t||(t=this.getFirstSet()),function*(t,r,o){yield["1. 将$放到FOLLOW(S)中","2. 如果存在一个产生式A -> aBb ， 那么FIRST(b) 中除ε 之外的所有符号都在FOLLOW(B)中。attention: A -> aBCd 那么把first(Cd)加入到Follow(B)中去","3.如果存在一个产生式 A -> aB ， 或存在产生式 A -> aBb 且FIRST(b) 包含 ε ，那么FOLLOW(A)中的所有符号都在FOLLOW(B)中。","4. 去除所有终结符号的表项"],s.log("[generateFllowSet start]"),o=o?Array.from(o):l(t,r);const a=e(t,r);s.log("[grammers after transferString2Grammers]",a);const c=new Array(...a.map((e=>({tocken:e.nonTerminal,terminals:new Set([i])})))),h=new Map;a.forEach((e=>{h.set(e.nonTerminal,e.derivations)})),c.push(...t.terminals.map((e=>({tocken:e[0],terminals:new Set([i]),isTerminal:!0})))),yield{ruleIndex:0,result:c};const m=new Map;for(let e of c)m.set(e.tocken,e);o.push(...t.terminals.map((e=>({tocken:e[0],terminals:new Set([e[0]]),isTerminal:!0}))));const f=new Map;for(let e of o)f.set(e.tocken,e);for(;;){let e=!1;if(a.forEach((t=>{for(let i of t.derivations)for(let t=i.length-2;t>=0;t--){const r=m.get(i[t]);for(let o=t+1;o<i.length;o++){const t=f.get(i[o]).terminals;for(let i of t)i!==n&&(r?.terminals.has(i)||(e=!0,r?.terminals.add(i)));if(!t.has(n))break}}})),e&&(yield{ruleIndex:1,result:c},e=!1),a.forEach((t=>{const i=m.get(t.nonTerminal);for(let r of t.derivations)for(let t=r.length-1;t>=0;t--){const o=r[t],s=m.get(o);for(let t of i.terminals)t!==n&&(s?.terminals.has(t)||(e=!0,s?.terminals.add(t)));if(!f.get(o).terminals.has(n))break}})),e&&(yield{ruleIndex:2,result:c}),!e)break}yield{ruleIndex:3,result:c.filter((e=>!e.isTerminal)).sort(((e,t)=>e.tocken<t.tocken?-1:1)).map((e=>(e.terminals=new Set(Array.from(e.terminals).sort(((e,t)=>e<t?-1:1))),e)))}}(this.lexer,this.textGrammers,t)}getPredictProcessProgressive(e,t,r){if(r||(r=f(this.lexer,this.textGrammers,this.getFirstSet(),this.getFollowSet())),!this.lexer.nonTerminals.some((e=>t===e)))throw new Error("1");return function*(e,t,r,o){let l=r.replaceAll(/\s/g,"");const a=[];let c=1;const h={id:0,text:o,check:!1};a.astNode=h;const m=[h];let f={parseStack:[i,o],remainingInput:r,parseAction:""};e.setSource(l);const g=new Map;t.forEach((e=>{g.set(e.nonTerminal,e)})),yield a;try{for(;;){const t=f.parseStack[f.parseStack.length-1];if(e.isTerminal(t)){const n=e.next();if(t!==n.tocken)throw new Error(`[预测错误] 非终结符匹配错误: ${t} stack: ${f.parseStack} 剩余字符串: ${e.remainString()}`);{if(f.parseAction=`match ${n.tocken}${n.tocken===n.origin?"":": "+n.origin}`,a.push(f),f=JSON.parse(JSON.stringify(f)),e.pop(),f.parseAction="",f.remainingInput=e.remainString(),f.parseStack.pop(),0===f.parseStack.length)break;const t=m.pop();t.children||(t.children=[]),t.children.push({id:c++,text:n.origin,check:!1})}yield a;continue}const i=e.next(),r=g.get(t).terminal2Derivation.get(i.tocken);if(1!==r?.derivations?.length)throw new Error(`[预测错误] 分析输入错误  终结符: ${i}   剩余字符串: ${e.remainString()} 文法: ${r} `);f.parseAction=`Predict ${r.nonTerminal} -> ${r.derivations[0].join(" ")}`,s.log("[predict State]",f),a.push(f),f=JSON.parse(JSON.stringify(f)),f.parseStack.pop();const o=m.pop(),l=r.derivations[0].filter((e=>e!==n));o.children||(o.children=[]);for(let e of l)o.children.push({id:c++,text:e,check:!1});m.push(...[...o.children].reverse()),f.parseStack.push(...l.reverse()),f.parseAction="",f.remainingInput=e.remainString(),yield a}}catch(e){f.parseAction=e.toString(),a.push(f)}return a.astNode=h,a}(this.lexer,r,e,t)}getPredictTableProgressive(t,i){return t||(t=this.getFirstSet()),i||(i=this.getFollowSet(t)),function*(t,i,r,o){yield["1. 对 First(u) 中的所有终结符 a （不含 ε ），置 M[A, a] = A -> u","2. 若 First(u) 含 ε ，则对 Follow(A) 中的所有符号 a （可含 $ ），置 M[A, a] = A -> u"];const l=e(t,i),a=[],h=new Map;t.nonTerminals.forEach((e=>{const t={nonTerminal:e,terminal2Derivation:new Map};h.set(e,t),a.push(t)}));const m=new Map,f=new Map;for(let e of o)f.set(e.tocken,e);for(let e of r)m.set(e.tocken,e);for(let e of l)for(let i of e.derivations){const r=c(t,i,m),o=h.get(e.nonTerminal);s.log(r);for(let t of r.terminals){if(t===n)continue;let r=o?.terminal2Derivation.get(t);r||(r={nonTerminal:e.nonTerminal,derivations:[]},o?.terminal2Derivation.set(t,r)),r.derivations.push(i),yield{ruleIndex:0,result:a}}if(r.terminals.has(n))for(let t of f.get(e.nonTerminal).terminals){let n=o?.terminal2Derivation.get(t);n||(n={nonTerminal:e.nonTerminal,derivations:[]},o?.terminal2Derivation.set(t,n)),n.derivations.push(i),yield{ruleIndex:1,result:a}}}}(this.lexer,this.textGrammers,t,i)}},exports.LR1Parser=class{initialStateNode;allStateNodesMap;lexer;grammers;firstSet;constructor(){this.initialStateNode=null}generateState(e,t,n,r){if(!n||!r){const t=u(e);n=t.nonTerminals,r=t.terminals}s.log("[nonTerminals]",n),s.log("[terminals]",r),this.grammers=e,this.lexer=new m(r,n),this.firstSet=l(this.lexer,e);const o=new Map;for(let t of e){t=t.replaceAll(/\s/g,"");const e=t.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),n=e[0],i=e[1].split("|").filter((e=>e)).map((e=>this.lexer.splitDerivation(e)));o.set(n,i)}s.log(o),this.initialStateNode={id:0,items:[{nonTerminal:v,derivation:[t],matchPoint:0,lookAheadTocken:[i]}],edges:[]},b(this.initialStateNode.items,o,this.lexer,this.firstSet);const a=new Map;this.allStateNodesMap=a,a.set(w(this.initialStateNode.items),this.initialStateNode);const c=[];let h=0;for(;a.size!=h;){h=a.size;for(let e of a.values())if(!c[e.id]){c[e.id]=!0;for(let t of e.items)t.nonTerminal===v&&1===t.matchPoint&&e.edges.push({tocken:i,next:{id:-1,items:[],edges:[]}});for(let t of n){let n=[];for(let i of e.items)i.derivation.length!==i.matchPoint&&i.derivation[i.matchPoint]===t&&n.push({nonTerminal:i.nonTerminal,derivation:i.derivation,matchPoint:i.matchPoint+1,lookAheadTocken:i.lookAheadTocken});if(!n.length)continue;b(n,o,this.lexer,this.firstSet);const i=w(n);a.has(i)||a.set(i,{id:a.size,items:n,edges:[]}),e.edges.push({tocken:t,next:a.get(i)})}for(let t of r){let n=[];for(let i of e.items)i.derivation.length!==i.matchPoint&&i.derivation[i.matchPoint]===t[0]&&n.push({nonTerminal:i.nonTerminal,derivation:i.derivation,matchPoint:i.matchPoint+1,lookAheadTocken:i.lookAheadTocken});if(!n.length)continue;b(n,o,this.lexer,this.firstSet);const i=w(n);a.has(i)||a.set(i,{id:a.size,items:n,edges:[]}),e.edges.push({tocken:t[0],next:a.get(i)})}}}}predictInput(e,t){if(!this.lexer)throw new Error("[generatePredictTable] must call generateState before generatePredictTable");let r=[];for(e=e.replaceAll(/\s/g,""),r.push({stack:[0],symbols:[],input:[...this.lexer.splitDerivation(e),i]});;){const e=r[r.length-1],i=JSON.parse(JSON.stringify(e)),o=e.stack[e.stack.length-1];let s=N(t,o);for(let e of t)if(e.id===o){s=e;break}if(!s)throw new Error(`[predict] stateId: ${o} 的预测行找不到`);let l=!1,a=[];if(a=s.action.get(e.input[0]),a.length>1)throw new Error(`move collision ${a}`);if(!a.length){if(1!==s.action.get(n)?.length)throw new Error(`move is empty ${a}`);a=s.action.get(n),l=!0}let c=a[0];if("acc"===c){e.move="接受";break}if(c.startsWith("S"))e.move=`移入${e.input[0]}`,l?i.symbols.push(n):i.symbols.push(i.input.shift()),i.stack.push(Number(c.slice(1)));else{e.move=`根据${c}归约`;const n=c.slice(2,-1).replaceAll(/\s/g,""),r=n.split("->")[0],o=this.lexer.splitDerivation(n.split("->")[1]);for(let e=0;e<o.length;e++)i.stack.pop(),i.symbols.pop();i.symbols.push(r);const s=N(t,e.stack[i.stack.length-1]);i.stack.push(s.goto.get(r)[0])}r.push(i)}return r}mergeNewNode(e,t){if(e.id=Number(`${e.id}${t.id}`),e.items.length!==t.items.length)throw new Error("[mergeNewNode] 合并核心节点出错");for(let n=0;n<e.items.length;n++){const i=e.items[n],r=t.items[n];for(let e of r.lookAheadTocken)-1===i.lookAheadTocken?.indexOf(e)&&i.lookAheadTocken.push(e)}e.acc=e.acc||t.acc}generateLALRPredictTable(){if(!this.initialStateNode||!this.allStateNodesMap||!this.lexer)throw new Error("[generatePredictTable] must call generateState before generatePredictTable");const e=new Map;(()=>{const t=new Map,n=i=>{if(t.has(i.id))return;t.set(i.id,!0);const r=w(i.items,!1);let o=e.get(r);if(o)this.mergeNewNode(o,i);else{o={id:i.id,items:[],edges:[],acc:i.acc};for(let e of i.items)o.items.push(JSON.parse(JSON.stringify(e)));o.edges=[],e.set(r,o)}for(let e of i.edges)n(e.next)};n(this.initialStateNode)})();const t=new Map;(()=>{const n=new Map,i=r=>{if(n.has(r.id))return;n.set(r.id,!0);const o=w(r.items,!1);t.set(r.id,e.get(o).id);for(let e of r.edges)i(e.next)};i(this.initialStateNode)})();const n=e=>t.get(e),r=[],o=new Map;for(let t of this.allStateNodesMap.values()){if(o.get(n(t.id)))continue;o.set(n(t.id),!0);let s={id:n(t.id),action:new Map,goto:new Map};for(let e of this.lexer.nonTerminals)s.goto.set(e,[]);for(let e of this.lexer.terminals)s.action.set(e[0],[]);s.action.set(i,[]);for(let e of t.edges)e.tocken!==i?this.lexer.isTerminal(e.tocken)?s.action.get(e.tocken).push(`S${n(e.next.id)}`):s.goto.get(e.tocken).push(n(e.next.id)):s.action.get(e.tocken).push("acc");let l=t.items;n(t.id)!==t.id&&(l=e.get(w(t.items,!1)).items);for(let e of l)if(e.matchPoint===e.derivation.length){if(e.nonTerminal===v)continue;for(let t of e.lookAheadTocken)s.action.get(t).push(`r(${e.nonTerminal} -> ${e.derivation.join(" ")})`)}r.push(s)}return r.sort(((e,t)=>e.id-t.id)),r}generateLR1PredictTable(){if(!this.initialStateNode||!this.allStateNodesMap||!this.lexer)throw new Error("[generatePredictTable] must call generateState before generatePredictTable");const e=[];for(let t of this.allStateNodesMap.values()){let n={id:t.id,action:new Map,goto:new Map};for(let e of this.lexer.nonTerminals)n.goto.set(e,[]);for(let e of this.lexer.terminals)n.action.set(e[0],[]);n.action.set(i,[]);for(let e of t.edges)e.tocken!==i?this.lexer.isTerminal(e.tocken)?n.action.get(e.tocken).push(`S${e.next.id}`):n.goto.get(e.tocken).push(e.next.id):n.action.get(e.tocken).push("acc");for(let e of t.items)if(e.matchPoint===e.derivation.length){if(e.nonTerminal===v)continue;for(let t of e.lookAheadTocken)n.action.get(t).push(`r(${e.nonTerminal} -> ${e.derivation.join(" ")})`)}e.push(n)}return e.sort(((e,t)=>e.id-t.id)),e}get stateGraph(){const e=[],t=n=>{if(e[n.id])return e[n.id];const i={};e[n.id]=i,i.id=n.id;let r=0;n.items?.forEach((e=>{e.matchPoint===e.derivation.length&&r++})),i.isCollision=r>=2,i.items=n.items.map((e=>x(e))),i.edges=[];for(let e of n.edges)i.edges.push({tocken:e.tocken,next:t(e.next)});return i};return t(this.initialStateNode)}},exports.LRParser=class{initialStateNode;allStateNodesMap;lexer;grammers;constructor(){this.initialStateNode=null}generateState(e,t,n,r){if(!n||!r){const t=u(e);n=t.nonTerminals,r=t.terminals}const o="Augument_S";s.log("[nonTerminals]",n),s.log("[terminals]",r),this.grammers=e,this.lexer=new m(r,n);const l=new Map;for(let t of e){t=t.replaceAll(/\s/g,"");const e=t.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),n=e[0],i=e[1].split("|").filter((e=>e)).map((e=>this.lexer.splitDerivation(e)));l.set(n,i)}s.log(l),this.initialStateNode={id:0,items:[{nonTerminal:o,derivation:[t],matchPoint:0}],edges:[]},S(this.initialStateNode.items,l,this.lexer);const a=new Map;this.allStateNodesMap=a,a.set(k(this.initialStateNode.items),this.initialStateNode);const c=[];let h=0;for(;a.size!=h;){h=a.size;for(let e of a.values())if(!c[e.id]){c[e.id]=!0;for(let t of e.items)t.nonTerminal===o&&1===t.matchPoint&&e.edges.push({tocken:i,next:{id:-1,items:[],edges:[]}});for(let t of n){let n=[];for(let i of e.items)i.derivation.length!==i.matchPoint&&i.derivation[i.matchPoint]===t&&n.push({nonTerminal:i.nonTerminal,derivation:i.derivation,matchPoint:i.matchPoint+1});if(!n.length)continue;S(n,l,this.lexer);const i=k(n);a.has(i)||a.set(i,{id:a.size,items:n,edges:[]}),e.edges.push({tocken:t,next:a.get(i)})}for(let t of r){let n=[];for(let i of e.items)i.derivation.length!==i.matchPoint&&i.derivation[i.matchPoint]===t[0]&&n.push({nonTerminal:i.nonTerminal,derivation:i.derivation,matchPoint:i.matchPoint+1});if(!n.length)continue;S(n,l,this.lexer);const i=k(n);a.has(i)||a.set(i,{id:a.size,items:n,edges:[]}),e.edges.push({tocken:t[0],next:a.get(i)})}}}}*generateStateProgressive(e,t,n,r){if(!n||!r){const t=u(e);n=t.nonTerminals,r=t.terminals}const o="Augument_S";s.log("[nonTerminals]",n),s.log("[terminals]",r),this.grammers=e,this.lexer=new m(r,n);const l=new Map;for(let t of e){t=t.replaceAll(/\s/g,"");const e=t.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),n=e[0],i=e[1].split("|").filter((e=>e)).map((e=>this.lexer.splitDerivation(e)));l.set(n,i)}s.log(l),this.initialStateNode={id:0,items:[{nonTerminal:o,derivation:[t],matchPoint:0}],edges:[]},S(this.initialStateNode.items,l,this.lexer),yield;const a=new Map;this.allStateNodesMap=a,a.set(k(this.initialStateNode.items),this.initialStateNode);const c=[];let h=0;for(;a.size!=h;){h=a.size;for(let e of a.values())if(!c[e.id]){c[e.id]=!0;for(let t of e.items)t.nonTerminal===o&&1===t.matchPoint&&e.edges.push({tocken:i,next:{id:-1,items:[],edges:[]}});for(let t of n){let n=[];for(let i of e.items)i.derivation.length!==i.matchPoint&&i.derivation[i.matchPoint]===t&&n.push({nonTerminal:i.nonTerminal,derivation:i.derivation,matchPoint:i.matchPoint+1});if(!n.length)continue;S(n,l,this.lexer);const i=k(n);a.has(i)||a.set(i,{id:a.size,items:n,edges:[]}),e.edges.push({tocken:t,next:a.get(i)}),yield}for(let t of r){let n=[];for(let i of e.items)i.derivation.length!==i.matchPoint&&i.derivation[i.matchPoint]===t[0]&&n.push({nonTerminal:i.nonTerminal,derivation:i.derivation,matchPoint:i.matchPoint+1});if(!n.length)continue;S(n,l,this.lexer);const i=k(n);a.has(i)||a.set(i,{id:a.size,items:n,edges:[]}),e.edges.push({tocken:t[0],next:a.get(i)}),yield}}}}predictInput(e,t){if(!this.lexer)throw new Error("[generatePredictTable] must call generateState before generatePredictTable");let r=[];for(e=e.replaceAll(/\s/g,""),r.push({stack:[0],symbols:[],input:[...this.lexer.splitDerivation(e),i]});;){const e=r[r.length-1],i=JSON.parse(JSON.stringify(e)),o=t[e.stack[e.stack.length-1]];let s=!1,l=o.action.get(e.input[0]);if(l.length>1)throw new Error(`move collision ${l}`);if(!l.length){if(1!==o.action.get(n)?.length)throw new Error(`move is empty ${l}`);l=o.action.get(n),s=!0}let a=l[0];if("acc"===a){e.move="接受";break}if(a.startsWith("S"))e.move=`移入${e.input[0]}`,s?i.symbols.push(n):i.symbols.push(i.input.shift()),i.stack.push(Number(a.slice(1)));else{e.move=`根据${a}归约`;const n=a.slice(2,-1).replaceAll(/\s/g,""),r=n.split("->")[0],o=this.lexer.splitDerivation(n.split("->")[1]);for(let e=0;e<o.length;e++)i.stack.pop(),i.symbols.pop();i.symbols.push(r);const s=t[e.stack[i.stack.length-1]];i.stack.push(s.goto.get(r)[0])}r.push(i)}return r}predictInputWithAST(e,t){if(!this.lexer)throw new Error("[generatePredictTable] must call generateState before generatePredictTable");let n=[];e=e.replaceAll(/\s/g,"");for(n.push({stack:[0],symbols:[],input:[...this.lexer.splitDerivation(e),i]});;){const e=n[n.length-1],i=JSON.parse(JSON.stringify(e)),r=t[e.stack[e.stack.length-1]].action.get(e.input[0]);if(r.length>1)throw new Error(`move collision ${r}`);if(!r.length)throw new Error(`move is empty ${r}`);let o=r[0];if("acc"===o){e.move="接受";break}if(o.startsWith("S")){e.move=`移入${e.input[0]}`;const t={id:1,text:i.input.shift(),check:!1};i.symbols.push(t),i.stack.push(Number(o.slice(1)))}else{e.move=`根据${o}归约`;const n=o.slice(2,-1).replaceAll(/\s/g,""),r=n.split("->")[0],s=this.lexer.splitDerivation(n.split("->")[1]),l={id:2,text:r,check:!1};l.children||(l.children=[]);for(let e=0;e<s.length;e++){i.stack.pop();const e=i.symbols.pop();l.children.push(e)}i.symbols.push(l);const a=t[e.stack[i.stack.length-1]];i.stack.push(a.goto.get(r)[0])}n.push(i)}return n}*predictInputProgressive(e,t){if(!this.lexer)throw new Error("[generatePredictTable] must call generateState before generatePredictTable");let n=[];e=e.replaceAll(/\s/g,"");for(n.push({stack:[0],symbols:[],input:[...this.lexer.splitDerivation(e),i]}),yield n;;){const e=n[n.length-1],i=JSON.parse(JSON.stringify(e)),r=t[e.stack[e.stack.length-1]].action.get(e.input[0]);if(r.length>1)throw new Error(`move collision ${r}`);if(!r.length)throw new Error(`move is empty ${r}`);let o=r[0];if("acc"===o){e.move="接受";break}if(o.startsWith("S")){e.move=`移入${e.input[0]}`;const t={id:100,text:i.input.shift(),check:!1};i.symbols.push(t),i.stack.push(Number(o.slice(1)))}else{e.move=`根据${o}归约`;const n=o.slice(2,-1).replaceAll(/\s/g,""),r=n.split("->")[0],s=this.lexer.splitDerivation(n.split("->")[1]),l={id:99,text:r,check:!1};l.children||(l.children=[]);for(let e=0;e<s.length;e++){i.stack.pop();const e=i.symbols.pop();l.children.push(e)}i.symbols.push(l);const a=t[e.stack[i.stack.length-1]];i.stack.push(a.goto.get(r)[0])}yield n,n.push(i)}return n}generateLR0PredictTable(){if(!this.initialStateNode||!this.allStateNodesMap||!this.lexer)throw new Error("[generatePredictTable] must call generateState before generatePredictTable");const e=[];for(let t of this.allStateNodesMap.values()){let n={id:t.id,action:new Map,goto:new Map};for(let e of this.lexer.nonTerminals)n.goto.set(e,[]);for(let e of this.lexer.terminals)n.action.set(e[0],[]);n.action.set(i,[]);for(let e of t.edges)e.tocken!==i?this.lexer.isTerminal(e.tocken)?n.action.get(e.tocken).push(`S${e.next.id}`):n.goto.get(e.tocken).push(e.next.id):n.action.get(e.tocken).push("acc");for(let e of t.items)if(e.matchPoint===e.derivation.length){for(let t of this.lexer.terminals)n.action.get(t[0]).push(`r(${e.nonTerminal} -> ${e.derivation.join(" ")})`);n.action.get(i)?.length||n.action.get(i).push(`r(${e.nonTerminal} -> ${e.derivation.join(" ")})`)}e.push(n)}return e.sort(((e,t)=>e.id-t.id)),e}generateSLR1PredictTable(){if(!(this.initialStateNode&&this.allStateNodesMap&&this.lexer&&this.grammers))throw new Error("[generatePredictTable] must call generateState before generatePredictTable");const e=h(this.lexer,this.grammers);console.log(e);const t=[];for(let n of this.allStateNodesMap.values()){let r={id:n.id,action:new Map,goto:new Map};for(let e of this.lexer.nonTerminals)r.goto.set(e,[]);for(let e of this.lexer.terminals)r.action.set(e[0],[]);r.action.set(i,[]);for(let e of n.edges)e.tocken!==i?this.lexer.isTerminal(e.tocken)?r.action.get(e.tocken).push(`S${e.next.id}`):r.goto.get(e.tocken).push(e.next.id):r.action.get(e.tocken).push("acc");for(let t of n.items)if(t.matchPoint===t.derivation.length){let n=[];for(let i of e)if(i.tocken===t.nonTerminal){n=[...i.terminals.values()];break}for(let e of n)r.action.get(e[0]).push(`r(${t.nonTerminal} -> ${t.derivation.join(" ")})`)}t.push(r)}return t.sort(((e,t)=>e.id-t.id)),t}get stateGraph(){const e=[],t=n=>{if(e[n.id])return e[n.id];const i={};e[n.id]=i,i.id=n.id;let r=0,o=0;n.items?.forEach((e=>{e.matchPoint===e.derivation.length?r++:this.lexer?.isTerminal(e.derivation[e.matchPoint])&&o++})),i.isCollision=r>=2||r>=1&&o>0,i.items=n.items.map((e=>T(e))),i.edges=[];for(let e of n.edges)i.edges.push({tocken:e.tocken,next:t(e.next)});return i};return t(this.initialStateNode)}},exports.Lexer=m,exports.checkNeedClearRightRecursion=function(e,t,n){if(!t||!n){const i=u(e);t=i.nonTerminals,n=i.terminals}s.log("[nonTerminals]",t),s.log("[terminals]",n);let i=new m(n,t);const r=new Map;for(let t of e){t=t.replaceAll(/\s/g,"");const e=t.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),n=e[0],o=e[1].split("|").filter((e=>e)).map((e=>i.splitDerivation(e)));r.set(n,o)}s.log("[nonTerminals2DerivationMap]",r);for(let e=0;e<t.length;e++){const n=r.get(t[e]);for(let i=n.length-1;i>=0;i--){if(n[i][0]===t[e])return!0}}return!1},exports.checkNeedliftUpCommonTocken=function(e,t,n){let i=e;if(!t||!n){const i=u(e);t=i.nonTerminals,n=i.terminals}let r=new m(n,t);for(let e of i){e=e.replaceAll(/\s/g,"");const t=e.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e))[1].split("|").filter((e=>e)).map((e=>(s.log("[debug]",i),r.splitDerivation(e)))),n=new Map;t.forEach((e=>{let t=n.get(e[0]);t?t.push(e.slice(1)):t=[e.slice(1)],n.set(e[0],t)}));for(let e of n.keys())if(1!==n.get(e)?.length)return!0}return!1},exports.checkNeedunionGrammers=function(e){let t=new Map;for(let n of e){n=n.replaceAll(/\s/g,"");const e=n.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),i=e[0],r=e[1];if(t.has(i))return!0;t.set(i,[r])}return!1},exports.clearRightRecursion=function(e,t,i){const r=[];if(!t||!i){const n=u(e);t=n.nonTerminals,i=n.terminals}s.log("[nonTerminals]",t),s.log("[terminals]",i);let o=new m(i,t);const l=new Map;for(let t of e){t=t.replaceAll(/\s/g,"");const e=t.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),n=e[0],i=e[1].split("|").filter((e=>e)).map((e=>o.splitDerivation(e)));l.set(n,i)}s.log("[nonTerminals2DerivationMap]",l);for(let e=0;e<t.length;e++){const i=l.get(t[e]);for(let n=0;n<e;n++){const e=l.get(t[n]);for(let r=i.length-1;r>=0;r--){const o=i[r];if(o[0]===t[n]){s.log(o,t[n]);for(let t of e)s.log("[-]",t),i?.push([...t,...o.slice(1)]);i?.splice(r,1)}}}const r=[];for(let n=i.length-1;n>=0;n--){i[n][0]===t[e]&&r.push(n)}if(r.length){const s=o.getNewNonTerminal(t[e]),a=[],c=[];for(let e=i.length-1;e>=0;e--)-1===r.indexOf(e)&&a.push([...i[e][0]===n?i[e].slice(1):i[e],s]);for(let e of r)c.push([...i[e].slice(1),s]);c.push([n]),l.set(t[e],[...a,...r.length?[]:i]),l.set(s,c)}s.log("[nonTerminals2DerivationMap in process]",l,i)}for(let e of l.keys()){const t=l.get(e).map((e=>e.join(" "))).join(" | ");r.push(`${e} -> ${t}`)}return r},exports.getTockFromSimpleGrammers=u,exports.liftUpCommonTocken=function(e,t,n){let i=e;if(!t||!n){const i=u(e);t=i.nonTerminals,n=i.terminals}let r=new m(n,t);for(;;){let e=[];const t=i.map((t=>{const n=(t=t.replaceAll(/\s/g,"")).split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),o=n[0],l=n[1].split("|").filter((e=>e)).map((e=>(s.log("[debug]",i),r.splitDerivation(e)))),a=[],c=new Map;l.forEach((e=>{let t=c.get(e[0]);t?t.push(e.slice(1)):t=[e.slice(1)],c.set(e[0],t)}));for(let t of c.keys()){if(1===c.get(t)?.length){a.push(t+c.get(t)[0].join(""));continue}const n=c.get(t),i=r.getNewNonTerminal(o);a.push(t+i),e.push(i+" -> "+n?.map((e=>e.join(" "))).join(" | "))}return o+" -> "+a.join(" | ")}));s.log("[pre]",t,e);const n=[...t,...e];if(s.log("[com]",i,n),i.length===n.length)break;i=n}return i},exports.unionGrammers=function(e,t,n){let i=new Map;const r=[];if(!t||!n){const i=u(e);t=i.nonTerminals,n=i.terminals}let o=new m(n,t);e.forEach((e=>{const t=(e=e.replaceAll(/\s/g,"")).split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),n=t[0],l=t[1].split("|").filter((e=>e)).map((e=>(s.log("[debug]",r),o.splitDerivation(e))));if(i.has(n)){const e=i.get(n);l.forEach((t=>{const n=t.join(" ");-1===e?.indexOf(n)&&e.push(n)}))}else i.set(n,l.map((e=>e.join(" "))))}));for(let e of i.keys()){const t=[...new Set(i.get(e))];r.push(`${e} -> ${t.join("|")}`.split("|").join(" | "))}return s.log(r),r};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguY2pzLmpzIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMvaW5kZXgudHMiLCIuLi9zcmMvdXRpbHMvY29uc3QudHMiLCIuLi9zcmMvdXRpbHMvbG9nLnRzIiwiLi4vc3JjL2ZpcnN0U2V0LnRzIiwiLi4vc3JjL2ZvbGxvd1NldC50cyIsIi4uL3NyYy9sZXhlci50cyIsIi4uL3NyYy9MTDEvcHJlZGljdFRhYmxlLnRzIiwiLi4vc3JjL3NpbXBsZUdyYW1tZXJIZWxwZXIudHMiLCIuLi9zcmMvTFIwL0xSU3RhdGUudHMiLCIuLi9zcmMvTFIxL0xSMVN0YXRlLnRzIiwiLi4vc3JjL0xMMS9wYXJzZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IExleGVyIGZyb20gXCJAL2xleGVyXCI7XHJcbmltcG9ydCB7IEdyYW1tZXJzIH0gZnJvbSBcIkAvdHlwZXMvdHlwZVwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZmVyU3RyaW5nMkdyYW1tZXJzKGxleGVyOiBMZXhlciwgZ3JhbW1lcnM6IEFycmF5PHN0cmluZz4pOiBHcmFtbWVycyB7XHJcbiAgICByZXR1cm4gZ3JhbW1lcnMubWFwKGdyYW1tZXIgPT4ge1xyXG4gICAgICAgIHJldHVybiBncmFtbWVyLnJlcGxhY2VBbGwoL1xccy9nLCBcIlwiKTtcclxuICAgIH0pLm1hcChncmFtbWVyID0+IHtcclxuICAgICAgICBjb25zdCBhcnIgPSBncmFtbWVyLnNwbGl0KC8oPT4pfCgtPikvKS5maWx0ZXIodiA9PiB2ICE9PSBcIj0+XCIgJiYgdiAhPT0gXCItPlwiICYmIHYpO1xyXG4gICAgICAgIGNvbnN0IGRlcml2YXRpb25zID0gYXJyWzFdLnNwbGl0KFwifFwiKS5maWx0ZXIodiA9PiB2ICYmIHYgIT09IFwifFwiKS5tYXAoZGVyaXZhdGlvbiA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBsZXhlci5zcGxpdERlcml2YXRpb24oZGVyaXZhdGlvbik7XHJcbiAgICAgICAgfSlcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBub25UZXJtaW5hbDogYXJyWzBdLFxyXG4gICAgICAgICAgICBkZXJpdmF0aW9uczogZGVyaXZhdGlvbnMsXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNTZXRJbmNsdWRlcyhhOiBTZXQ8dW5rbm93bj4sIGI6IFNldDx1bmtub3duPik6IGJvb2xlYW4ge1xyXG4gICAgZm9yIChsZXQgaXRlbSBvZiBiLmtleXMoKSkge1xyXG4gICAgICAgIGlmICghYS5oYXMoaXRlbSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2FmZVJlZ0NoYXJhY3RlcihjaGFyOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgc3dpdGNoIChjaGFyKSB7XHJcbiAgICBjYXNlIFwiK1wiOlxyXG4gICAgY2FzZSBcIipcIjpcclxuICAgIGNhc2UgXCIoXCI6XHJcbiAgICBjYXNlIFwiKVwiOlxyXG4gICAgICAgIHJldHVybiBgXFxcXCR7Y2hhcn1gO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm4gY2hhcjtcclxuICAgIH1cclxufSIsIlxyXG5cclxuZXhwb3J0IGNvbnN0IEVtcHR5Q2hhcmFjdGVyID0gXCLOtVwiO1xyXG5leHBvcnQgY29uc3QgRW5kaW5nQ2hhcmFjdGVyID0gXCIkXCI7IiwiLypTVEFSVC5PTkxZVEVTVCovXHJcbmltcG9ydCBjb2xvcnMgZnJvbSBcImNvbG9yc1wiXHJcbi8qRU5ELk9OTFlURVNUKi9cclxuXHJcbmVudW0gTG9nTGV2ZWwge1xyXG4gICAgTm9ybWFsLFxyXG4gICAgV2Fybm5pbmcsXHJcbiAgICBFcnJvcixcclxuICAgIE5vbmVcclxufVxyXG5pbnRlcmZhY2UgTG9nQ2hhbm5lbCB7XHJcbiAgICBsb2coLi4uZGF0YTogYW55W10pOiB2b2lkO1xyXG4gICAgd2FybiguLi5kYXRhOiBhbnlbXSk6IHZvaWQ7XHJcbiAgICBlcnJvciguLi5kYXRhOiBhbnlbXSk6IHZvaWQ7XHJcblxyXG59XHJcblxyXG5jbGFzcyBMb2dnZXIge1xyXG4gICAgcHVibGljIGxvZ0xldmVsOiBMb2dMZXZlbDtcclxuICAgIHB1YmxpYyBsb2dDaGFubmVsOiBMb2dDaGFubmVsO1xyXG4gICAgY29uc3RydWN0b3IobG9nTGV2ZWw6IExvZ0xldmVsID0gTG9nTGV2ZWwuTm9ybWFsLCBsb2dDaGFubmVsOiBMb2dDaGFubmVsID0gY29uc29sZSkge1xyXG4gICAgICAgIHRoaXMubG9nTGV2ZWwgPSBsb2dMZXZlbDtcclxuICAgICAgICB0aGlzLmxvZ0NoYW5uZWwgPSBsb2dDaGFubmVsO1xyXG4gICAgfVxyXG4gICAgbG9nKC4uLmluZm86IGFueVtdKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubG9nTGV2ZWwgPD0gTG9nTGV2ZWwuTm9ybWFsKSB7XHJcbiAgICAgICAgICAgIC8qU1RBUlQuT05MWVRFU1QqL1xyXG4gICAgICAgICAgICBjb2xvcnMuZW5hYmxlKCk7XHJcbiAgICAgICAgICAgIC8qRU5ELk9OTFlURVNUKi9cclxuICAgICAgICAgICAgdGhpcy5sb2dDaGFubmVsLmxvZyhcIltub3JtYWxdXCIvKlNUQVJULk9OTFlURVNUKi8ucmFpbmJvdy8qRU5ELk9OTFlURVNUKi8sIC4uLmluZm8pO1xyXG4gICAgICAgICAgICAvKlNUQVJULk9OTFlURVNUKi9cclxuICAgICAgICAgICAgY29sb3JzLmRpc2FibGUoKTtcclxuICAgICAgICAgICAgLypFTkQuT05MWVRFU1QqL1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHdhcm4oLi4uaW5mbzogYW55W10pIHtcclxuICAgICAgICBpZiAodGhpcy5sb2dMZXZlbCA8PSBMb2dMZXZlbC5XYXJubmluZykge1xyXG4gICAgICAgICAgICAvKlNUQVJULk9OTFlURVNUKi9cclxuICAgICAgICAgICAgY29sb3JzLmVuYWJsZSgpO1xyXG4gICAgICAgICAgICAvKkVORC5PTkxZVEVTVCovXHJcbiAgICAgICAgICAgIHRoaXMubG9nQ2hhbm5lbC53YXJuKFwiW3dhcm5dXCIvKlNUQVJULk9OTFlURVNUKi8ueWVsbG93LypFTkQuT05MWVRFU1QqLywgLi4uaW5mbyk7XHJcbiAgICAgICAgICAgIC8qU1RBUlQuT05MWVRFU1QqL1xyXG4gICAgICAgICAgICBjb2xvcnMuZGlzYWJsZSgpO1xyXG4gICAgICAgICAgICAvKkVORC5PTkxZVEVTVCovXHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVycm9yKC4uLmluZm86IGFueVtdKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubG9nTGV2ZWwgPD0gTG9nTGV2ZWwuRXJyb3IpIHtcclxuICAgICAgICAgICAgLypTVEFSVC5PTkxZVEVTVCovXHJcbiAgICAgICAgICAgIGNvbG9ycy5lbmFibGUoKTtcclxuICAgICAgICAgICAgLypFTkQuT05MWVRFU1QqL1xyXG4gICAgICAgICAgICB0aGlzLmxvZ0NoYW5uZWwuZXJyb3IoXCJbZXJyb3JdXCIvKlNUQVJULk9OTFlURVNUKi8ucmVkLypFTkQuT05MWVRFU1QqLywgLi4uaW5mbyk7XHJcbiAgICAgICAgICAgIC8qU1RBUlQuT05MWVRFU1QqL1xyXG4gICAgICAgICAgICBjb2xvcnMuZGlzYWJsZSgpO1xyXG4gICAgICAgICAgICAvKkVORC5PTkxZVEVTVCovXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbG9nVG8obG9nQ2hhbm5lbDogTG9nQ2hhbm5lbCkge1xyXG4gICAgICAgIHRoaXMubG9nQ2hhbm5lbCA9IGxvZ0NoYW5uZWw7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIE51bGxMb2dDaGFubmVsIHtcclxuICAgIHB1YmxpYyBsb2coLi4uZGF0YTogYW55W10pOiB2b2lkIHsgfVxyXG4gICAgcHVibGljIHdhcm4oLi4uZGF0YTogYW55W10pOiB2b2lkIHsgfVxyXG4gICAgcHVibGljIGVycm9yKC4uLmRhdGE6IGFueVtdKTogdm9pZCB7IH1cclxufVxyXG5leHBvcnQgY29uc3QgbnVsbExvZ0NoYW5uZWwgPSBuZXcgTnVsbExvZ0NoYW5uZWwoKTtcclxuXHJcbmxldCBsb2dMZXZlbF9pbml0ID0gTG9nTGV2ZWwuTm9ybWFsXHJcbnZhciBfX2Vudl9fID0gXCJcIjtcclxuc3dpdGNoIChfX2Vudl9fKSB7XHJcbmNhc2UgXCJwcm9kXCI6XHJcbiAgICBsb2dMZXZlbF9pbml0ID0gTG9nTGV2ZWwuRXJyb3JcclxufVxyXG5leHBvcnQgZGVmYXVsdCBuZXcgTG9nZ2VyKGxvZ0xldmVsX2luaXQpXHJcbiIsImltcG9ydCBMZXhlciBmcm9tIFwiLi9sZXhlclwiO1xyXG5pbXBvcnQgeyBHcmFtbWVyU2V0LCBHcmFtbWVyU2V0TGluZSwgTm9uVGVybWluYWwsIFByb2Nlc3MsIFJ1bGUsIFRlcm1pbmFsIH0gZnJvbSBcIi4vdHlwZXMvdHlwZVwiO1xyXG5pbXBvcnQgeyB0cmFuc2ZlclN0cmluZzJHcmFtbWVycyB9IGZyb20gXCIuL3V0aWxzXCJcclxuaW1wb3J0IHsgRW1wdHlDaGFyYWN0ZXIgfSBmcm9tIFwiLi91dGlscy9jb25zdFwiO1xyXG5pbXBvcnQgbG9nIGZyb20gXCIuL3V0aWxzL2xvZ1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2VuZXJhdGVGaXJzdFNldChsZXhlcjogTGV4ZXIsIGluR3JhbW1lcnM6IEFycmF5PHN0cmluZz4pOiBHcmFtbWVyU2V0IHtcclxuICAgIGxvZy5sb2coXCJbZ2VuZXJhdGVGaXJzdFNldCBzdGFydF1cIik7XHJcbiAgICBjb25zdCBncmFtbWVycyA9IHRyYW5zZmVyU3RyaW5nMkdyYW1tZXJzKGxleGVyLCBpbkdyYW1tZXJzKTtcclxuICAgIGxvZy5sb2coXCJbZ3JhbW1lcnMgYWZ0ZXIgdHJhbnNmZXJTdHJpbmcyR3JhbW1lcnNdXCIsIGdyYW1tZXJzKTtcclxuICAgIGNvbnN0IGZpcnN0U2V0OiBHcmFtbWVyU2V0ID0gbmV3IEFycmF5KC4uLmdyYW1tZXJzLm1hcChncmFtbWVyID0+IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0b2NrZW46IGdyYW1tZXIubm9uVGVybWluYWwsXHJcbiAgICAgICAgICAgIHRlcm1pbmFsczogbmV3IFNldDxUZXJtaW5hbD4oKSxcclxuICAgICAgICB9XHJcbiAgICB9KSk7XHJcbiAgICBjb25zdCBncmFtbWVyTWFwID0gbmV3IE1hcDxzdHJpbmcsIHN0cmluZ1tdW10+KCk7XHJcbiAgICBncmFtbWVycy5mb3JFYWNoKGdyYW1tZXIgPT4ge1xyXG4gICAgICAgIGdyYW1tZXJNYXAuc2V0KGdyYW1tZXIubm9uVGVybWluYWwsIGdyYW1tZXIuZGVyaXZhdGlvbnMpO1xyXG4gICAgfSlcclxuICAgIC8qIFxyXG4gICAgICAgIOWmguaenFjlvI/kuIDkuKrnu4jnu5PnrKblj7fvvIzpgqPkuYhGSVJTVChYKSA9IFggXHJcbiAgICAqL1xyXG4gICAgZmlyc3RTZXQucHVzaCguLi5sZXhlci50ZXJtaW5hbHMubWFwKHRlcm1pbmFsID0+IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0b2NrZW46IHRlcm1pbmFsWzBdLFxyXG4gICAgICAgICAgICB0ZXJtaW5hbHM6IG5ldyBTZXQoW3Rlcm1pbmFsWzBdXSksXHJcbiAgICAgICAgICAgIGlzVGVybWluYWw6IHRydWVcclxuICAgICAgICB9XHJcbiAgICB9KSlcclxuICAgIC8qIFxyXG4gICAgICAgIOWmguaenCBYID0+IM61IOaYr+S4gOS4quS6p+eUn+W8j++8jOmCo+S5iOWwhmXliqDkurrliLAgRklSU1TvvIhYKeS4reOAglxyXG4gICAgKi9cclxuICAgIGZpcnN0U2V0LmZvckVhY2goc2V0TGluZSA9PiB7XHJcbiAgICAgICAgaWYgKHNldExpbmUuaXNUZXJtaW5hbCkgcmV0dXJuO1xyXG4gICAgICAgIGZvciAobGV0IGRlcml2YXRpb24gb2YgZ3JhbW1lck1hcC5nZXQoc2V0TGluZS50b2NrZW4pISkge1xyXG4gICAgICAgICAgICBpZiAoZGVyaXZhdGlvbi5sZW5ndGggPT09IDEgJiYgZGVyaXZhdGlvblswXSA9PT0gRW1wdHlDaGFyYWN0ZXIgJiYgIXNldExpbmUudGVybWluYWxzLmhhcyhFbXB0eUNoYXJhY3RlcikpIHtcclxuICAgICAgICAgICAgICAgIHNldExpbmUudGVybWluYWxzLmFkZChFbXB0eUNoYXJhY3Rlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4gICAgY29uc3QgZmlyc3RTZXRNYXAgPSBuZXcgTWFwPHN0cmluZywgR3JhbW1lclNldExpbmU+KCk7XHJcbiAgICBmb3IgKGxldCBzZXRMaW5lIG9mIGZpcnN0U2V0KSB7XHJcbiAgICAgICAgZmlyc3RTZXRNYXAuc2V0KHNldExpbmUudG9ja2VuLCBzZXRMaW5lKTtcclxuICAgIH1cclxuICAgIC8vIOW+queOr+S4i+mdouatpemqpCDnm7TliLDmsqHmnInlj5jljJbkuLrmraJcclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgbGV0IGhhc0NoYW5nZSA9IGZhbHNlO1xyXG4gICAgICAgIC8qIFxyXG4gICAgICAgICAgICBBID0+IEIwQjFCMkIzXHJcbiAgICAgICAgICAgIGkgPSAwXHJcbiAgICAgICAgICAgIEZJUlNUKEJpKSAtIEVtcHR5Q2hhcmFjdGVyIOWKoOWFpeWIsCBGSVJTVChBKeS4rVxyXG4gICAgICAgICAgICDlpoLmnpxGSVJTVChCMSnkuI3lkKvmnIlFbXB0eUNoYXJhY3RlcumAgOWHuuW+queOr1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAg6IulQjAtQjPlnYflkKvmnIlFbXB0eUNoYXJhY3RlciDlsIZFbXB0eUNoYXJhY3RlcuWKoOWFpeWIsEZJUlNUKEEp5LitXHJcbiAgICAgICAgKi9cclxuICAgICAgICBmaXJzdFNldC5mb3JFYWNoKHNldExpbmUgPT4ge1xyXG4gICAgICAgICAgICBpZiAoc2V0TGluZS5pc1Rlcm1pbmFsKSByZXR1cm47XHJcbiAgICAgICAgICAgIGZvciAobGV0IGRlcml2YXRpb24gb2YgZ3JhbW1lck1hcC5nZXQoc2V0TGluZS50b2NrZW4pISkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZXJpdmF0aW9uLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdG9ja2VuID0gZGVyaXZhdGlvbltpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobGV4ZXIuaXNUZXJtaW5hbCh0b2NrZW4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2V0TGluZS50ZXJtaW5hbHMuaGFzKHRvY2tlbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZy5sb2codG9ja2VuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0NoYW5nZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRMaW5lLnRlcm1pbmFscy5hZGQodG9ja2VuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9ja2VuICE9PSBFbXB0eUNoYXJhY3Rlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0U2V0TGluZSA9IGZpcnN0U2V0TWFwLmdldCh0b2NrZW4pITtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFNldExpbmUudGVybWluYWxzLmZvckVhY2godGVybWluYWwgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlcm1pbmFsICE9PSBFbXB0eUNoYXJhY3Rlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2V0TGluZS50ZXJtaW5hbHMuaGFzKHRlcm1pbmFsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNDaGFuZ2UgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRMaW5lLnRlcm1pbmFscy5hZGQodGVybWluYWwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFuZXh0U2V0TGluZS50ZXJtaW5hbHMuaGFzKEVtcHR5Q2hhcmFjdGVyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IGRlcml2YXRpb24ubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRMaW5lLnRlcm1pbmFscy5hZGQoRW1wdHlDaGFyYWN0ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgaWYgKCFoYXNDaGFuZ2UpIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZpcnN0U2V0LmZpbHRlcih2ID0+ICF2LmlzVGVybWluYWwpLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICBpZiAoYS50b2NrZW4gPCBiLnRvY2tlbikge1xyXG4gICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgfVxyXG4gICAgfSkubWFwKHNldExpbmUgPT4ge1xyXG4gICAgICAgIHNldExpbmUudGVybWluYWxzID0gbmV3IFNldChBcnJheS5mcm9tKHNldExpbmUudGVybWluYWxzKS5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChhIDwgYikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KSlcclxuICAgICAgICByZXR1cm4gc2V0TGluZTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVyaXZhdGlvbkZpcnN0U2V0KGxleGVyOiBMZXhlciwgZGVyaXZhdGlvbjogc3RyaW5nW10sIGZpcnN0U2V0OiBHcmFtbWVyU2V0KTogR3JhbW1lclNldExpbmUge1xyXG4gICAgY29uc3QgZmlyc3RTZXRNYXA6IE1hcDxOb25UZXJtaW5hbCwgR3JhbW1lclNldExpbmU+ID0gbmV3IE1hcCgpO1xyXG4gICAgZmlyc3RTZXQuZm9yRWFjaChzZXRMaW5lID0+IHtcclxuICAgICAgICBmaXJzdFNldE1hcC5zZXQoc2V0TGluZS50b2NrZW4sc2V0TGluZSk7XHJcbiAgICB9KVxyXG4gICAgY29uc3QgdGVybWluYWxzID0gbmV3IFNldDxUZXJtaW5hbD4oKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVyaXZhdGlvbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IHRvY2tlbiA9IGRlcml2YXRpb25baV07XHJcbiAgICAgICAgaWYgKGxleGVyLmlzVGVybWluYWwodG9ja2VuKSkge1xyXG4gICAgICAgICAgICBpZiAodG9ja2VuICE9PSBFbXB0eUNoYXJhY3Rlcikge1xyXG4gICAgICAgICAgICAgICAgdGVybWluYWxzLmFkZCh0b2NrZW4pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmaXJzdFNldE1hcC5nZXQodG9ja2VuKT8udGVybWluYWxzLmZvckVhY2godGVybWluYWwgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGVybWluYWxzLmFkZCh0ZXJtaW5hbCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIGlmICghZmlyc3RTZXRNYXAuZ2V0KHRvY2tlbikhLnRlcm1pbmFscy5oYXMoRW1wdHlDaGFyYWN0ZXIpKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaSA9PT0gZGVyaXZhdGlvbi5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgIHRlcm1pbmFscy5hZGQoRW1wdHlDaGFyYWN0ZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdG9ja2VuOiBkZXJpdmF0aW9uLmpvaW4oXCJcIiksXHJcbiAgICAgICAgdGVybWluYWxzLFxyXG4gICAgfSBcclxufVxyXG5cclxuXHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldERlcml2YXRpb25GaXJzdFNldFdpdGhNYXAobGV4ZXI6IExleGVyLCBkZXJpdmF0aW9uOiBzdHJpbmdbXSwgZmlyc3RTZXRNYXA6IE1hcDxOb25UZXJtaW5hbCwgR3JhbW1lclNldExpbmU+KTogR3JhbW1lclNldExpbmUge1xyXG4gICAgY29uc3QgdGVybWluYWxzID0gbmV3IFNldDxUZXJtaW5hbD4oKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVyaXZhdGlvbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IHRvY2tlbiA9IGRlcml2YXRpb25baV07XHJcbiAgICAgICAgaWYgKGxleGVyLmlzVGVybWluYWwodG9ja2VuKSkge1xyXG4gICAgICAgICAgICBpZiAodG9ja2VuICE9PSBFbXB0eUNoYXJhY3Rlcikge1xyXG4gICAgICAgICAgICAgICAgdGVybWluYWxzLmFkZCh0b2NrZW4pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmaXJzdFNldE1hcC5nZXQodG9ja2VuKT8udGVybWluYWxzLmZvckVhY2godGVybWluYWwgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGVybWluYWxzLmFkZCh0ZXJtaW5hbCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIGlmICghZmlyc3RTZXRNYXAuZ2V0KHRvY2tlbikhLnRlcm1pbmFscy5oYXMoRW1wdHlDaGFyYWN0ZXIpKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaSA9PT0gZGVyaXZhdGlvbi5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgIHRlcm1pbmFscy5hZGQoRW1wdHlDaGFyYWN0ZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdG9ja2VuOiBkZXJpdmF0aW9uLmpvaW4oXCJcIiksXHJcbiAgICAgICAgdGVybWluYWxzLFxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24qIGdlbmVyYXRlRmlyc3RTZXRQcm9ncmVzc2l2ZShsZXhlcjogTGV4ZXIsIGluR3JhbW1lcnM6IEFycmF5PHN0cmluZz4pOiBJdGVyYWJsZUl0ZXJhdG9yPFJ1bGUgfCBQcm9jZXNzPEdyYW1tZXJTZXQ+PiB7XHJcbiAgICB5aWVsZCBbXHJcbiAgICAgICAgXCIxLiDlpoLmnpxY5byP5LiA5Liq57uI57uT56ym5Y+377yM6YKj5LmIRklSU1QoWCkgPSBYIFwiLFxyXG4gICAgICAgIFwiMi4g5aaC5p6cIFggLT4gzrUg5piv5LiA5Liq5Lqn55Sf5byP77yM6YKj5LmI5bCGZeWKoOS6uuWIsCBGSVJTVO+8iFgp5Lit44CCXCIsXHJcbiAgICAgICAgYDMuIEEgLT4gQjBCMUIyQjPvvIxpID0gMO+8jOW+queOr2lcclxuICAgICAgICAgICAgRklSU1QoQmkpIC0gzrUg5Yqg5YWl5YiwIEZJUlNUKEEp5LitXHJcbiAgICAgICAgICAgIOWmguaenEZJUlNUKEIxKc61XHJcbiAgICAgICAgICAgIOiLpUIwIC0gQjPlnYflkKvmnInOte+8jOWwhs615Yqg5YWl5YiwRklSU1QoQSnkuK1cclxuICAgICAgICBgLFxyXG4gICAgICAgIFwiNC4g5Y676Zmk5omA5pyJ57uI57uT56ym5Y+355qE6KGo6aG5XCIsXHJcbiAgICBdXHJcbiAgICBsb2cubG9nKFwiW2dlbmVyYXRlRmlyc3RTZXQgc3RhcnRdXCIpO1xyXG4gICAgY29uc3QgZ3JhbW1lcnMgPSB0cmFuc2ZlclN0cmluZzJHcmFtbWVycyhsZXhlciwgaW5HcmFtbWVycyk7XHJcbiAgICBsb2cubG9nKFwiW2dyYW1tZXJzIGFmdGVyIHRyYW5zZmVyU3RyaW5nMkdyYW1tZXJzXVwiLCBncmFtbWVycyk7XHJcbiAgICBjb25zdCBmaXJzdFNldDogR3JhbW1lclNldCA9IG5ldyBBcnJheSguLi5ncmFtbWVycy5tYXAoZ3JhbW1lciA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdG9ja2VuOiBncmFtbWVyLm5vblRlcm1pbmFsLFxyXG4gICAgICAgICAgICB0ZXJtaW5hbHM6IG5ldyBTZXQ8VGVybWluYWw+KCksXHJcbiAgICAgICAgfVxyXG4gICAgfSkpO1xyXG4gICAgY29uc3QgZ3JhbW1lck1hcCA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmdbXVtdPigpO1xyXG4gICAgZ3JhbW1lcnMuZm9yRWFjaChncmFtbWVyID0+IHtcclxuICAgICAgICBncmFtbWVyTWFwLnNldChncmFtbWVyLm5vblRlcm1pbmFsLCBncmFtbWVyLmRlcml2YXRpb25zKTtcclxuICAgIH0pXHJcbiAgICAvKiBcclxuICAgICAgICDlpoLmnpxY5byP5LiA5Liq57uI57uT56ym5Y+377yM6YKj5LmIRklSU1QoWCkgPSBYIFxyXG4gICAgKi9cclxuICAgIGZpcnN0U2V0LnB1c2goLi4ubGV4ZXIudGVybWluYWxzLm1hcCh0ZXJtaW5hbCA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdG9ja2VuOiB0ZXJtaW5hbFswXSxcclxuICAgICAgICAgICAgdGVybWluYWxzOiBuZXcgU2V0KFt0ZXJtaW5hbFswXV0pLFxyXG4gICAgICAgICAgICBpc1Rlcm1pbmFsOiB0cnVlXHJcbiAgICAgICAgfVxyXG4gICAgfSkpXHJcbiAgICB5aWVsZCB7XHJcbiAgICAgICAgcnVsZUluZGV4OiAwLFxyXG4gICAgICAgIHJlc3VsdDogZmlyc3RTZXRcclxuICAgIH07XHJcbiAgICAvKiBcclxuICAgICAgICDlpoLmnpwgWCA9PiDOtSDmmK/kuIDkuKrkuqfnlJ/lvI/vvIzpgqPkuYjlsIZl5Yqg5Lq65YiwIEZJUlNU77yIWCnkuK3jgIJcclxuICAgICovXHJcbiAgICBmaXJzdFNldC5mb3JFYWNoKHNldExpbmUgPT4ge1xyXG4gICAgICAgIGlmIChzZXRMaW5lLmlzVGVybWluYWwpIHJldHVybjtcclxuICAgICAgICBmb3IgKGxldCBkZXJpdmF0aW9uIG9mIGdyYW1tZXJNYXAuZ2V0KHNldExpbmUudG9ja2VuKSEpIHtcclxuICAgICAgICAgICAgaWYgKGRlcml2YXRpb24ubGVuZ3RoID09PSAxICYmIGRlcml2YXRpb25bMF0gPT09IEVtcHR5Q2hhcmFjdGVyICYmICFzZXRMaW5lLnRlcm1pbmFscy5oYXMoRW1wdHlDaGFyYWN0ZXIpKSB7XHJcbiAgICAgICAgICAgICAgICBzZXRMaW5lLnRlcm1pbmFscy5hZGQoRW1wdHlDaGFyYWN0ZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgIHlpZWxkIHtcclxuICAgICAgICBydWxlSW5kZXg6IDEsXHJcbiAgICAgICAgcmVzdWx0OiBmaXJzdFNldFxyXG4gICAgfTtcclxuICAgIGNvbnN0IGZpcnN0U2V0TWFwID0gbmV3IE1hcDxzdHJpbmcsIEdyYW1tZXJTZXRMaW5lPigpO1xyXG4gICAgZm9yIChsZXQgc2V0TGluZSBvZiBmaXJzdFNldCkge1xyXG4gICAgICAgIGZpcnN0U2V0TWFwLnNldChzZXRMaW5lLnRvY2tlbiwgc2V0TGluZSk7XHJcbiAgICB9XHJcbiAgICAvLyDlvqrnjq/kuIvpnaLmraXpqqQg55u05Yiw5rKh5pyJ5Y+Y5YyW5Li65q2iXHJcbiAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgIGxldCBoYXNDaGFuZ2UgPSBmYWxzZTtcclxuICAgICAgICAvKiBcclxuICAgICAgICAgICAgQSA9PiBCMEIxQjJCM1xyXG4gICAgICAgICAgICBpID0gMFxyXG4gICAgICAgICAgICBGSVJTVChCaSkgLSBFbXB0eUNoYXJhY3RlciDliqDlhaXliLAgRklSU1QoQSnkuK1cclxuICAgICAgICAgICAg5aaC5p6cRklSU1QoQjEp5LiN5ZCr5pyJRW1wdHlDaGFyYWN0ZXLpgIDlh7rlvqrnjq9cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIOiLpUIwLUIz5Z2H5ZCr5pyJRW1wdHlDaGFyYWN0ZXIg5bCGRW1wdHlDaGFyYWN0ZXLliqDlhaXliLBGSVJTVChBKeS4rVxyXG4gICAgICAgICovXHJcbiAgICAgICAgZmlyc3RTZXQuZm9yRWFjaChzZXRMaW5lID0+IHtcclxuICAgICAgICAgICAgaWYgKHNldExpbmUuaXNUZXJtaW5hbCkgcmV0dXJuO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBkZXJpdmF0aW9uIG9mIGdyYW1tZXJNYXAuZ2V0KHNldExpbmUudG9ja2VuKSEpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVyaXZhdGlvbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRvY2tlbiA9IGRlcml2YXRpb25baV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxleGVyLmlzVGVybWluYWwodG9ja2VuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNldExpbmUudGVybWluYWxzLmhhcyh0b2NrZW4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2cubG9nKHRvY2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNDaGFuZ2UgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0TGluZS50ZXJtaW5hbHMuYWRkKHRvY2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRvY2tlbiAhPT0gRW1wdHlDaGFyYWN0ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dFNldExpbmUgPSBmaXJzdFNldE1hcC5nZXQodG9ja2VuKSE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRTZXRMaW5lLnRlcm1pbmFscy5mb3JFYWNoKHRlcm1pbmFsID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXJtaW5hbCAhPT0gRW1wdHlDaGFyYWN0ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNldExpbmUudGVybWluYWxzLmhhcyh0ZXJtaW5hbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzQ2hhbmdlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0TGluZS50ZXJtaW5hbHMuYWRkKHRlcm1pbmFsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbmV4dFNldExpbmUudGVybWluYWxzLmhhcyhFbXB0eUNoYXJhY3RlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09PSBkZXJpdmF0aW9uLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0TGluZS50ZXJtaW5hbHMuYWRkKEVtcHR5Q2hhcmFjdGVyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIGlmICghaGFzQ2hhbmdlKSBicmVhaztcclxuICAgICAgICB5aWVsZCB7XHJcbiAgICAgICAgICAgIHJ1bGVJbmRleDogMixcclxuICAgICAgICAgICAgcmVzdWx0OiBmaXJzdFNldFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICB5aWVsZCB7XHJcbiAgICAgICAgcnVsZUluZGV4OiAzLFxyXG4gICAgICAgIHJlc3VsdDogZmlyc3RTZXQuZmlsdGVyKHYgPT4gIXYuaXNUZXJtaW5hbCkuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgICAgICBpZiAoYS50b2NrZW4gPCBiLnRvY2tlbikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KS5tYXAoc2V0TGluZSA9PiB7XHJcbiAgICAgICAgICAgIHNldExpbmUudGVybWluYWxzID0gbmV3IFNldChBcnJheS5mcm9tKHNldExpbmUudGVybWluYWxzKS5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYSA8IGIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KSlcclxuICAgICAgICAgICAgcmV0dXJuIHNldExpbmU7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufSIsImltcG9ydCBnZW5lcmF0ZUZpcnN0U2V0IGZyb20gXCIuL2ZpcnN0U2V0XCI7XHJcbmltcG9ydCBMZXhlciBmcm9tIFwiLi9sZXhlclwiO1xyXG5pbXBvcnQgeyBHcmFtbWVyU2V0LCBHcmFtbWVyU2V0TGluZSwgUHJvY2VzcywgUnVsZSwgVGVybWluYWwgfSBmcm9tIFwiLi90eXBlcy90eXBlXCI7XHJcbmltcG9ydCB7IHRyYW5zZmVyU3RyaW5nMkdyYW1tZXJzIH0gZnJvbSBcIi4vdXRpbHNcIjtcclxuaW1wb3J0IHsgRW1wdHlDaGFyYWN0ZXIsIEVuZGluZ0NoYXJhY3RlciB9IGZyb20gXCIuL3V0aWxzL2NvbnN0XCI7XHJcbmltcG9ydCBsb2cgZnJvbSBcIi4vdXRpbHMvbG9nXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2VuZXJhdGVGbGxvd1NldChsZXhlcjogTGV4ZXIsIGluR3JhbW1lcnM6IEFycmF5PHN0cmluZz4sIGZpcnN0U2V0PzogR3JhbW1lclNldCk6IEdyYW1tZXJTZXQge1xyXG4gICAgbG9nLmxvZyhcIltnZW5lcmF0ZUZsbG93U2V0IHN0YXJ0XVwiKTtcclxuICAgIGlmICghZmlyc3RTZXQpIHtcclxuICAgICAgICBmaXJzdFNldCA9IGdlbmVyYXRlRmlyc3RTZXQobGV4ZXIsIGluR3JhbW1lcnMpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBmaXJzdFNldCA9IEFycmF5LmZyb20oZmlyc3RTZXQpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZ3JhbW1lcnMgPSB0cmFuc2ZlclN0cmluZzJHcmFtbWVycyhsZXhlciwgaW5HcmFtbWVycyk7XHJcbiAgICBsb2cubG9nKFwiW2dyYW1tZXJzIGFmdGVyIHRyYW5zZmVyU3RyaW5nMkdyYW1tZXJzXVwiLCBncmFtbWVycyk7XHJcbiAgICAvKlxyXG4gICAgICAgIDEuIOWwhiTmlL7liLBGT0xMT1coUynkuK1cclxuICAgICovXHJcbiAgICBjb25zdCBmb2xsb3dTZXQ6IEdyYW1tZXJTZXQgPSBuZXcgQXJyYXkoLi4uZ3JhbW1lcnMubWFwKGdyYW1tZXIgPT4ge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHRvY2tlbjogZ3JhbW1lci5ub25UZXJtaW5hbCxcclxuICAgICAgICAgICAgdGVybWluYWxzOiBuZXcgU2V0PFRlcm1pbmFsPihbRW5kaW5nQ2hhcmFjdGVyXSksXHJcbiAgICAgICAgfVxyXG4gICAgfSkpO1xyXG4gICAgY29uc3QgZ3JhbW1lck1hcCA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmdbXVtdPigpO1xyXG4gICAgZ3JhbW1lcnMuZm9yRWFjaChncmFtbWVyID0+IHtcclxuICAgICAgICBncmFtbWVyTWFwLnNldChncmFtbWVyLm5vblRlcm1pbmFsLCBncmFtbWVyLmRlcml2YXRpb25zKTtcclxuICAgIH0pXHJcbiAgICBmb2xsb3dTZXQucHVzaCguLi5sZXhlci50ZXJtaW5hbHMubWFwKHRlcm1pbmFsID0+IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0b2NrZW46IHRlcm1pbmFsWzBdLFxyXG4gICAgICAgICAgICB0ZXJtaW5hbHM6IG5ldyBTZXQoW0VuZGluZ0NoYXJhY3Rlcl0pLFxyXG4gICAgICAgICAgICBpc1Rlcm1pbmFsOiB0cnVlXHJcbiAgICAgICAgfVxyXG4gICAgfSkpXHJcblxyXG4gICAgY29uc3QgZm9sbG93U2V0TWFwID0gbmV3IE1hcDxzdHJpbmcsIEdyYW1tZXJTZXRMaW5lPigpO1xyXG4gICAgZm9yIChsZXQgc2V0TGluZSBvZiBmb2xsb3dTZXQpIHtcclxuICAgICAgICBmb2xsb3dTZXRNYXAuc2V0KHNldExpbmUudG9ja2VuLCBzZXRMaW5lKTtcclxuICAgIH1cclxuXHJcbiAgICBmaXJzdFNldC5wdXNoKC4uLmxleGVyLnRlcm1pbmFscy5tYXAodGVybWluYWwgPT4ge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHRvY2tlbjogdGVybWluYWxbMF0sXHJcbiAgICAgICAgICAgIHRlcm1pbmFsczogbmV3IFNldChbdGVybWluYWxbMF1dKSxcclxuICAgICAgICAgICAgaXNUZXJtaW5hbDogdHJ1ZVxyXG4gICAgICAgIH1cclxuICAgIH0pKVxyXG4gICAgY29uc3QgZmlyc3RTZXRNYXAgPSBuZXcgTWFwPHN0cmluZywgR3JhbW1lclNldExpbmU+KCk7XHJcbiAgICBmb3IgKGxldCBzZXRMaW5lIG9mIGZpcnN0U2V0KSB7XHJcbiAgICAgICAgZmlyc3RTZXRNYXAuc2V0KHNldExpbmUudG9ja2VuLCBzZXRMaW5lKTtcclxuICAgIH1cclxuICAgIC8vIOW+queOr+S4i+mdouatpemqpCDnm7TliLDmsqHmnInlj5jljJbkuLrmraJcclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgbGV0IGhhc0NoYW5nZSA9IGZhbHNlO1xyXG4gICAgICAgIC8qIFxyXG4gICAgICAgICAgICAyLuWmguaenOWtmOWcqOS4gOS4quS6p+eUn+W8j0EgPT4gYUJiIO+8jCDpgqPkuYhGSVJTVChiKSDkuK3pmaTOtSDkuYvlpJbnmoTmiYDmnInnrKblj7fpg73lnKhGT0xMT1coQinkuK3jgIJcclxuICAgICAgICAgICAgYXR0ZW50aW9uOiBBID0+IGFCQ2Qg6YKj5LmI5oqKZmlyc3QoQ2Qp5Yqg5YWl5YiwRm9sbG93KEIp5Lit5Y67XHJcbiAgICAgICAgKi9cclxuICAgICAgICBncmFtbWVycy5mb3JFYWNoKGdyYW1tZXIgPT4ge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBkZXJpdmF0aW9uIG9mIGdyYW1tZXIuZGVyaXZhdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBkZXJpdmF0aW9uLmxlbmd0aCAtIDI7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2V0TGluZSA9IGZvbGxvd1NldE1hcC5nZXQoZGVyaXZhdGlvbltpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IGkgKyAxOyBqIDwgZGVyaXZhdGlvbi5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXJtaW5hbHMgPSBmaXJzdFNldE1hcC5nZXQoZGVyaXZhdGlvbltqXSkhLnRlcm1pbmFscztcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgdGVybWluYWwgb2YgdGVybWluYWxzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVybWluYWwgPT09IEVtcHR5Q2hhcmFjdGVyKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZXRMaW5lPy50ZXJtaW5hbHMuaGFzKHRlcm1pbmFsKSkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNDaGFuZ2UgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0TGluZT8udGVybWluYWxzLmFkZCh0ZXJtaW5hbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0ZXJtaW5hbHMuaGFzKEVtcHR5Q2hhcmFjdGVyKSkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgICAgIDMu5aaC5p6c5a2Y5Zyo5LiA5Liq5Lqn55Sf5byPIEEgPT4gYUIg77yMIOaIluWtmOWcqOS6p+eUn+W8jyBBID0+IGFCYiDkuJRGSVJTVChiKSDljIXlkKsgzrUg77yM6YKj5LmIRk9MTE9XKEEp5Lit55qE5omA5pyJ56ym5Y+36YO95ZyoRk9MTE9XKEIp5Lit44CCXHJcbiAgICAgICAgKi9cclxuICAgICAgICBncmFtbWVycy5mb3JFYWNoKGdyYW1tZXIgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBwU2V0TGluZSA9IGZvbGxvd1NldE1hcC5nZXQoZ3JhbW1lci5ub25UZXJtaW5hbCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGRlcml2YXRpb24gb2YgZ3JhbW1lci5kZXJpdmF0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IGRlcml2YXRpb24ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0b2NrZW4gPSBkZXJpdmF0aW9uW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNldExpbmUgPSBmb2xsb3dTZXRNYXAuZ2V0KHRvY2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgdGVybWluYWwgb2YgcFNldExpbmUhLnRlcm1pbmFscykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVybWluYWwgPT09IEVtcHR5Q2hhcmFjdGVyKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNldExpbmU/LnRlcm1pbmFscy5oYXModGVybWluYWwpKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzQ2hhbmdlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0TGluZT8udGVybWluYWxzLmFkZCh0ZXJtaW5hbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZmlyc3RTZXRNYXAuZ2V0KHRvY2tlbikhLnRlcm1pbmFscy5oYXMoRW1wdHlDaGFyYWN0ZXIpKSBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgaWYgKCFoYXNDaGFuZ2UpIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZvbGxvd1NldC5maWx0ZXIodiA9PiAhdi5pc1Rlcm1pbmFsKS5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgaWYgKGEudG9ja2VuIDwgYi50b2NrZW4pIHtcclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgIH1cclxuICAgIH0pLm1hcChzZXRMaW5lID0+IHtcclxuICAgICAgICBzZXRMaW5lLnRlcm1pbmFscyA9IG5ldyBTZXQoQXJyYXkuZnJvbShzZXRMaW5lLnRlcm1pbmFscykuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgICAgICBpZiAoYSA8IGIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkpXHJcbiAgICAgICAgcmV0dXJuIHNldExpbmU7XHJcbiAgICB9KTtcclxufVxyXG5cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24qIGdlbmVyYXRlRmxsb3dTZXRQcm9ncmVzc2l2ZShsZXhlcjogTGV4ZXIsIGluR3JhbW1lcnM6IEFycmF5PHN0cmluZz4sIGZpcnN0U2V0PzogR3JhbW1lclNldCk6IEl0ZXJhYmxlSXRlcmF0b3I8UnVsZSB8IFByb2Nlc3M8R3JhbW1lclNldD4+IHtcclxuICAgIHlpZWxkIFtcclxuICAgICAgICBcIjEuIOWwhiTmlL7liLBGT0xMT1coUynkuK1cIixcclxuICAgICAgICBcIjIuIOWmguaenOWtmOWcqOS4gOS4quS6p+eUn+W8j0EgLT4gYUJiIO+8jCDpgqPkuYhGSVJTVChiKSDkuK3pmaTOtSDkuYvlpJbnmoTmiYDmnInnrKblj7fpg73lnKhGT0xMT1coQinkuK3jgIJhdHRlbnRpb246IEEgLT4gYUJDZCDpgqPkuYjmiopmaXJzdChDZCnliqDlhaXliLBGb2xsb3coQinkuK3ljrtcIixcclxuICAgICAgICBcIjMu5aaC5p6c5a2Y5Zyo5LiA5Liq5Lqn55Sf5byPIEEgLT4gYUIg77yMIOaIluWtmOWcqOS6p+eUn+W8jyBBIC0+IGFCYiDkuJRGSVJTVChiKSDljIXlkKsgzrUg77yM6YKj5LmIRk9MTE9XKEEp5Lit55qE5omA5pyJ56ym5Y+36YO95ZyoRk9MTE9XKEIp5Lit44CCXCIsXHJcbiAgICAgICAgXCI0LiDljrvpmaTmiYDmnInnu4jnu5PnrKblj7fnmoTooajpoblcIixcclxuICAgIF1cclxuICAgIGxvZy5sb2coXCJbZ2VuZXJhdGVGbGxvd1NldCBzdGFydF1cIik7XHJcbiAgICBpZiAoIWZpcnN0U2V0KSB7XHJcbiAgICAgICAgZmlyc3RTZXQgPSBnZW5lcmF0ZUZpcnN0U2V0KGxleGVyLCBpbkdyYW1tZXJzKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZmlyc3RTZXQgPSBBcnJheS5mcm9tKGZpcnN0U2V0KTtcclxuICAgIH1cclxuICAgIGNvbnN0IGdyYW1tZXJzID0gdHJhbnNmZXJTdHJpbmcyR3JhbW1lcnMobGV4ZXIsIGluR3JhbW1lcnMpO1xyXG4gICAgbG9nLmxvZyhcIltncmFtbWVycyBhZnRlciB0cmFuc2ZlclN0cmluZzJHcmFtbWVyc11cIiwgZ3JhbW1lcnMpO1xyXG4gICAgLypcclxuICAgICAgICAxLiDlsIYk5pS+5YiwRk9MTE9XKFMp5LitXHJcbiAgICAqL1xyXG4gICAgY29uc3QgZm9sbG93U2V0OiBHcmFtbWVyU2V0ID0gbmV3IEFycmF5KC4uLmdyYW1tZXJzLm1hcChncmFtbWVyID0+IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0b2NrZW46IGdyYW1tZXIubm9uVGVybWluYWwsXHJcbiAgICAgICAgICAgIHRlcm1pbmFsczogbmV3IFNldDxUZXJtaW5hbD4oW0VuZGluZ0NoYXJhY3Rlcl0pLFxyXG4gICAgICAgIH1cclxuICAgIH0pKTtcclxuICAgIGNvbnN0IGdyYW1tZXJNYXAgPSBuZXcgTWFwPHN0cmluZywgc3RyaW5nW11bXT4oKTtcclxuICAgIGdyYW1tZXJzLmZvckVhY2goZ3JhbW1lciA9PiB7XHJcbiAgICAgICAgZ3JhbW1lck1hcC5zZXQoZ3JhbW1lci5ub25UZXJtaW5hbCwgZ3JhbW1lci5kZXJpdmF0aW9ucyk7XHJcbiAgICB9KVxyXG4gICAgZm9sbG93U2V0LnB1c2goLi4ubGV4ZXIudGVybWluYWxzLm1hcCh0ZXJtaW5hbCA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdG9ja2VuOiB0ZXJtaW5hbFswXSxcclxuICAgICAgICAgICAgdGVybWluYWxzOiBuZXcgU2V0KFtFbmRpbmdDaGFyYWN0ZXJdKSxcclxuICAgICAgICAgICAgaXNUZXJtaW5hbDogdHJ1ZVxyXG4gICAgICAgIH1cclxuICAgIH0pKVxyXG4gICAgeWllbGQge1xyXG4gICAgICAgIHJ1bGVJbmRleDogMCxcclxuICAgICAgICByZXN1bHQ6IGZvbGxvd1NldFxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGZvbGxvd1NldE1hcCA9IG5ldyBNYXA8c3RyaW5nLCBHcmFtbWVyU2V0TGluZT4oKTtcclxuICAgIGZvciAobGV0IHNldExpbmUgb2YgZm9sbG93U2V0KSB7XHJcbiAgICAgICAgZm9sbG93U2V0TWFwLnNldChzZXRMaW5lLnRvY2tlbiwgc2V0TGluZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZmlyc3RTZXQucHVzaCguLi5sZXhlci50ZXJtaW5hbHMubWFwKHRlcm1pbmFsID0+IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0b2NrZW46IHRlcm1pbmFsWzBdLFxyXG4gICAgICAgICAgICB0ZXJtaW5hbHM6IG5ldyBTZXQoW3Rlcm1pbmFsWzBdXSksXHJcbiAgICAgICAgICAgIGlzVGVybWluYWw6IHRydWVcclxuICAgICAgICB9XHJcbiAgICB9KSlcclxuICAgIGNvbnN0IGZpcnN0U2V0TWFwID0gbmV3IE1hcDxzdHJpbmcsIEdyYW1tZXJTZXRMaW5lPigpO1xyXG4gICAgZm9yIChsZXQgc2V0TGluZSBvZiBmaXJzdFNldCkge1xyXG4gICAgICAgIGZpcnN0U2V0TWFwLnNldChzZXRMaW5lLnRvY2tlbiwgc2V0TGluZSk7XHJcbiAgICB9XHJcbiAgICAvLyDlvqrnjq/kuIvpnaLmraXpqqQg55u05Yiw5rKh5pyJ5Y+Y5YyW5Li65q2iXHJcbiAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgIGxldCBoYXNDaGFuZ2UgPSBmYWxzZTtcclxuICAgICAgICAvKiBcclxuICAgICAgICAgICAgMi7lpoLmnpzlrZjlnKjkuIDkuKrkuqfnlJ/lvI9BID0+IGFCYiDvvIwg6YKj5LmIRklSU1QoYikg5Lit6ZmkzrUg5LmL5aSW55qE5omA5pyJ56ym5Y+36YO95ZyoRk9MTE9XKEIp5Lit44CCXHJcbiAgICAgICAgICAgIGF0dGVudGlvbjogQSA9PiBhQkNkIOmCo+S5iOaKimZpcnN0KENkKeWKoOWFpeWIsEZvbGxvdyhCKeS4reWOu1xyXG4gICAgICAgICovXHJcbiAgICAgICAgZ3JhbW1lcnMuZm9yRWFjaChncmFtbWVyID0+IHtcclxuICAgICAgICAgICAgZm9yIChsZXQgZGVyaXZhdGlvbiBvZiBncmFtbWVyLmRlcml2YXRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gZGVyaXZhdGlvbi5sZW5ndGggLSAyOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNldExpbmUgPSBmb2xsb3dTZXRNYXAuZ2V0KGRlcml2YXRpb25baV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSBpICsgMTsgaiA8IGRlcml2YXRpb24ubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVybWluYWxzID0gZmlyc3RTZXRNYXAuZ2V0KGRlcml2YXRpb25bal0pIS50ZXJtaW5hbHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHRlcm1pbmFsIG9mIHRlcm1pbmFscykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlcm1pbmFsID09PSBFbXB0eUNoYXJhY3RlcikgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2V0TGluZT8udGVybWluYWxzLmhhcyh0ZXJtaW5hbCkpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzQ2hhbmdlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldExpbmU/LnRlcm1pbmFscy5hZGQodGVybWluYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGVybWluYWxzLmhhcyhFbXB0eUNoYXJhY3RlcikpIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIGlmIChoYXNDaGFuZ2UpIHtcclxuICAgICAgICAgICAgeWllbGQge1xyXG4gICAgICAgICAgICAgICAgcnVsZUluZGV4OiAxLFxyXG4gICAgICAgICAgICAgICAgcmVzdWx0OiBmb2xsb3dTZXRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBoYXNDaGFuZ2UgPSBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgICAgIDMu5aaC5p6c5a2Y5Zyo5LiA5Liq5Lqn55Sf5byPIEEgPT4gYUIg77yMIOaIluWtmOWcqOS6p+eUn+W8jyBBID0+IGFCYiDkuJRGSVJTVChiKSDljIXlkKsgzrUg77yM6YKj5LmIRk9MTE9XKEEp5Lit55qE5omA5pyJ56ym5Y+36YO95ZyoRk9MTE9XKEIp5Lit44CCXHJcbiAgICAgICAgKi9cclxuICAgICAgICBncmFtbWVycy5mb3JFYWNoKGdyYW1tZXIgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBwU2V0TGluZSA9IGZvbGxvd1NldE1hcC5nZXQoZ3JhbW1lci5ub25UZXJtaW5hbCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGRlcml2YXRpb24gb2YgZ3JhbW1lci5kZXJpdmF0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IGRlcml2YXRpb24ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0b2NrZW4gPSBkZXJpdmF0aW9uW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNldExpbmUgPSBmb2xsb3dTZXRNYXAuZ2V0KHRvY2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgdGVybWluYWwgb2YgcFNldExpbmUhLnRlcm1pbmFscykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVybWluYWwgPT09IEVtcHR5Q2hhcmFjdGVyKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNldExpbmU/LnRlcm1pbmFscy5oYXModGVybWluYWwpKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzQ2hhbmdlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0TGluZT8udGVybWluYWxzLmFkZCh0ZXJtaW5hbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZmlyc3RTZXRNYXAuZ2V0KHRvY2tlbikhLnRlcm1pbmFscy5oYXMoRW1wdHlDaGFyYWN0ZXIpKSBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgaWYgKGhhc0NoYW5nZSkge1xyXG4gICAgICAgICAgICB5aWVsZCB7XHJcbiAgICAgICAgICAgICAgICBydWxlSW5kZXg6IDIsXHJcbiAgICAgICAgICAgICAgICByZXN1bHQ6IGZvbGxvd1NldFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghaGFzQ2hhbmdlKSBicmVhaztcclxuICAgIH1cclxuICAgIHlpZWxkIHtcclxuICAgICAgICBydWxlSW5kZXg6IDMsXHJcbiAgICAgICAgcmVzdWx0OiBmb2xsb3dTZXQuZmlsdGVyKHYgPT4gIXYuaXNUZXJtaW5hbCkuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgICAgICBpZiAoYS50b2NrZW4gPCBiLnRvY2tlbikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KS5tYXAoc2V0TGluZSA9PiB7XHJcbiAgICAgICAgICAgIHNldExpbmUudGVybWluYWxzID0gbmV3IFNldChBcnJheS5mcm9tKHNldExpbmUudGVybWluYWxzKS5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYSA8IGIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KSlcclxuICAgICAgICAgICAgcmV0dXJuIHNldExpbmU7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBOb25UZXJtaW5hbCwgVGVybWluYWwsIFRvY2tlbiB9IGZyb20gXCIuL3R5cGVzL3R5cGVcIjtcclxuaW1wb3J0IHsgc2FmZVJlZ0NoYXJhY3RlciB9IGZyb20gXCIuL3V0aWxzXCI7XHJcbmltcG9ydCB7IEVtcHR5Q2hhcmFjdGVyLCBFbmRpbmdDaGFyYWN0ZXIgfSBmcm9tIFwiLi91dGlscy9jb25zdFwiO1xyXG5pbXBvcnQgbG9nIGZyb20gXCIuL3V0aWxzL2xvZ1wiO1xyXG5cclxuXHJcbi8v6K+N5rOV5YiG5p6Q5Zmo5LiN5LuF5LuF5ZCR6K+t5rOV5YiG5p6Q5Zmo6L+U5Zue5LiA5Liq6K+N5rOV5Y2V5YWD5ZCN5a2X77yM6L+Y5Lya6L+U5Zue5LiA5Liq5o+P6L+w6K+l6K+N5rOV5Y2V5YWD55qE6K+N57Sg55qE5bGe5oCn5YC8XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExleGVyIHtcclxuICAgIHB1YmxpYyBub25UZXJtaW5hbHM6IEFycmF5PHN0cmluZz47XHJcbiAgICBwdWJsaWMgdGVybWluYWxzOiBBcnJheTxbc3RyaW5nLCBSZWdFeHBdPjtcclxuICAgIGN1cnJlbnRMaW5lOiBudW1iZXIgPSAwO1xyXG4gICAgY3VycmVudENvbHVtbjogbnVtYmVyID0gMDtcclxuICAgIHNvdXJjZTogc3RyaW5nID0gXCJcIjtcclxuICAgIGNvbnN0cnVjdG9yKHRlcm1pbmFsczogQXJyYXk8W3N0cmluZywgUmVnRXhwXT4sIG5vblRlcm1pbmFsczogQXJyYXk8c3RyaW5nPikge1xyXG4gICAgLy8g6L6T5YWl5omA5pyJ55qE57uI57uT56ym5Y+36ZuG5ZCIXHJcbiAgICAgICAgdGhpcy5ub25UZXJtaW5hbHMgPSBbLi4ubm9uVGVybWluYWxzXTtcclxuICAgICAgICB0aGlzLnRlcm1pbmFscyA9IFsuLi50ZXJtaW5hbHNdO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHNldFNvdXJjZShzb3VyY2U6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xyXG4gICAgICAgIHRoaXMuY3VycmVudExpbmUgPSAwO1xyXG4gICAgICAgIHRoaXMuY3VycmVudENvbHVtbiA9IDA7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0U291cmNlKCl7XHJcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5zb3VyY2UpXHJcbiAgICB9XHJcbiAgICBwdWJsaWMgcmVtYWluU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlLnNsaWNlKHRoaXMuY3VycmVudENvbHVtbik7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgbmV4dCgpOiBUb2NrZW4ge1xyXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRDb2x1bW4gPj0gdGhpcy5zb3VyY2UubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB0b2NrZW46IEVuZGluZ0NoYXJhY3RlcixcclxuICAgICAgICAgICAgICAgIG9yaWdpbjogRW5kaW5nQ2hhcmFjdGVyXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAobGV0IHRlcm1pbmFsIG9mIHRoaXMudGVybWluYWxzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoUmVzdWx0ID0gdGhpcy5zb3VyY2Uuc2xpY2UodGhpcy5jdXJyZW50Q29sdW1uKS5tYXRjaCh0ZXJtaW5hbFsxXSk7XHJcbiAgICAgICAgICAgIGlmIChtYXRjaFJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICB0b2NrZW46IHRlcm1pbmFsWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbjogbWF0Y2hSZXN1bHRbMF1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFvor43ms5XliIbmnpBdOiDljLnphY3kuIvkuIDkuKp0b2NrZW7lpLHotKUgIOa6kOi+k+WFpeWtl+espuS4sjogJHt0aGlzLnNvdXJjZX0g5Ymp5L2Z5a2X56ym5LiyOiAke3RoaXMuc291cmNlLnNsaWNlKHRoaXMuY3VycmVudENvbHVtbil9YCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgcG9wKCk6IFRvY2tlbiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgdG9ja2VuOiBUb2NrZW4gPSB0aGlzLm5leHQoKTtcclxuICAgICAgICAgICAgaWYgKHRvY2tlbi50b2NrZW4gIT09IEVuZGluZ0NoYXJhY3Rlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50Q29sdW1uICs9IHRvY2tlbi5vcmlnaW4ubGVuZ3RoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0b2NrZW47XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHB1YmxpYyBuZXh0Tm90RW1wdHlUZXJtaW5hbCgpOiBUb2NrZW4ge1xyXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRvY2tlbiA9IHRoaXMubmV4dCgpO1xyXG4gICAgICAgICAgICBpZiAodG9ja2VuLnRvY2tlbiAhPT0gXCJ3aGl0ZVNwYWNlXCIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0b2NrZW47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50Q29sdW1uICs9IHRvY2tlbi5vcmlnaW4ubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHB1YmxpYyBuZXh0Tm90RW1wdHkoc3RlcDogbnVtYmVyKTogVG9ja2VuIHtcclxuICAgICAgICBjb25zdCBiYWNrID0gdGhpcy5jdXJyZW50Q29sdW1uO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RlcCAtIDE7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLnBvcE5vdEVtcHR5VGVybWluYWwoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdG9ja2VuID0gdGhpcy5uZXh0Tm90RW1wdHlUZXJtaW5hbCgpO1xyXG4gICAgICAgIHRoaXMuY3VycmVudENvbHVtbiA9IGJhY2s7XHJcbiAgICAgICAgcmV0dXJuIHRvY2tlbjtcclxuICAgIH1cclxuICAgIHB1YmxpYyBwb3BOb3RFbXB0eVRlcm1pbmFsKCk6IFRvY2tlbiB7XHJcbiAgICAgICAgY29uc3QgdG9ja2VuID0gdGhpcy5uZXh0Tm90RW1wdHlUZXJtaW5hbCgpO1xyXG4gICAgICAgIGlmICh0b2NrZW4udG9ja2VuICE9PSBFbmRpbmdDaGFyYWN0ZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50Q29sdW1uICs9IHRvY2tlbi5vcmlnaW4ubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdG9ja2VuO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGlzVGVybWluYWwoc3RyOiBzdHJpbmcpOmJvb2xlYW4ge1xyXG4gICAgICAgIGxldCBpc1Rlcm1pbmFsID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLm5vblRlcm1pbmFscy5zb21lKHYgPT4ge1xyXG4gICAgICAgICAgICBpZiAodiA9PT0gc3RyKSB7XHJcbiAgICAgICAgICAgICAgICBpc1Rlcm1pbmFsID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSlcclxuICAgICAgICByZXR1cm4gaXNUZXJtaW5hbDtcclxuICAgIH1cclxuICAgIC8vIOWIh+WJsuaOqOWvvOW8j1xyXG4gICAgcHVibGljIHNwbGl0RGVyaXZhdGlvbihzdHI6IHN0cmluZyk6IEFycmF5PE5vblRlcm1pbmFsIHwgVGVybWluYWw+IHtcclxuICAgICAgICBjb25zdCB0ZXJtaW5hbHM6IHN0cmluZ1tdID0gW107XHJcbiAgICAgICAgbGV0IGNvdW50VGltZSA9IDA7XHJcbiAgICAgICAgY29uc3QgTUFYX0VYQ1VURSA9IDUwMDAwO1xyXG4gICAgICAgIGNvbnN0IGluU3RyID0gc3RyO1xyXG4gICAgICAgIHdoaWxlIChzdHIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IG5vblRlcm1pbmFsIG9mIHRoaXMubm9uVGVybWluYWxzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtYXRjaFJlc3VsdCA9IHN0ci5tYXRjaChuZXcgUmVnRXhwKFwiXlwiICsgbm9uVGVybWluYWwpKVxyXG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoUmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVybWluYWxzLnB1c2gobm9uVGVybWluYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0ciA9IHN0ci5zbGljZShtYXRjaFJlc3VsdFswXS5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAobGV0IHRlcm1pbmFsIG9mIHRoaXMudGVybWluYWxzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtYXRjaFJlc3VsdCA9IHN0ci5tYXRjaChuZXcgUmVnRXhwKFwiXlwiICsgc2FmZVJlZ0NoYXJhY3Rlcih0ZXJtaW5hbFswXSkpKVxyXG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoUmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVybWluYWxzLnB1c2godGVybWluYWxbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0ciA9IHN0ci5zbGljZShtYXRjaFJlc3VsdFswXS5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvdW50VGltZSsrO1xyXG4gICAgICAgICAgICBpZiAoY291bnRUaW1lID4gTUFYX0VYQ1VURSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBbc3BsaXREZXJpdmF0aW9uXSBlcnJvcjogZXhjdXRlIG92ZXIgTUFYX0VYQ1VURSBzdHI6ICR7aW5TdHJ9ICByZW1haW5pbmcgc3RyOiAke3N0cn0gYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRlcm1pbmFscztcclxuICAgIH1cclxuICAgIC8qXHJcbiAgICDnlJ/miJDmj5Dlhazlm6DlrZAg5Lul5Y+KIOa2iOmZpOW3pumAkuW9kuS9v+eUqOeahOmdnue7iOe7k+esplxyXG4gICovXHJcbiAgICBwdWJsaWMgZ2V0TmV3Tm9uVGVybWluYWwobm9uVGVybWluYWw6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IHRtcCA9IG5vblRlcm1pbmFsO1xyXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgIHRtcCArPSBcIidcIjtcclxuICAgICAgICAgICAgaWYgKHRoaXMubm9uVGVybWluYWxzLmluZGV4T2YodG1wKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubm9uVGVybWluYWxzLnVuc2hpZnQodG1wKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0bXA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBnZXREZXJpdmF0aW9uRmlyc3RTZXRXaXRoTWFwIH0gZnJvbSBcIkAvZmlyc3RTZXRcIjtcclxuaW1wb3J0IExleGVyIGZyb20gXCJAL2xleGVyXCI7XHJcbmltcG9ydCB7IEFzdE5vZGUsIEdyYW1tZXIsIEdyYW1tZXJTZXQsIEdyYW1tZXJTZXRMaW5lLCBOb25UZXJtaW5hbCwgUHJlZGljdExpbmUsIFByZWRpY3RQcm9jZXNzTGluZSwgUHJlZGljdFRhYmxlLCBQcm9jZXNzLCBSdWxlLCBUZXJtaW5hbCB9IGZyb20gXCJAL3R5cGVzL3R5cGVcIjtcclxuaW1wb3J0IHsgdHJhbnNmZXJTdHJpbmcyR3JhbW1lcnMgfSBmcm9tIFwiQC91dGlsc1wiO1xyXG5pbXBvcnQgeyBFbXB0eUNoYXJhY3RlciwgRW5kaW5nQ2hhcmFjdGVyIH0gZnJvbSBcIkAvdXRpbHMvY29uc3RcIjtcclxuaW1wb3J0IGxvZyBmcm9tIFwiQC91dGlscy9sb2dcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdlbmVyYXRvclByZWRpY3RUYWJsZShcclxuICAgIGxleGVyOiBMZXhlcixcclxuICAgIGluR3JhbW1lcnM6IEFycmF5PHN0cmluZz4sXHJcbiAgICBmaXJzdFNldDogR3JhbW1lclNldCxcclxuICAgIGZvbGxvd1NldDogR3JhbW1lclNldCxcclxuKTogUHJlZGljdFRhYmxlIHtcclxuICAgIC8qXHJcbiAgICDlr7nor63ms5XkuK3nmoTmr4/mnaHkuqfnlJ/lvI/vvJogQSAtPiB1IO+8mlxyXG4gICAgICAoMSnlr7kgRmlyc3QodSkg5Lit55qE5omA5pyJ57uI57uT56ymIGEg77yI5LiN5ZCrIM61IO+8ie+8jOe9riBNW0EsIGFdID0g4oCcQSAtPiB14oCdIO+8m1xyXG4gICAgICAoMinoi6UgRmlyc3QodSkg5ZCrIM61IO+8jOWImeWvuSBGb2xsb3coQSkg5Lit55qE5omA5pyJ56ym5Y+3IGEg77yI5Y+v5ZCrICQg77yJ77yM572uIE1bQSwgYV0gPSDigJxBIC0+IHXigJ0gXHJcbiAgKi9cclxuICAgIGNvbnN0IGdyYW1tZXJzID0gdHJhbnNmZXJTdHJpbmcyR3JhbW1lcnMobGV4ZXIsIGluR3JhbW1lcnMpO1xyXG4gICAgY29uc3QgcHJlZGljdFRhYmxlOiBQcmVkaWN0VGFibGUgPSBbXTtcclxuICAgIGNvbnN0IG5vblRlcm1pbmFsMlRhYmxlUm93TWFwID0gbmV3IE1hcDxOb25UZXJtaW5hbCwgUHJlZGljdExpbmU+KCk7XHJcbiAgICBsZXhlci5ub25UZXJtaW5hbHMuZm9yRWFjaChub25UZXJtaW5hbCA9PiB7XHJcbiAgICAgICAgY29uc3QgdGFibGVMaW5lID0ge1xyXG4gICAgICAgICAgICBub25UZXJtaW5hbDogbm9uVGVybWluYWwsXHJcbiAgICAgICAgICAgIHRlcm1pbmFsMkRlcml2YXRpb246IG5ldyBNYXA8VGVybWluYWwsIEdyYW1tZXI+KCksXHJcbiAgICAgICAgfTtcclxuICAgICAgICBub25UZXJtaW5hbDJUYWJsZVJvd01hcC5zZXQobm9uVGVybWluYWwsIHRhYmxlTGluZSk7XHJcbiAgICAgICAgcHJlZGljdFRhYmxlLnB1c2godGFibGVMaW5lKTtcclxuICAgIH0pXHJcbiAgICBjb25zdCBub25UZXJtaW5hbDJGaXJzdFNldE1hcCA9IG5ldyBNYXA8Tm9uVGVybWluYWwsIEdyYW1tZXJTZXRMaW5lPigpO1xyXG4gICAgY29uc3Qgbm9uVGVybWluYWwyRm9sbG93U2V0TGluZSA9IG5ldyBNYXA8Tm9uVGVybWluYWwsIEdyYW1tZXJTZXRMaW5lPigpO1xyXG4gICAgZm9yIChsZXQgc2V0TGluZSBvZiBmb2xsb3dTZXQpIHtcclxuICAgICAgICBub25UZXJtaW5hbDJGb2xsb3dTZXRMaW5lLnNldChzZXRMaW5lLnRvY2tlbiwgc2V0TGluZSk7XHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBzZXRMaW5lIG9mIGZpcnN0U2V0KSB7XHJcbiAgICAgICAgbm9uVGVybWluYWwyRmlyc3RTZXRNYXAuc2V0KHNldExpbmUudG9ja2VuLCBzZXRMaW5lKTtcclxuICAgIH1cclxuICAgIGdyYW1tZXJzLmZvckVhY2goZ3JhbW1lciA9PiB7XHJcbiAgICAgICAgZm9yIChsZXQgZGVyaXZhdGlvbiBvZiBncmFtbWVyLmRlcml2YXRpb25zKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlcml2YXRpb25GaXJzdFNldCA9IGdldERlcml2YXRpb25GaXJzdFNldFdpdGhNYXAobGV4ZXIsIGRlcml2YXRpb24sIG5vblRlcm1pbmFsMkZpcnN0U2V0TWFwKTtcclxuICAgICAgICAgICAgY29uc3QgdGFibGVMaW5lID0gbm9uVGVybWluYWwyVGFibGVSb3dNYXAuZ2V0KGdyYW1tZXIubm9uVGVybWluYWwpO1xyXG4gICAgICAgICAgICBsb2cubG9nKGRlcml2YXRpb25GaXJzdFNldCk7XHJcbiAgICAgICAgICAgIC8vICgxKeWvuSBGaXJzdCh1KSDkuK3nmoTmiYDmnInnu4jnu5PnrKYgYSDvvIjkuI3lkKsgzrUg77yJ77yM572uIE1bQSwgYV0gPSDigJxBIC0+IHXigJ0g77ybXHJcbiAgICAgICAgICAgIGxldCBoYXNTZXQ6IE1hcDxzdHJpbmcsYm9vbGVhbj4gPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHRlcm1pbmFsIG9mIGRlcml2YXRpb25GaXJzdFNldC50ZXJtaW5hbHMpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0ZXJtaW5hbCA9PT0gRW1wdHlDaGFyYWN0ZXIpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgbGV0IGNlbGxHcmFtbWVyOiBHcmFtbWVyIHwgdW5kZWZpbmVkID0gdGFibGVMaW5lPy50ZXJtaW5hbDJEZXJpdmF0aW9uLmdldCh0ZXJtaW5hbCk7XHJcbiAgICAgICAgICAgICAgICBoYXNTZXQuc2V0KHRlcm1pbmFsLHRydWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFjZWxsR3JhbW1lcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxHcmFtbWVyID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBub25UZXJtaW5hbDogZ3JhbW1lci5ub25UZXJtaW5hbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVyaXZhdGlvbnM6IFtdXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZUxpbmU/LnRlcm1pbmFsMkRlcml2YXRpb24uc2V0KHRlcm1pbmFsLCBjZWxsR3JhbW1lcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjZWxsR3JhbW1lci5kZXJpdmF0aW9ucy5wdXNoKGRlcml2YXRpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vICgyKeiLpSBGaXJzdCh1KSDlkKsgzrUg77yM5YiZ5a+5IEZvbGxvdyhBKSDkuK3nmoTmiYDmnInnrKblj7cgYSDvvIjlj6/lkKsgJCDvvInvvIznva4gTVtBLCBhXSA9IOKAnEEgLT4gdeKAnSBcclxuICAgICAgICAgICAgaWYgKGRlcml2YXRpb25GaXJzdFNldC50ZXJtaW5hbHMuaGFzKEVtcHR5Q2hhcmFjdGVyKSkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgdGVybWluYWwgb2Ygbm9uVGVybWluYWwyRm9sbG93U2V0TGluZS5nZXQoZ3JhbW1lci5ub25UZXJtaW5hbCkhLnRlcm1pbmFscykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGhhc1NldC5oYXModGVybWluYWwpKWNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjZWxsR3JhbW1lcjogR3JhbW1lciB8IHVuZGVmaW5lZCA9IHRhYmxlTGluZT8udGVybWluYWwyRGVyaXZhdGlvbi5nZXQodGVybWluYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghY2VsbEdyYW1tZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbEdyYW1tZXIgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub25UZXJtaW5hbDogZ3JhbW1lci5ub25UZXJtaW5hbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcml2YXRpb25zOiBbXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZUxpbmU/LnRlcm1pbmFsMkRlcml2YXRpb24uc2V0KHRlcm1pbmFsLCBjZWxsR3JhbW1lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxHcmFtbWVyLmRlcml2YXRpb25zLnB1c2goZGVyaXZhdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4gICAgcmV0dXJuIHByZWRpY3RUYWJsZTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjaGVja1ByZWRpY2tUYWJsZUlzVmFsaWQobGV4ZXI6IExleGVyLCB0YWJsZTogUHJlZGljdFRhYmxlKTogYm9vbGVhbiB7XHJcbiAgICAvLyDmr4/kuIBDZWxs5pyA5aSa5Y+q6IO95pyJ5LiA5Liq5o6o5a+85byPIFxyXG4gICAgZm9yIChsZXQgdGVybWluYWwgb2YgbGV4ZXIudGVybWluYWxzKSB7XHJcbiAgICAgICAgY29uc3QgdG9ja2VuID0gdGVybWluYWxbMF07XHJcbiAgICAgICAgdGFibGUuZm9yRWFjaCh0YWJsZUxpbmUgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB0MmQgPSB0YWJsZUxpbmUudGVybWluYWwyRGVyaXZhdGlvbi5nZXQodG9ja2VuKTtcclxuICAgICAgICAgICAgaWYgKHQyZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHQyZC5kZXJpdmF0aW9ucy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcHJlZGljdChsZXhlcjogTGV4ZXIsIHRhYmxlOiBQcmVkaWN0VGFibGUsIF9pbnB1dDogc3RyaW5nLCBwYXJzZVN0YXJ0Tm9uVGVybWluYWw6IE5vblRlcm1pbmFsKTogQXJyYXk8UHJlZGljdFByb2Nlc3NMaW5lPiB7XHJcbiAgICBsZXQgaW5wdXQgPSBfaW5wdXQucmVwbGFjZUFsbCgvXFxzL2csIFwiXCIpO1xyXG4gICAgY29uc3QgcHJlZGljdFByb2Nlc3M6IEFycmF5PFByZWRpY3RQcm9jZXNzTGluZT4gPSBbXTtcclxuICAgIGxldCBhc3RJZHggPSAxO1xyXG4gICAgY29uc3QgYXN0Tm9kZTogQXN0Tm9kZSA9IHtcclxuICAgICAgICBpZDogMCxcclxuICAgICAgICB0ZXh0OiBwYXJzZVN0YXJ0Tm9uVGVybWluYWwsXHJcbiAgICAgICAgY2hlY2s6IGZhbHNlLFxyXG4gICAgfTtcclxuICAgIGNvbnN0IGFzdFN0YWNrID0gW2FzdE5vZGVdO1xyXG4gICAgbGV0IGN1cnJlbnRTdGF0ZTogUHJlZGljdFByb2Nlc3NMaW5lID0ge1xyXG4gICAgICAgIHBhcnNlU3RhY2s6IFtFbmRpbmdDaGFyYWN0ZXIsIHBhcnNlU3RhcnROb25UZXJtaW5hbF0sXHJcbiAgICAgICAgcmVtYWluaW5nSW5wdXQ6IF9pbnB1dCxcclxuICAgICAgICBwYXJzZUFjdGlvbjogXCJcIixcclxuICAgIH1cclxuICAgIGxleGVyLnNldFNvdXJjZShpbnB1dCk7XHJcbiAgICBjb25zdCBub25UZXJtaW5hbDJUYWJsZVJvd01hcCA9IG5ldyBNYXA8Tm9uVGVybWluYWwsIFByZWRpY3RMaW5lPigpO1xyXG4gICAgdGFibGUuZm9yRWFjaCh0YWJsZUxpbmUgPT4ge1xyXG4gICAgICAgIG5vblRlcm1pbmFsMlRhYmxlUm93TWFwLnNldCh0YWJsZUxpbmUubm9uVGVybWluYWwsIHRhYmxlTGluZSk7XHJcbiAgICB9KVxyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICAvLyDlj5blh7rmoIjpobblhYPntKBcclxuICAgICAgICAgICAgY29uc3QgdG9ja2VuID0gY3VycmVudFN0YXRlLnBhcnNlU3RhY2tbY3VycmVudFN0YXRlLnBhcnNlU3RhY2subGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgIGlmIChsZXhlci5pc1Rlcm1pbmFsKHRvY2tlbikpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRlcm1pbmFsID0gbGV4ZXIubmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRvY2tlbiA9PT0gdGVybWluYWwudG9ja2VuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbWF0Y2ggc3VjY2Vzc1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTdGF0ZS5wYXJzZUFjdGlvbiA9IGBtYXRjaCAke3Rlcm1pbmFsLnRvY2tlbn0ke3Rlcm1pbmFsLnRvY2tlbj09PXRlcm1pbmFsLm9yaWdpbj9cIlwiOlwiOiBcIit0ZXJtaW5hbC5vcmlnaW59YFxyXG4gICAgICAgICAgICAgICAgICAgIHByZWRpY3RQcm9jZXNzLnB1c2goY3VycmVudFN0YXRlKTtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U3RhdGUgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGN1cnJlbnRTdGF0ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxleGVyLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTdGF0ZS5wYXJzZUFjdGlvbiA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFN0YXRlLnJlbWFpbmluZ0lucHV0ID0gbGV4ZXIucmVtYWluU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFN0YXRlLnBhcnNlU3RhY2sucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRTdGF0ZS5wYXJzZVN0YWNrLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXN0Tm9kZSA9IGFzdFN0YWNrLnBvcCgpITtcclxuICAgICAgICAgICAgICAgICAgICBpZighYXN0Tm9kZS5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhc3ROb2RlLmNoaWxkcmVuID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGFzdE5vZGUuY2hpbGRyZW4ucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBhc3RJZHgrKyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogdGVybWluYWwub3JpZ2luLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVjazogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBb6aKE5rWL6ZSZ6K+vXSDpnZ7nu4jnu5PnrKbljLnphY3plJnor686ICR7dG9ja2VufSBzdGFjazogJHtjdXJyZW50U3RhdGUucGFyc2VTdGFja30g5Ymp5L2Z5a2X56ym5LiyOiAke2xleGVyLnJlbWFpblN0cmluZygpfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRocm93IG5ldyBFcnJvcihgW3ByZWRpY3QgZXJyb3JdIHRlcm1pbmFsIG1hdGNoIGVycm9yIHRvY2tlbjogJHt0b2NrZW59IHN0YWNrOiAke2N1cnJlbnRTdGF0ZS5wYXJzZVN0YWNrfSByZW1haW5pbmdJbnB1dDogJHtsZXhlci5yZW1haW5TdHJpbmcoKX1gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnN0IHRlcm1pbmFsID0gbGV4ZXIubmV4dCgpO1xyXG4gICAgICAgICAgICBjb25zdCB0YWJsZUxpbmU6IFByZWRpY3RMaW5lID0gbm9uVGVybWluYWwyVGFibGVSb3dNYXAuZ2V0KHRvY2tlbikhO1xyXG4gICAgICAgICAgICBjb25zdCBncmFtbWVyOiBHcmFtbWVyID0gdGFibGVMaW5lIS50ZXJtaW5hbDJEZXJpdmF0aW9uLmdldCh0ZXJtaW5hbC50b2NrZW4pO1xyXG4gICAgICAgICAgICBpZiAoZ3JhbW1lcj8uZGVyaXZhdGlvbnM/Lmxlbmd0aCAhPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBb6aKE5rWL6ZSZ6K+vXSDliIbmnpDovpPlhaXplJnor68gIOe7iOe7k+espjogJHt0ZXJtaW5hbH0gICDliankvZnlrZfnrKbkuLI6ICR7bGV4ZXIucmVtYWluU3RyaW5nKCl9IOaWh+azlTogJHtncmFtbWVyfSBgKTtcclxuICAgICAgICAgICAgICAgIC8vIHRocm93IG5ldyBFcnJvcihgW3ByZWRpY3QgZXJyb3JdIHBhcnNlIGlucHV0IGZhaWwgXFxuIHRlcm1pbmFsOiAke3Rlcm1pbmFsfSBcXG4gIHJlbWFpbmluZ0lucHV0OiAke2xleGVyLnJlbWFpblN0cmluZygpfSBcXG4gZ3JhbW1lcjogJHtncmFtbWVyfSBgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjdXJyZW50U3RhdGUucGFyc2VBY3Rpb24gPSBgUHJlZGljdCAke2dyYW1tZXIubm9uVGVybWluYWx9IC0+ICR7Z3JhbW1lci5kZXJpdmF0aW9uc1swXS5qb2luKFwiIFwiKX1gO1xyXG4gICAgICAgICAgICBsb2cubG9nKFwiW3ByZWRpY3QgU3RhdGVdXCIsIGN1cnJlbnRTdGF0ZSk7XHJcbiAgICAgICAgICAgIHByZWRpY3RQcm9jZXNzLnB1c2goY3VycmVudFN0YXRlKTtcclxuICAgICAgICAgICAgY3VycmVudFN0YXRlID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShjdXJyZW50U3RhdGUpKTtcclxuICAgICAgICAgICAgY3VycmVudFN0YXRlLnBhcnNlU3RhY2sucG9wKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGFzdE5vZGUgPSBhc3RTdGFjay5wb3AoKSE7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlcml2YXRpb24gPSBncmFtbWVyLmRlcml2YXRpb25zWzBdLmZpbHRlcihjaGFyID0+IGNoYXIgIT09IEVtcHR5Q2hhcmFjdGVyKTtcclxuICAgICAgICAgICAgaWYoIWFzdE5vZGUuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgIGFzdE5vZGUuY2hpbGRyZW4gPSBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IobGV0IHRvY2tlbiBvZiBkZXJpdmF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBhc3ROb2RlLmNoaWxkcmVuLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBhc3RJZHgrKyxcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiB0b2NrZW4sXHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2s6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhc3RTdGFjay5wdXNoKC4uLlsuLi5hc3ROb2RlLmNoaWxkcmVuXS5yZXZlcnNlKCkpO1xyXG4gICAgICAgICAgICBjdXJyZW50U3RhdGUucGFyc2VTdGFjay5wdXNoKC4uLmRlcml2YXRpb24ucmV2ZXJzZSgpKTtcclxuICAgICAgICAgICAgY3VycmVudFN0YXRlLnBhcnNlQWN0aW9uID0gXCJcIjtcclxuICAgICAgICAgICAgY3VycmVudFN0YXRlLnJlbWFpbmluZ0lucHV0ID0gbGV4ZXIucmVtYWluU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSBjYXRjaChlOiBhbnkpIHtcclxuICAgICAgICBjdXJyZW50U3RhdGUucGFyc2VBY3Rpb24gPSBlLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgcHJlZGljdFByb2Nlc3MucHVzaChjdXJyZW50U3RhdGUpO1xyXG4gICAgfVxyXG4gICAgKHByZWRpY3RQcm9jZXNzIGFzIGFueSkuYXN0Tm9kZSA9IGFzdE5vZGVcclxuICAgIHJldHVybiBwcmVkaWN0UHJvY2VzcztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uKiBwcmVkaWN0UHJvZ3Jlc3NpdmUobGV4ZXI6IExleGVyLCB0YWJsZTogUHJlZGljdFRhYmxlLCBfaW5wdXQ6IHN0cmluZywgcGFyc2VTdGFydE5vblRlcm1pbmFsOiBOb25UZXJtaW5hbCk6IEl0ZXJhYmxlSXRlcmF0b3I8QXJyYXk8UHJlZGljdFByb2Nlc3NMaW5lPj4ge1xyXG4gICAgbGV0IGlucHV0ID0gX2lucHV0LnJlcGxhY2VBbGwoL1xccy9nLCBcIlwiKTtcclxuICAgIGNvbnN0IHByZWRpY3RQcm9jZXNzOiBBcnJheTxQcmVkaWN0UHJvY2Vzc0xpbmU+ID0gW107XHJcbiAgICBsZXQgYXN0SWR4ID0gMTtcclxuICAgIGNvbnN0IGFzdE5vZGU6IEFzdE5vZGUgPSB7XHJcbiAgICAgICAgaWQ6IDAsXHJcbiAgICAgICAgdGV4dDogcGFyc2VTdGFydE5vblRlcm1pbmFsLFxyXG4gICAgICAgIGNoZWNrOiBmYWxzZSxcclxuICAgIH07XHJcbiAgICAocHJlZGljdFByb2Nlc3MgYXMgYW55KS5hc3ROb2RlID0gYXN0Tm9kZVxyXG4gICAgY29uc3QgYXN0U3RhY2sgPSBbYXN0Tm9kZV07XHJcbiAgICBsZXQgY3VycmVudFN0YXRlOiBQcmVkaWN0UHJvY2Vzc0xpbmUgPSB7XHJcbiAgICAgICAgcGFyc2VTdGFjazogW0VuZGluZ0NoYXJhY3RlciwgcGFyc2VTdGFydE5vblRlcm1pbmFsXSxcclxuICAgICAgICByZW1haW5pbmdJbnB1dDogX2lucHV0LFxyXG4gICAgICAgIHBhcnNlQWN0aW9uOiBcIlwiLFxyXG4gICAgfVxyXG4gICAgbGV4ZXIuc2V0U291cmNlKGlucHV0KTtcclxuICAgIGNvbnN0IG5vblRlcm1pbmFsMlRhYmxlUm93TWFwID0gbmV3IE1hcDxOb25UZXJtaW5hbCwgUHJlZGljdExpbmU+KCk7XHJcbiAgICB0YWJsZS5mb3JFYWNoKHRhYmxlTGluZSA9PiB7XHJcbiAgICAgICAgbm9uVGVybWluYWwyVGFibGVSb3dNYXAuc2V0KHRhYmxlTGluZS5ub25UZXJtaW5hbCwgdGFibGVMaW5lKTtcclxuICAgIH0pXHJcbiAgICB5aWVsZCBwcmVkaWN0UHJvY2VzcztcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICAgICAgLy8g5Y+W5Ye65qCI6aG25YWD57SgXHJcbiAgICAgICAgICAgIGNvbnN0IHRvY2tlbiA9IGN1cnJlbnRTdGF0ZS5wYXJzZVN0YWNrW2N1cnJlbnRTdGF0ZS5wYXJzZVN0YWNrLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICBpZiAobGV4ZXIuaXNUZXJtaW5hbCh0b2NrZW4pKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZXJtaW5hbCA9IGxleGVyLm5leHQoKTtcclxuICAgICAgICAgICAgICAgIGlmICh0b2NrZW4gPT09IHRlcm1pbmFsLnRvY2tlbikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG1hdGNoIHN1Y2Nlc3NcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U3RhdGUucGFyc2VBY3Rpb24gPSBgbWF0Y2ggJHt0ZXJtaW5hbC50b2NrZW59JHt0ZXJtaW5hbC50b2NrZW49PT10ZXJtaW5hbC5vcmlnaW4/XCJcIjpcIjogXCIrdGVybWluYWwub3JpZ2lufWBcclxuICAgICAgICAgICAgICAgICAgICBwcmVkaWN0UHJvY2Vzcy5wdXNoKGN1cnJlbnRTdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFN0YXRlID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShjdXJyZW50U3RhdGUpKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXhlci5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U3RhdGUucGFyc2VBY3Rpb24gPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTdGF0ZS5yZW1haW5pbmdJbnB1dCA9IGxleGVyLnJlbWFpblN0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTdGF0ZS5wYXJzZVN0YWNrLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50U3RhdGUucGFyc2VTdGFjay5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFzdE5vZGUgPSBhc3RTdGFjay5wb3AoKSE7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIWFzdE5vZGUuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXN0Tm9kZS5jaGlsZHJlbiA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBhc3ROb2RlLmNoaWxkcmVuLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogYXN0SWR4KyssXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHRlcm1pbmFsLm9yaWdpbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2s6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgW+mihOa1i+mUmeivr10g6Z2e57uI57uT56ym5Yy56YWN6ZSZ6K+vOiAke3RvY2tlbn0gc3RhY2s6ICR7Y3VycmVudFN0YXRlLnBhcnNlU3RhY2t9IOWJqeS9meWtl+espuS4sjogJHtsZXhlci5yZW1haW5TdHJpbmcoKX1gKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyB0aHJvdyBuZXcgRXJyb3IoYFtwcmVkaWN0IGVycm9yXSB0ZXJtaW5hbCBtYXRjaCBlcnJvciB0b2NrZW46ICR7dG9ja2VufSBzdGFjazogJHtjdXJyZW50U3RhdGUucGFyc2VTdGFja30gcmVtYWluaW5nSW5wdXQ6ICR7bGV4ZXIucmVtYWluU3RyaW5nKCl9YCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB5aWVsZCBwcmVkaWN0UHJvY2VzcztcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnN0IHRlcm1pbmFsID0gbGV4ZXIubmV4dCgpO1xyXG4gICAgICAgICAgICBjb25zdCB0YWJsZUxpbmU6IFByZWRpY3RMaW5lID0gbm9uVGVybWluYWwyVGFibGVSb3dNYXAuZ2V0KHRvY2tlbikhO1xyXG4gICAgICAgICAgICBjb25zdCBncmFtbWVyOiBHcmFtbWVyID0gdGFibGVMaW5lIS50ZXJtaW5hbDJEZXJpdmF0aW9uLmdldCh0ZXJtaW5hbC50b2NrZW4pO1xyXG4gICAgICAgICAgICBpZiAoZ3JhbW1lcj8uZGVyaXZhdGlvbnM/Lmxlbmd0aCAhPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBb6aKE5rWL6ZSZ6K+vXSDliIbmnpDovpPlhaXplJnor68gIOe7iOe7k+espjogJHt0ZXJtaW5hbH0gICDliankvZnlrZfnrKbkuLI6ICR7bGV4ZXIucmVtYWluU3RyaW5nKCl9IOaWh+azlTogJHtncmFtbWVyfSBgKTtcclxuICAgICAgICAgICAgICAgIC8vIHRocm93IG5ldyBFcnJvcihgW3ByZWRpY3QgZXJyb3JdIHBhcnNlIGlucHV0IGZhaWwgXFxuIHRlcm1pbmFsOiAke3Rlcm1pbmFsfSBcXG4gIHJlbWFpbmluZ0lucHV0OiAke2xleGVyLnJlbWFpblN0cmluZygpfSBcXG4gZ3JhbW1lcjogJHtncmFtbWVyfSBgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjdXJyZW50U3RhdGUucGFyc2VBY3Rpb24gPSBgUHJlZGljdCAke2dyYW1tZXIubm9uVGVybWluYWx9IC0+ICR7Z3JhbW1lci5kZXJpdmF0aW9uc1swXS5qb2luKFwiIFwiKX1gO1xyXG4gICAgICAgICAgICBsb2cubG9nKFwiW3ByZWRpY3QgU3RhdGVdXCIsIGN1cnJlbnRTdGF0ZSk7XHJcbiAgICAgICAgICAgIHByZWRpY3RQcm9jZXNzLnB1c2goY3VycmVudFN0YXRlKTtcclxuICAgICAgICAgICAgY3VycmVudFN0YXRlID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShjdXJyZW50U3RhdGUpKTtcclxuICAgICAgICAgICAgY3VycmVudFN0YXRlLnBhcnNlU3RhY2sucG9wKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGFzdE5vZGUgPSBhc3RTdGFjay5wb3AoKSE7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlcml2YXRpb24gPSBncmFtbWVyLmRlcml2YXRpb25zWzBdLmZpbHRlcihjaGFyID0+IGNoYXIgIT09IEVtcHR5Q2hhcmFjdGVyKTtcclxuICAgICAgICAgICAgaWYoIWFzdE5vZGUuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgIGFzdE5vZGUuY2hpbGRyZW4gPSBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IobGV0IHRvY2tlbiBvZiBkZXJpdmF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBhc3ROb2RlLmNoaWxkcmVuLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBhc3RJZHgrKyxcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiB0b2NrZW4sXHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2s6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhc3RTdGFjay5wdXNoKC4uLlsuLi5hc3ROb2RlLmNoaWxkcmVuXS5yZXZlcnNlKCkpO1xyXG4gICAgICAgICAgICBjdXJyZW50U3RhdGUucGFyc2VTdGFjay5wdXNoKC4uLmRlcml2YXRpb24ucmV2ZXJzZSgpKTtcclxuICAgICAgICAgICAgY3VycmVudFN0YXRlLnBhcnNlQWN0aW9uID0gXCJcIjtcclxuICAgICAgICAgICAgY3VycmVudFN0YXRlLnJlbWFpbmluZ0lucHV0ID0gbGV4ZXIucmVtYWluU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIHlpZWxkIHByZWRpY3RQcm9jZXNzO1xyXG4gICAgICAgIH1cclxuICAgIH0gY2F0Y2goZTogYW55KSB7XHJcbiAgICAgICAgY3VycmVudFN0YXRlLnBhcnNlQWN0aW9uID0gZS50b1N0cmluZygpO1xyXG4gICAgICAgIHByZWRpY3RQcm9jZXNzLnB1c2goY3VycmVudFN0YXRlKTtcclxuICAgIH1cclxuICAgIChwcmVkaWN0UHJvY2VzcyBhcyBhbnkpLmFzdE5vZGUgPSBhc3ROb2RlXHJcbiAgICByZXR1cm4gcHJlZGljdFByb2Nlc3M7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiogZ2VuZXJhdGVQcmVkaWN0VGFibGVQcm9ncmVzc2l2ZShcclxuICAgIGxleGVyOiBMZXhlcixcclxuICAgIGluR3JhbW1lcnM6IEFycmF5PHN0cmluZz4sXHJcbiAgICBmaXJzdFNldDogR3JhbW1lclNldCxcclxuICAgIGZvbGxvd1NldDogR3JhbW1lclNldCxcclxuKTogSXRlcmFibGVJdGVyYXRvcjxSdWxlIHwgUHJvY2VzczxQcmVkaWN0VGFibGU+PiB7XHJcbiAgICAvKlxyXG4gICAg5a+56K+t5rOV5Lit55qE5q+P5p2h5Lqn55Sf5byP77yaIEEgLT4gdSDvvJpcclxuICAgICAgKDEp5a+5IEZpcnN0KHUpIOS4reeahOaJgOaciee7iOe7k+espiBhIO+8iOS4jeWQqyDOtSDvvInvvIznva4gTVtBLCBhXSA9IEEgLT4gdVxyXG4gICAgICAoMinoi6UgRmlyc3QodSkg5ZCrIM61IO+8jOWImeWvuSBGb2xsb3coQSkg5Lit55qE5omA5pyJ56ym5Y+3IGEg77yI5Y+v5ZCrICQg77yJ77yM572uIE1bQSwgYV0gPSBBIC0+IHVcclxuICAqL1xyXG4gICAgeWllbGQgW1xyXG4gICAgICAgIFwiMS4g5a+5IEZpcnN0KHUpIOS4reeahOaJgOaciee7iOe7k+espiBhIO+8iOS4jeWQqyDOtSDvvInvvIznva4gTVtBLCBhXSA9IEEgLT4gdVwiLFxyXG4gICAgICAgIFwiMi4g6IulIEZpcnN0KHUpIOWQqyDOtSDvvIzliJnlr7kgRm9sbG93KEEpIOS4reeahOaJgOacieespuWPtyBhIO+8iOWPr+WQqyAkIO+8ie+8jOe9riBNW0EsIGFdID0gQSAtPiB1XCJcclxuICAgIF1cclxuICAgIGNvbnN0IGdyYW1tZXJzID0gdHJhbnNmZXJTdHJpbmcyR3JhbW1lcnMobGV4ZXIsIGluR3JhbW1lcnMpO1xyXG4gICAgY29uc3QgcHJlZGljdFRhYmxlOiBQcmVkaWN0VGFibGUgPSBbXTtcclxuICAgIGNvbnN0IG5vblRlcm1pbmFsMlRhYmxlUm93TWFwID0gbmV3IE1hcDxOb25UZXJtaW5hbCwgUHJlZGljdExpbmU+KCk7XHJcbiAgICBsZXhlci5ub25UZXJtaW5hbHMuZm9yRWFjaChub25UZXJtaW5hbCA9PiB7XHJcbiAgICAgICAgY29uc3QgdGFibGVMaW5lID0ge1xyXG4gICAgICAgICAgICBub25UZXJtaW5hbDogbm9uVGVybWluYWwsXHJcbiAgICAgICAgICAgIHRlcm1pbmFsMkRlcml2YXRpb246IG5ldyBNYXA8VGVybWluYWwsIEdyYW1tZXI+KCksXHJcbiAgICAgICAgfTtcclxuICAgICAgICBub25UZXJtaW5hbDJUYWJsZVJvd01hcC5zZXQobm9uVGVybWluYWwsIHRhYmxlTGluZSk7XHJcbiAgICAgICAgcHJlZGljdFRhYmxlLnB1c2godGFibGVMaW5lKTtcclxuICAgIH0pXHJcbiAgICBjb25zdCBub25UZXJtaW5hbDJGaXJzdFNldE1hcCA9IG5ldyBNYXA8Tm9uVGVybWluYWwsIEdyYW1tZXJTZXRMaW5lPigpO1xyXG4gICAgY29uc3Qgbm9uVGVybWluYWwyRm9sbG93U2V0TGluZSA9IG5ldyBNYXA8Tm9uVGVybWluYWwsIEdyYW1tZXJTZXRMaW5lPigpO1xyXG4gICAgZm9yIChsZXQgc2V0TGluZSBvZiBmb2xsb3dTZXQpIHtcclxuICAgICAgICBub25UZXJtaW5hbDJGb2xsb3dTZXRMaW5lLnNldChzZXRMaW5lLnRvY2tlbiwgc2V0TGluZSk7XHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBzZXRMaW5lIG9mIGZpcnN0U2V0KSB7XHJcbiAgICAgICAgbm9uVGVybWluYWwyRmlyc3RTZXRNYXAuc2V0KHNldExpbmUudG9ja2VuLCBzZXRMaW5lKTtcclxuICAgIH1cclxuICAgIGZvciAobGV0IGdyYW1tZXIgb2YgZ3JhbW1lcnMpIHtcclxuICAgICAgICBmb3IgKGxldCBkZXJpdmF0aW9uIG9mIGdyYW1tZXIuZGVyaXZhdGlvbnMpIHtcclxuICAgICAgICAgICAgY29uc3QgZGVyaXZhdGlvbkZpcnN0U2V0ID0gZ2V0RGVyaXZhdGlvbkZpcnN0U2V0V2l0aE1hcChsZXhlciwgZGVyaXZhdGlvbiwgbm9uVGVybWluYWwyRmlyc3RTZXRNYXApO1xyXG4gICAgICAgICAgICBjb25zdCB0YWJsZUxpbmUgPSBub25UZXJtaW5hbDJUYWJsZVJvd01hcC5nZXQoZ3JhbW1lci5ub25UZXJtaW5hbCk7XHJcbiAgICAgICAgICAgIGxvZy5sb2coZGVyaXZhdGlvbkZpcnN0U2V0KTtcclxuICAgICAgICAgICAgLy8gKDEp5a+5IEZpcnN0KHUpIOS4reeahOaJgOaciee7iOe7k+espiBhIO+8iOS4jeWQqyDOtSDvvInvvIznva4gTVtBLCBhXSA9IOKAnEEgLT4gdeKAnSDvvJtcclxuICAgICAgICAgICAgZm9yIChsZXQgdGVybWluYWwgb2YgZGVyaXZhdGlvbkZpcnN0U2V0LnRlcm1pbmFscykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRlcm1pbmFsID09PSBFbXB0eUNoYXJhY3RlcikgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2VsbEdyYW1tZXI6IEdyYW1tZXIgfCB1bmRlZmluZWQgPSB0YWJsZUxpbmU/LnRlcm1pbmFsMkRlcml2YXRpb24uZ2V0KHRlcm1pbmFsKTtcclxuICAgICAgICAgICAgICAgIGlmICghY2VsbEdyYW1tZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsR3JhbW1lciA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9uVGVybWluYWw6IGdyYW1tZXIubm9uVGVybWluYWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlcml2YXRpb25zOiBbXVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgdGFibGVMaW5lPy50ZXJtaW5hbDJEZXJpdmF0aW9uLnNldCh0ZXJtaW5hbCwgY2VsbEdyYW1tZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2VsbEdyYW1tZXIuZGVyaXZhdGlvbnMucHVzaChkZXJpdmF0aW9uKTtcclxuICAgICAgICAgICAgICAgIHlpZWxkIHtcclxuICAgICAgICAgICAgICAgICAgICBydWxlSW5kZXg6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBwcmVkaWN0VGFibGVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyAoMinoi6UgRmlyc3QodSkg5ZCrIM61IO+8jOWImeWvuSBGb2xsb3coQSkg5Lit55qE5omA5pyJ56ym5Y+3IGEg77yI5Y+v5ZCrICQg77yJ77yM572uIE1bQSwgYV0gPSDigJxBIC0+IHXigJ0gXHJcbiAgICAgICAgICAgIGlmIChkZXJpdmF0aW9uRmlyc3RTZXQudGVybWluYWxzLmhhcyhFbXB0eUNoYXJhY3RlcikpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHRlcm1pbmFsIG9mIG5vblRlcm1pbmFsMkZvbGxvd1NldExpbmUuZ2V0KGdyYW1tZXIubm9uVGVybWluYWwpIS50ZXJtaW5hbHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY2VsbEdyYW1tZXI6IEdyYW1tZXIgfCB1bmRlZmluZWQgPSB0YWJsZUxpbmU/LnRlcm1pbmFsMkRlcml2YXRpb24uZ2V0KHRlcm1pbmFsKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWNlbGxHcmFtbWVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxHcmFtbWVyID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9uVGVybWluYWw6IGdyYW1tZXIubm9uVGVybWluYWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXJpdmF0aW9uczogW11cclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVMaW5lPy50ZXJtaW5hbDJEZXJpdmF0aW9uLnNldCh0ZXJtaW5hbCwgY2VsbEdyYW1tZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjZWxsR3JhbW1lci5kZXJpdmF0aW9ucy5wdXNoKGRlcml2YXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcnVsZUluZGV4OiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IHByZWRpY3RUYWJsZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImltcG9ydCBMZXhlciBmcm9tIFwiLi9sZXhlclwiO1xyXG5pbXBvcnQgeyBOb25UZXJtaW5hbCwgVGVybWluYWwgfSBmcm9tIFwiLi90eXBlcy90eXBlXCI7XHJcbmltcG9ydCB7IEVtcHR5Q2hhcmFjdGVyIH0gZnJvbSBcIi4vdXRpbHMvY29uc3RcIjtcclxuaW1wb3J0IGxvZyBmcm9tIFwiLi91dGlscy9sb2dcIjtcclxuXHJcbi8qXHJcbiAgICDlpoLmnpznlKjmiLfovpPlhaXnmoTmmK/kuabkuIrpgqPnp43nroDljZXmlofms5XvvIzor6Xlh73mlbDoh6rliqjor4bliKvlh7rnu4jnu5PnrKblkozpnZ7nu4jnu5PnrKZcclxuICAgIOmdnue7iOe7k+espjogL15bQS1aXScqIC9cclxuICAgIOe7iOe7k+espjogL1thLXp8XFx1MDM5MS1cXHUwM0M5XS8gICjlsI/lhpnlrZfmr43ku6Xlj4pHcmVlayBTeW1ib2xzKVxyXG4gICAgZXg6IGh0dHBzOi8vdW5pY29kZS10YWJsZS5jb20vZW4vc2V0cy9ncmVlay1zeW1ib2xzL1xyXG4gICAg5o6o5a+856ym5Y+3OiA9PiAtPlxyXG4qL1xyXG5jb25zdCBzaW1wbGVOb25UZXJtaW5hbFJlZyA9IC9eW0EtWl0nKi87XHJcbmNvbnN0IHNpbXBsZVRlcm1pbmFsUmVnID0gL1thLXp8XFx1MDM5MS1cXHUwM0M5XS87XHJcbmNvbnN0IG90aGVyVGVybWluYWwgPSBbXCIoXCIsIFwiKVwiLCBcIitcIiwgXCIqXCIsIFwiLVwiXTtcclxuZXhwb3J0IGZ1bmN0aW9uIGdldFRvY2tGcm9tU2ltcGxlR3JhbW1lcnMoaW5HcmFtbWVyczogQXJyYXk8c3RyaW5nPik6IHtcclxuICBub25UZXJtaW5hbHM6IEFycmF5PHN0cmluZz47XHJcbiAgdGVybWluYWxzOiBBcnJheTxbc3RyaW5nLCBSZWdFeHBdPjtcclxufSB7XHJcbiAgICBjb25zdCBub25UZXJtaW5hbHM6IFNldDxzdHJpbmc+ID0gbmV3IFNldCgpO1xyXG4gICAgY29uc3QgdGVybWluYWxzOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoKTtcclxuICAgIGluR3JhbW1lcnMuZm9yRWFjaCgoZ3JhbW1lcikgPT4ge1xyXG4gICAgICAgIGNvbnN0IGFyciA9IGdyYW1tZXJcclxuICAgICAgICAgICAgLnJlcGxhY2VBbGwoL1xccy9nLCBcIlwiKVxyXG4gICAgICAgICAgICAuc3BsaXQoLyg9Pil8KC0+KS8pXHJcbiAgICAgICAgICAgIC5maWx0ZXIoKHYpID0+IHYgIT09IFwiPT5cIiAmJiB2ICE9PSBcIi0+XCIgJiYgdik7XHJcbiAgICAgICAgY29uc3Qgbm9uVGVybWluYWwgPSBhcnJbMF07XHJcbiAgICAgICAgbm9uVGVybWluYWxzLmFkZChub25UZXJtaW5hbCk7XHJcbiAgICAgICAgYXJyWzFdXHJcbiAgICAgICAgICAgIC5zcGxpdChcInxcIilcclxuICAgICAgICAgICAgLmZpbHRlcigodikgPT4gdiAmJiB2ICE9PSBcInxcIilcclxuICAgICAgICAgICAgLmZvckVhY2goKGRlcml2YXRpb24pID0+IHtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChkZXJpdmF0aW9uLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBtYXRjaFJlc3VsdCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hSZXN1bHQgPSBkZXJpdmF0aW9uLm1hdGNoKHNpbXBsZU5vblRlcm1pbmFsUmVnKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyDliIflibJBQkPov5nnp43pnZ7nu4jnu5PnrKZcclxuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hSZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9uVGVybWluYWxzLmFkZChtYXRjaFJlc3VsdFswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlcml2YXRpb24gPSBkZXJpdmF0aW9uLnNsaWNlKG1hdGNoUmVzdWx0WzBdLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBtYXRjaFJlc3VsdCA9IGRlcml2YXRpb24ubWF0Y2goc2ltcGxlVGVybWluYWxSZWcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaFJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXJtaW5hbHMuYWRkKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoW21hdGNoUmVzdWx0WzBdLCBcIl5cIiArIG1hdGNoUmVzdWx0WzBdXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVyaXZhdGlvbiA9IGRlcml2YXRpb24uc2xpY2UobWF0Y2hSZXN1bHRbMF0ubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgICAgICAgICAgICAgICAgICAgYFtnZXRUb2NrRnJvbVNpbXBsZUdyYW1tZXJzIGVycm9yXSBjYW50IHJlY29nbml6ZSB0aGUgY2hhcmFjdGVyIHJlbWFpbmluZzogJHtkZXJpdmF0aW9ufWBcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBub25UZXJtaW5hbHM6IEFycmF5LmZyb20obm9uVGVybWluYWxzKS5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIOWBmuS4gOS4queugOWNleaOkuW6jyDpmLLmraJCIOWSjCBCJyDlhrLnqoFcclxuICAgICAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XHJcbiAgICAgICAgfSksXHJcbiAgICAgICAgdGVybWluYWxzOiBBcnJheS5mcm9tKHRlcm1pbmFscykubWFwKChqc29uRGF0YSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB0ZXJtaW5hbCA9IEpTT04ucGFyc2UoanNvbkRhdGEpO1xyXG4gICAgICAgICAgICB0ZXJtaW5hbFsxXSA9IG5ldyBSZWdFeHAodGVybWluYWxbMV0pO1xyXG4gICAgICAgICAgICByZXR1cm4gdGVybWluYWw7XHJcbiAgICAgICAgfSksXHJcbiAgICB9O1xyXG59XHJcblxyXG4vKlxyXG4gICAg5qOA5rWL5paH5rOV5piv5ZCm6ZyA6KaB566A5Y2V5ZCI5bm25Y676YeNXHJcbiovXHJcbmV4cG9ydCBmdW5jdGlvbiBjaGVja05lZWR1bmlvbkdyYW1tZXJzKGdyYW1tZXJzOiBBcnJheTxzdHJpbmc+KTogYm9vbGVhbiB7XHJcbiAgICBsZXQgdW5pb25NYXAgPSBuZXcgTWFwPHN0cmluZywgQXJyYXk8c3RyaW5nPj4oKTtcclxuICAgIGZvciAobGV0IGdyYW1tZXIgb2YgZ3JhbW1lcnMpIHtcclxuICAgICAgICBncmFtbWVyID0gZ3JhbW1lci5yZXBsYWNlQWxsKC9cXHMvZywgXCJcIik7XHJcbiAgICAgICAgY29uc3QgYXJyID0gZ3JhbW1lclxyXG4gICAgICAgICAgICAuc3BsaXQoLyg9Pil8KC0+KS8pXHJcbiAgICAgICAgICAgIC5maWx0ZXIoKHYpID0+IHYgIT09IFwiPT5cIiAmJiB2ICE9PSBcIi0+XCIgJiYgdik7XHJcbiAgICAgICAgY29uc3Qgbm9uVGVybWluYWwgPSBhcnJbMF07XHJcbiAgICAgICAgY29uc3QgZGVyaXZhdGlvbiA9IGFyclsxXTtcclxuICAgICAgICBpZiAodW5pb25NYXAuaGFzKG5vblRlcm1pbmFsKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB1bmlvbk1hcC5zZXQobm9uVGVybWluYWwsIFtkZXJpdmF0aW9uXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcbi8qXHJcbiAgICBBIC0+IGFcclxuICAgIEEgLT4gY1xyXG4gICAgPT09PlxyXG4gICAgQSAtPiBhIHwgY1xyXG5cclxuICAgIOW5tuS4lOS8mueugOWNleWOu+mHjVxyXG4qL1xyXG5leHBvcnQgZnVuY3Rpb24gdW5pb25HcmFtbWVycyhcclxuICAgIGdyYW1tZXJzOiBBcnJheTxzdHJpbmc+LFxyXG4gICAgbm9uVGVybWluYWxzPzogQXJyYXk8c3RyaW5nPixcclxuICAgIHRlcm1pbmFscz86IEFycmF5PFtzdHJpbmcsIFJlZ0V4cF0+XHJcbik6IEFycmF5PHN0cmluZz4ge1xyXG4gICAgbGV0IHVuaW9uTWFwID0gbmV3IE1hcDxzdHJpbmcsIEFycmF5PHN0cmluZz4+KCk7XHJcbiAgICBjb25zdCByZXN1bHQ6IEFycmF5PHN0cmluZz4gPSBbXTtcclxuICAgIGlmICghbm9uVGVybWluYWxzIHx8ICF0ZXJtaW5hbHMpIHtcclxuICAgICAgICBjb25zdCB0b2NrZW5BbmFSZXMgPSBnZXRUb2NrRnJvbVNpbXBsZUdyYW1tZXJzKGdyYW1tZXJzKTtcclxuICAgICAgICBub25UZXJtaW5hbHMgPSB0b2NrZW5BbmFSZXMubm9uVGVybWluYWxzO1xyXG4gICAgICAgIHRlcm1pbmFscyA9IHRvY2tlbkFuYVJlcy50ZXJtaW5hbHM7XHJcbiAgICB9XHJcbiAgICBsZXQgbGV4ZXIgPSBuZXcgTGV4ZXIodGVybWluYWxzLCBub25UZXJtaW5hbHMpO1xyXG4gICAgZ3JhbW1lcnMuZm9yRWFjaCgoZ3JhbW1lcikgPT4ge1xyXG4gICAgICAgIGdyYW1tZXIgPSBncmFtbWVyLnJlcGxhY2VBbGwoL1xccy9nLCBcIlwiKTtcclxuICAgICAgICBjb25zdCBhcnIgPSBncmFtbWVyXHJcbiAgICAgICAgICAgIC5zcGxpdCgvKD0+KXwoLT4pLylcclxuICAgICAgICAgICAgLmZpbHRlcigodikgPT4gdiAhPT0gXCI9PlwiICYmIHYgIT09IFwiLT5cIiAmJiB2KTtcclxuICAgICAgICBjb25zdCBub25UZXJtaW5hbCA9IGFyclswXTtcclxuICAgICAgICBjb25zdCBkZXJpdmF0aW9ucyA9IGFyclsxXVxyXG4gICAgICAgICAgICAuc3BsaXQoXCJ8XCIpXHJcbiAgICAgICAgICAgIC5maWx0ZXIoKHYpID0+IHYpXHJcbiAgICAgICAgICAgIC5tYXAoKGRlcml2YXRpb24pID0+IHtcclxuICAgICAgICAgICAgICAgIGxvZy5sb2coXCJbZGVidWddXCIsIHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbGV4ZXIuc3BsaXREZXJpdmF0aW9uKGRlcml2YXRpb24pO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKHVuaW9uTWFwLmhhcyhub25UZXJtaW5hbCkpIHtcclxuICAgICAgICAgICAgY29uc3QgYXJyID0gdW5pb25NYXAuZ2V0KG5vblRlcm1pbmFsKTtcclxuICAgICAgICAgICAgZGVyaXZhdGlvbnMuZm9yRWFjaCgoZGVyaXZhdGlvbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGVyaSA9IGRlcml2YXRpb24uam9pbihcIiBcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXJyPy5pbmRleE9mKGRlcmkpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFyci5wdXNoKGRlcmkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB1bmlvbk1hcC5zZXQoXHJcbiAgICAgICAgICAgICAgICBub25UZXJtaW5hbCxcclxuICAgICAgICAgICAgICAgIGRlcml2YXRpb25zLm1hcCgoZGVyaXZhdGlvbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZXJpdmF0aW9uLmpvaW4oXCIgXCIpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIGZvciAobGV0IG5vblRlcm1pbmFsIG9mIHVuaW9uTWFwLmtleXMoKSkge1xyXG4gICAgICAgIGNvbnN0IGRlcml2YXRpb25zID0gWy4uLm5ldyBTZXQodW5pb25NYXAuZ2V0KG5vblRlcm1pbmFsKSEpXTtcclxuICAgICAgICByZXN1bHQucHVzaChcclxuICAgICAgICAgICAgYCR7bm9uVGVybWluYWx9IC0+ICR7ZGVyaXZhdGlvbnMuam9pbihcInxcIil9YC5zcGxpdChcInxcIikuam9pbihcIiB8IFwiKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbiAgICBsb2cubG9nKHJlc3VsdCk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG4vKlxyXG4gICAg5qOA5rWL5piv5ZCm6ZyA6KaB6L+b6KGM5o+Q5bem5YWs5YWx5Zug5a2QXHJcbiovXHJcbmV4cG9ydCBmdW5jdGlvbiBjaGVja05lZWRsaWZ0VXBDb21tb25Ub2NrZW4oXHJcbiAgICBncmFtbWVyczogQXJyYXk8c3RyaW5nPixcclxuICAgIG5vblRlcm1pbmFscz86IEFycmF5PHN0cmluZz4sXHJcbiAgICB0ZXJtaW5hbHM/OiBBcnJheTxbc3RyaW5nLCBSZWdFeHBdPlxyXG4pOiBib29sZWFuIHtcclxuICAgIGxldCByZXN1bHQ6IEFycmF5PHN0cmluZz4gPSBncmFtbWVycztcclxuICAgIGlmICghbm9uVGVybWluYWxzIHx8ICF0ZXJtaW5hbHMpIHtcclxuICAgICAgICBjb25zdCB0b2NrZW5BbmFSZXMgPSBnZXRUb2NrRnJvbVNpbXBsZUdyYW1tZXJzKGdyYW1tZXJzKTtcclxuICAgICAgICBub25UZXJtaW5hbHMgPSB0b2NrZW5BbmFSZXMubm9uVGVybWluYWxzO1xyXG4gICAgICAgIHRlcm1pbmFscyA9IHRvY2tlbkFuYVJlcy50ZXJtaW5hbHM7XHJcbiAgICB9XHJcbiAgICBsZXQgbGV4ZXIgPSBuZXcgTGV4ZXIodGVybWluYWxzLCBub25UZXJtaW5hbHMpO1xyXG4gICAgZm9yIChsZXQgZ3JhbW1lciBvZiByZXN1bHQpIHtcclxuICAgICAgICBncmFtbWVyID0gZ3JhbW1lci5yZXBsYWNlQWxsKC9cXHMvZywgXCJcIik7XHJcbiAgICAgICAgY29uc3QgYXJyID0gZ3JhbW1lclxyXG4gICAgICAgICAgICAuc3BsaXQoLyg9Pil8KC0+KS8pXHJcbiAgICAgICAgICAgIC5maWx0ZXIoKHYpID0+IHYgIT09IFwiPT5cIiAmJiB2ICE9PSBcIi0+XCIgJiYgdik7XHJcbiAgICAgICAgY29uc3QgZGVyaXZhdGlvbnMgPSBhcnJbMV1cclxuICAgICAgICAgICAgLnNwbGl0KFwifFwiKVxyXG4gICAgICAgICAgICAuZmlsdGVyKCh2KSA9PiB2KVxyXG4gICAgICAgICAgICAubWFwKChkZXJpdmF0aW9uKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsb2cubG9nKFwiW2RlYnVnXVwiLCByZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxleGVyLnNwbGl0RGVyaXZhdGlvbihkZXJpdmF0aW9uKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3QgZmlyc3RUb2NrZW4yRGVyaXZhdGlvbnNNYXAgPSBuZXcgTWFwPFxyXG4gICAgICBOb25UZXJtaW5hbCB8IFRlcm1pbmFsLFxyXG4gICAgICBzdHJpbmdbXVtdXHJcbiAgICA+KCk7XHJcbiAgICAgICAgZGVyaXZhdGlvbnMuZm9yRWFjaCgoZGVyaXZhdGlvbikgPT4ge1xyXG4gICAgICAgICAgICBsZXQgYXJyID0gZmlyc3RUb2NrZW4yRGVyaXZhdGlvbnNNYXAuZ2V0KGRlcml2YXRpb25bMF0pO1xyXG4gICAgICAgICAgICBpZiAoIWFycikge1xyXG4gICAgICAgICAgICAgICAgYXJyID0gW2Rlcml2YXRpb24uc2xpY2UoMSldO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYXJyLnB1c2goZGVyaXZhdGlvbi5zbGljZSgxKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmlyc3RUb2NrZW4yRGVyaXZhdGlvbnNNYXAuc2V0KGRlcml2YXRpb25bMF0sIGFycik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZm9yIChsZXQgdG9ja2VuIG9mIGZpcnN0VG9ja2VuMkRlcml2YXRpb25zTWFwLmtleXMoKSkge1xyXG4gICAgICAgICAgICBpZiAoZmlyc3RUb2NrZW4yRGVyaXZhdGlvbnNNYXAuZ2V0KHRvY2tlbik/Lmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBsaWZ0VXBDb21tb25Ub2NrZW4oXHJcbiAgICBncmFtbWVyczogQXJyYXk8c3RyaW5nPixcclxuICAgIG5vblRlcm1pbmFscz86IEFycmF5PHN0cmluZz4sXHJcbiAgICB0ZXJtaW5hbHM/OiBBcnJheTxbc3RyaW5nLCBSZWdFeHBdPlxyXG4pOiBBcnJheTxzdHJpbmc+IHtcclxuICAgIGxldCByZXN1bHQ6IEFycmF5PHN0cmluZz4gPSBncmFtbWVycztcclxuICAgIGlmICghbm9uVGVybWluYWxzIHx8ICF0ZXJtaW5hbHMpIHtcclxuICAgICAgICBjb25zdCB0b2NrZW5BbmFSZXMgPSBnZXRUb2NrRnJvbVNpbXBsZUdyYW1tZXJzKGdyYW1tZXJzKTtcclxuICAgICAgICBub25UZXJtaW5hbHMgPSB0b2NrZW5BbmFSZXMubm9uVGVybWluYWxzO1xyXG4gICAgICAgIHRlcm1pbmFscyA9IHRvY2tlbkFuYVJlcy50ZXJtaW5hbHM7XHJcbiAgICB9XHJcbiAgICBsZXQgbGV4ZXIgPSBuZXcgTGV4ZXIodGVybWluYWxzLCBub25UZXJtaW5hbHMpO1xyXG4gICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICBsZXQgbmV3QWRkR3JhbW1lcnM6IHN0cmluZ1tdID0gW107XHJcbiAgICAgICAgY29uc3QgdG1wUmVzdWx0ID0gcmVzdWx0Lm1hcCgoZ3JhbW1lcikgPT4ge1xyXG4gICAgICAgICAgICBncmFtbWVyID0gZ3JhbW1lci5yZXBsYWNlQWxsKC9cXHMvZywgXCJcIik7XHJcbiAgICAgICAgICAgIGNvbnN0IGFyciA9IGdyYW1tZXJcclxuICAgICAgICAgICAgICAgIC5zcGxpdCgvKD0+KXwoLT4pLylcclxuICAgICAgICAgICAgICAgIC5maWx0ZXIoKHYpID0+IHYgIT09IFwiPT5cIiAmJiB2ICE9PSBcIi0+XCIgJiYgdik7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vblRlcm1pbmFsID0gYXJyWzBdO1xyXG4gICAgICAgICAgICBjb25zdCBkZXJpdmF0aW9ucyA9IGFyclsxXVxyXG4gICAgICAgICAgICAgICAgLnNwbGl0KFwifFwiKVxyXG4gICAgICAgICAgICAgICAgLmZpbHRlcigodikgPT4gdilcclxuICAgICAgICAgICAgICAgIC5tYXAoKGRlcml2YXRpb24pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsb2cubG9nKFwiW2RlYnVnXVwiLCByZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsZXhlci5zcGxpdERlcml2YXRpb24oZGVyaXZhdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY29uc3QgbmV3RGVyaXZhdGlvbiA9IFtdO1xyXG4gICAgICAgICAgICBjb25zdCBmaXJzdFRvY2tlbjJEZXJpdmF0aW9uc01hcCA9IG5ldyBNYXA8XHJcbiAgICAgICAgTm9uVGVybWluYWwgfCBUZXJtaW5hbCxcclxuICAgICAgICBzdHJpbmdbXVtdXHJcbiAgICAgID4oKTtcclxuICAgICAgICAgICAgZGVyaXZhdGlvbnMuZm9yRWFjaCgoZGVyaXZhdGlvbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGFyciA9IGZpcnN0VG9ja2VuMkRlcml2YXRpb25zTWFwLmdldChkZXJpdmF0aW9uWzBdKTtcclxuICAgICAgICAgICAgICAgIGlmICghYXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyID0gW2Rlcml2YXRpb24uc2xpY2UoMSldO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhcnIucHVzaChkZXJpdmF0aW9uLnNsaWNlKDEpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZpcnN0VG9ja2VuMkRlcml2YXRpb25zTWFwLnNldChkZXJpdmF0aW9uWzBdLCBhcnIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZm9yIChsZXQgdG9ja2VuIG9mIGZpcnN0VG9ja2VuMkRlcml2YXRpb25zTWFwLmtleXMoKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGZpcnN0VG9ja2VuMkRlcml2YXRpb25zTWFwLmdldCh0b2NrZW4pPy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdEZXJpdmF0aW9uLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvY2tlbiArIGZpcnN0VG9ja2VuMkRlcml2YXRpb25zTWFwLmdldCh0b2NrZW4pIVswXS5qb2luKFwiXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGRlcml2YXRpb25zID0gZmlyc3RUb2NrZW4yRGVyaXZhdGlvbnNNYXAuZ2V0KHRvY2tlbik7XHJcbiAgICAgICAgICAgICAgICAvLyDlj6/ku6Xmj5Dlj5blhazlm6DlrZBcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1VuVGVybWluYWwgPSBsZXhlci5nZXROZXdOb25UZXJtaW5hbChub25UZXJtaW5hbCk7XHJcbiAgICAgICAgICAgICAgICBuZXdEZXJpdmF0aW9uLnB1c2godG9ja2VuICsgbmV3VW5UZXJtaW5hbCk7XHJcbiAgICAgICAgICAgICAgICBuZXdBZGRHcmFtbWVycy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICAgIG5ld1VuVGVybWluYWwgK1xyXG4gICAgICAgICAgICBcIiAtPiBcIiArXHJcbiAgICAgICAgICAgIGRlcml2YXRpb25zPy5tYXAoKHYpID0+IHYuam9pbihcIiBcIikpLmpvaW4oXCIgfCBcIilcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG5vblRlcm1pbmFsICsgXCIgLT4gXCIgKyBuZXdEZXJpdmF0aW9uLmpvaW4oXCIgfCBcIik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbG9nLmxvZyhcIltwcmVdXCIsIHRtcFJlc3VsdCwgbmV3QWRkR3JhbW1lcnMpO1xyXG4gICAgICAgIGNvbnN0IG5ld1Jlc3VsdCA9IFsuLi50bXBSZXN1bHQsIC4uLm5ld0FkZEdyYW1tZXJzXTtcclxuICAgICAgICBsb2cubG9nKFwiW2NvbV1cIiwgcmVzdWx0LCBuZXdSZXN1bHQpO1xyXG4gICAgICAgIGlmIChyZXN1bHQubGVuZ3RoID09PSBuZXdSZXN1bHQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXN1bHQgPSBuZXdSZXN1bHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbi8qXHJcbiAgICDmo4Dmn6XmmK/lkKbpnIDopoHmuIXmpZrlt6bpgJLlvZJcclxuKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrTmVlZENsZWFyUmlnaHRSZWN1cnNpb24oXHJcbiAgICBncmFtbWVyczogQXJyYXk8c3RyaW5nPixcclxuICAgIG5vblRlcm1pbmFscz86IEFycmF5PHN0cmluZz4sXHJcbiAgICB0ZXJtaW5hbHM/OiBBcnJheTxbc3RyaW5nLCBSZWdFeHBdPlxyXG4pOiBib29sZWFuIHtcclxuICAgIGNvbnN0IHJlc3VsdDogQXJyYXk8c3RyaW5nPiA9IFtdO1xyXG4gICAgaWYgKCFub25UZXJtaW5hbHMgfHwgIXRlcm1pbmFscykge1xyXG4gICAgICAgIGNvbnN0IHRvY2tlbkFuYVJlcyA9IGdldFRvY2tGcm9tU2ltcGxlR3JhbW1lcnMoZ3JhbW1lcnMpO1xyXG4gICAgICAgIG5vblRlcm1pbmFscyA9IHRvY2tlbkFuYVJlcy5ub25UZXJtaW5hbHM7XHJcbiAgICAgICAgdGVybWluYWxzID0gdG9ja2VuQW5hUmVzLnRlcm1pbmFscztcclxuICAgIH1cclxuICAgIGxvZy5sb2coXCJbbm9uVGVybWluYWxzXVwiLCBub25UZXJtaW5hbHMpO1xyXG4gICAgbG9nLmxvZyhcIlt0ZXJtaW5hbHNdXCIsIHRlcm1pbmFscyk7XHJcbiAgICBsZXQgbGV4ZXIgPSBuZXcgTGV4ZXIodGVybWluYWxzLCBub25UZXJtaW5hbHMpO1xyXG4gICAgY29uc3Qgbm9uVGVybWluYWxzMkRlcml2YXRpb25NYXAgPSBuZXcgTWFwPE5vblRlcm1pbmFsLCBzdHJpbmdbXVtdPigpO1xyXG4gICAgZm9yIChsZXQgZ3JhbW1lciBvZiBncmFtbWVycykge1xyXG4gICAgICAgIGdyYW1tZXIgPSBncmFtbWVyLnJlcGxhY2VBbGwoL1xccy9nLCBcIlwiKTtcclxuICAgICAgICBjb25zdCBhcnIgPSBncmFtbWVyXHJcbiAgICAgICAgICAgIC5zcGxpdCgvKD0+KXwoLT4pLylcclxuICAgICAgICAgICAgLmZpbHRlcigodikgPT4gdiAhPT0gXCI9PlwiICYmIHYgIT09IFwiLT5cIiAmJiB2KTtcclxuICAgICAgICBjb25zdCBub25UZXJtaW5hbCA9IGFyclswXTtcclxuICAgICAgICBjb25zdCBkZXJpdmF0aW9ucyA9IGFyclsxXVxyXG4gICAgICAgICAgICAuc3BsaXQoXCJ8XCIpXHJcbiAgICAgICAgICAgIC5maWx0ZXIoKHYpID0+IHYpXHJcbiAgICAgICAgICAgIC5tYXAoKGRlcml2YXRpb24pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBsZXhlci5zcGxpdERlcml2YXRpb24oZGVyaXZhdGlvbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIG5vblRlcm1pbmFsczJEZXJpdmF0aW9uTWFwLnNldChub25UZXJtaW5hbCwgZGVyaXZhdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgbG9nLmxvZyhcIltub25UZXJtaW5hbHMyRGVyaXZhdGlvbk1hcF1cIiwgbm9uVGVybWluYWxzMkRlcml2YXRpb25NYXApO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub25UZXJtaW5hbHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBnSSA9IG5vblRlcm1pbmFsczJEZXJpdmF0aW9uTWFwLmdldChub25UZXJtaW5hbHNbaV0pO1xyXG4gICAgICAgIC8vIOa2iOmZpOW3pumAkuW9klxyXG4gICAgICAgIGZvciAobGV0IGogPSBnSSEubGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0pIHtcclxuICAgICAgICAgICAgY29uc3QgZ3JhbW1lciA9IGdJIVtqXTtcclxuICAgICAgICAgICAgaWYgKGdyYW1tZXJbMF0gPT09IG5vblRlcm1pbmFsc1tpXSkge1xyXG4gICAgICAgICAgICAgICAgLy8g5a2Y5Zyo5bem6YCS5b2SXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG4vKlxyXG4gICAg5raI6Zmk5bem6YCS5b2SXHJcbiAgICDnm7TmjqXlt6bpgJLlvZIt6Ze05o6l5bem6YCS5b2SXHJcbiAgICDopoHmsYLvvJog6L6T5YWl5paH5rOV5LiN5ZCr5pyJRW1wdHlDaGFyYXRlciDlkowg546vXHJcbiovXHJcbi8vIFRPRE8hIGNsZWFyTGVmdFJlY3Vyc2lvbiDlkI3lrZfmiZPplJnkuobopoHmlLlcclxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyUmlnaHRSZWN1cnNpb24oXHJcbiAgICBncmFtbWVyczogQXJyYXk8c3RyaW5nPixcclxuICAgIG5vblRlcm1pbmFscz86IEFycmF5PHN0cmluZz4sXHJcbiAgICB0ZXJtaW5hbHM/OiBBcnJheTxbc3RyaW5nLCBSZWdFeHBdPlxyXG4pOiBBcnJheTxzdHJpbmc+IHtcclxuICAgIGNvbnN0IHJlc3VsdDogQXJyYXk8c3RyaW5nPiA9IFtdO1xyXG4gICAgaWYgKCFub25UZXJtaW5hbHMgfHwgIXRlcm1pbmFscykge1xyXG4gICAgICAgIGNvbnN0IHRvY2tlbkFuYVJlcyA9IGdldFRvY2tGcm9tU2ltcGxlR3JhbW1lcnMoZ3JhbW1lcnMpO1xyXG4gICAgICAgIG5vblRlcm1pbmFscyA9IHRvY2tlbkFuYVJlcy5ub25UZXJtaW5hbHM7XHJcbiAgICAgICAgdGVybWluYWxzID0gdG9ja2VuQW5hUmVzLnRlcm1pbmFscztcclxuICAgIH1cclxuICAgIGxvZy5sb2coXCJbbm9uVGVybWluYWxzXVwiLCBub25UZXJtaW5hbHMpO1xyXG4gICAgbG9nLmxvZyhcIlt0ZXJtaW5hbHNdXCIsIHRlcm1pbmFscyk7XHJcbiAgICBsZXQgbGV4ZXIgPSBuZXcgTGV4ZXIodGVybWluYWxzLCBub25UZXJtaW5hbHMpO1xyXG4gICAgY29uc3Qgbm9uVGVybWluYWxzMkRlcml2YXRpb25NYXAgPSBuZXcgTWFwPE5vblRlcm1pbmFsLCBzdHJpbmdbXVtdPigpO1xyXG4gICAgZm9yIChsZXQgZ3JhbW1lciBvZiBncmFtbWVycykge1xyXG4gICAgICAgIGdyYW1tZXIgPSBncmFtbWVyLnJlcGxhY2VBbGwoL1xccy9nLCBcIlwiKTtcclxuICAgICAgICBjb25zdCBhcnIgPSBncmFtbWVyXHJcbiAgICAgICAgICAgIC5zcGxpdCgvKD0+KXwoLT4pLylcclxuICAgICAgICAgICAgLmZpbHRlcigodikgPT4gdiAhPT0gXCI9PlwiICYmIHYgIT09IFwiLT5cIiAmJiB2KTtcclxuICAgICAgICBjb25zdCBub25UZXJtaW5hbCA9IGFyclswXTtcclxuICAgICAgICBjb25zdCBkZXJpdmF0aW9ucyA9IGFyclsxXVxyXG4gICAgICAgICAgICAuc3BsaXQoXCJ8XCIpXHJcbiAgICAgICAgICAgIC5maWx0ZXIoKHYpID0+IHYpXHJcbiAgICAgICAgICAgIC5tYXAoKGRlcml2YXRpb24pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBsZXhlci5zcGxpdERlcml2YXRpb24oZGVyaXZhdGlvbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIG5vblRlcm1pbmFsczJEZXJpdmF0aW9uTWFwLnNldChub25UZXJtaW5hbCwgZGVyaXZhdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgbG9nLmxvZyhcIltub25UZXJtaW5hbHMyRGVyaXZhdGlvbk1hcF1cIiwgbm9uVGVybWluYWxzMkRlcml2YXRpb25NYXApO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub25UZXJtaW5hbHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBnSSA9IG5vblRlcm1pbmFsczJEZXJpdmF0aW9uTWFwLmdldChub25UZXJtaW5hbHNbaV0pO1xyXG4gICAgICAgIC8vIOabv+aNouS6p+eUn+W8j1xyXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgaTsgaisrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGdKID0gbm9uVGVybWluYWxzMkRlcml2YXRpb25NYXAuZ2V0KG5vblRlcm1pbmFsc1tqXSk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGsgPSBnSSEubGVuZ3RoIC0gMTsgayA+PSAwOyBrLS0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGdyYW1tZXIgPSBnSSFba107XHJcbiAgICAgICAgICAgICAgICBpZiAoZ3JhbW1lclswXSA9PT0gbm9uVGVybWluYWxzW2pdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVwbGFjZVxyXG4gICAgICAgICAgICAgICAgICAgIGxvZy5sb2coZ3JhbW1lciwgbm9uVGVybWluYWxzW2pdKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqZ3JhbW1lciBvZiBnSiEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9nLmxvZyhcIlstXVwiLCBqZ3JhbW1lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdJPy5wdXNoKFsuLi5qZ3JhbW1lciwgLi4uZ3JhbW1lci5zbGljZSgxKV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBnST8uc3BsaWNlKGssIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG5lZWRIYW5kbGVJbmRleDogbnVtYmVyW10gPSBbXTtcclxuICAgICAgICAvLyDmtojpmaTlt6bpgJLlvZJcclxuICAgICAgICBmb3IgKGxldCBqID0gZ0khLmxlbmd0aCAtIDE7IGogPj0gMDsgai0tKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGdyYW1tZXIgPSBnSSFbal07XHJcbiAgICAgICAgICAgIGlmIChncmFtbWVyWzBdID09PSBub25UZXJtaW5hbHNbaV0pIHtcclxuICAgICAgICAgICAgICAgIC8vIOWtmOWcqOW3pumAkuW9klxyXG4gICAgICAgICAgICAgICAgbmVlZEhhbmRsZUluZGV4LnB1c2goaik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG5lZWRIYW5kbGVJbmRleC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY29uc3QgbmV3Tm9uVGVybWluYWxUb2NrZW4gPSBsZXhlci5nZXROZXdOb25UZXJtaW5hbChub25UZXJtaW5hbHNbaV0pO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdHcmFtbWVyczogc3RyaW5nW11bXSA9IFtdO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdOb25UZXJtaW5hbEdyYW1tZXJzOiBzdHJpbmdbXVtdID0gW107XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gZ0khLmxlbmd0aCAtIDE7IGogPj0gMDsgai0tKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobmVlZEhhbmRsZUluZGV4LmluZGV4T2YoaikgIT09IC0xKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIC8vIEVtcHR5Q2hhcmFjdGVy5L2c5Li66aaW5Liq56ym5Y+3IOayoeacieaEj+S5iVxyXG4gICAgICAgICAgICAgICAgbmV3R3JhbW1lcnMucHVzaChbXHJcbiAgICAgICAgICAgICAgICAgICAgLi4uKGdJIVtqXVswXSA9PT0gRW1wdHlDaGFyYWN0ZXIgPyBnSSFbal0uc2xpY2UoMSkgOiBnSSFbal0pLFxyXG4gICAgICAgICAgICAgICAgICAgIG5ld05vblRlcm1pbmFsVG9ja2VuLFxyXG4gICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yIChsZXQgaW5kZXggb2YgbmVlZEhhbmRsZUluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICBuZXdOb25UZXJtaW5hbEdyYW1tZXJzLnB1c2goW1xyXG4gICAgICAgICAgICAgICAgICAgIC4uLmdJIVtpbmRleF0uc2xpY2UoMSksXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3Tm9uVGVybWluYWxUb2NrZW4sXHJcbiAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBuZXdOb25UZXJtaW5hbEdyYW1tZXJzLnB1c2goW0VtcHR5Q2hhcmFjdGVyXSk7XHJcbiAgICAgICAgICAgIG5vblRlcm1pbmFsczJEZXJpdmF0aW9uTWFwLnNldChub25UZXJtaW5hbHNbaV0sIFtcclxuICAgICAgICAgICAgICAgIC4uLm5ld0dyYW1tZXJzLFxyXG4gICAgICAgICAgICAgICAgLi4uKG5lZWRIYW5kbGVJbmRleC5sZW5ndGggPyBbXSA6IGdJISksXHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICBub25UZXJtaW5hbHMyRGVyaXZhdGlvbk1hcC5zZXQoXHJcbiAgICAgICAgICAgICAgICBuZXdOb25UZXJtaW5hbFRvY2tlbixcclxuICAgICAgICAgICAgICAgIG5ld05vblRlcm1pbmFsR3JhbW1lcnNcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbG9nLmxvZyhcclxuICAgICAgICAgICAgXCJbbm9uVGVybWluYWxzMkRlcml2YXRpb25NYXAgaW4gcHJvY2Vzc11cIixcclxuICAgICAgICAgICAgbm9uVGVybWluYWxzMkRlcml2YXRpb25NYXAsXHJcbiAgICAgICAgICAgIGdJXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuICAgIGZvciAobGV0IG5vblRlcm1pbmFsIG9mIG5vblRlcm1pbmFsczJEZXJpdmF0aW9uTWFwLmtleXMoKSkge1xyXG4gICAgICAgIGNvbnN0IGRlcml2YXRpb246IHN0cmluZyA9IG5vblRlcm1pbmFsczJEZXJpdmF0aW9uTWFwXHJcbiAgICAgICAgICAgIC5nZXQobm9uVGVybWluYWwpIVxyXG4gICAgICAgICAgICAubWFwKChkZXJpdmF0aW9uKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVyaXZhdGlvbi5qb2luKFwiIFwiKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmpvaW4oXCIgfCBcIik7XHJcbiAgICAgICAgcmVzdWx0LnB1c2goYCR7bm9uVGVybWluYWx9IC0+ICR7ZGVyaXZhdGlvbn1gKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuIiwiaW1wb3J0IGdlbmVyYXRlRmlyc3RTZXQgZnJvbSBcIkAvZmlyc3RTZXRcIjtcclxuaW1wb3J0IGdlbmVyYXRlRmxsb3dTZXQgZnJvbSBcIkAvZm9sbG93U2V0XCI7XHJcbmltcG9ydCBMZXhlciBmcm9tIFwiQC9sZXhlclwiO1xyXG5pbXBvcnQgeyBnZXRUb2NrRnJvbVNpbXBsZUdyYW1tZXJzIH0gZnJvbSBcIkAvc2ltcGxlR3JhbW1lckhlbHBlclwiO1xyXG5pbXBvcnQgeyBHcmFtbWVycywgTFJQcmVkaWN0TGluZSwgTFJQcmVkaWN0UmVzdWx0VGFibGUsIExSUHJlZGljdFRhYmxlTGluZSwgTFJQcmVkaWN0VGFibGUsIExSU3RhdGVOb2RlLCBMUlN0YXRlTm9kZUZvclNob3csIExSU3RhdGVOb2RlSXRlbSwgUHJlZGljdFRhYmxlLCBQcm9jZXNzLCBSdWxlLCBMUlByZWRpY3RMaW5lV2l0aEFTVCwgTFJBU1ROb2RlLCBMUlByZWRpY3RSZXN1bHRUYWJsZVdpdGhBU1ROb2RlIH0gZnJvbSBcIkAvdHlwZXMvdHlwZVwiO1xyXG5pbXBvcnQgeyBFbXB0eUNoYXJhY3RlciwgRW5kaW5nQ2hhcmFjdGVyIH0gZnJvbSBcIkAvdXRpbHMvY29uc3RcIjtcclxuaW1wb3J0IGxvZyBmcm9tIFwiQC91dGlscy9sb2dcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBMUlBhcnNlciAge1xyXG4gICAgaW5pdGlhbFN0YXRlTm9kZTogTFJTdGF0ZU5vZGUgfCBudWxsO1xyXG4gICAgYWxsU3RhdGVOb2Rlc01hcD86IE1hcDxzdHJpbmcsTFJTdGF0ZU5vZGU+O1xyXG4gICAgbGV4ZXI/OiBMZXhlcjtcclxuICAgIGdyYW1tZXJzPzogc3RyaW5nW107XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmluaXRpYWxTdGF0ZU5vZGUgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgZ2VuZXJhdGVTdGF0ZShncmFtbWVyczogc3RyaW5nW10sIHBhcnNlU3RhcnROb25UZXJtaW5hbDogc3RyaW5nLG5vblRlcm1pbmFscz86IEFycmF5PHN0cmluZz4sIHRlcm1pbmFscz86IEFycmF5PFtzdHJpbmcsIFJlZ0V4cF0+KSB7XHJcbiAgICAgICAgaWYgKCFub25UZXJtaW5hbHMgfHwgIXRlcm1pbmFscykge1xyXG4gICAgICAgICAgICAvLyDlpoLmnpznlKjmiLfmsqHmnInoh6rlrprkuYnnu4jnu5PnrKblkozpnZ7nu4jnu5PnrKbvvIzpgqPkuYjpu5jorqTlroPnmoTor63ms5XmmK/mu6HotrPor77mnKzph4znmoRcclxuICAgICAgICAgICAgY29uc3QgdG9ja2VuQW5hUmVzID0gZ2V0VG9ja0Zyb21TaW1wbGVHcmFtbWVycyhncmFtbWVycyk7XHJcbiAgICAgICAgICAgIG5vblRlcm1pbmFscyA9IHRvY2tlbkFuYVJlcy5ub25UZXJtaW5hbHM7XHJcbiAgICAgICAgICAgIHRlcm1pbmFscyA9IHRvY2tlbkFuYVJlcy50ZXJtaW5hbHM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IEF1Z3VtZW50U3RhcnQgPSBcIkF1Z3VtZW50X1NcIjtcclxuICAgICAgICBsb2cubG9nKFwiW25vblRlcm1pbmFsc11cIiwgbm9uVGVybWluYWxzKTtcclxuICAgICAgICBsb2cubG9nKFwiW3Rlcm1pbmFsc11cIiwgdGVybWluYWxzKTtcclxuICAgICAgICB0aGlzLmdyYW1tZXJzID0gZ3JhbW1lcnM7XHJcbiAgICAgICAgdGhpcy5sZXhlciA9IG5ldyBMZXhlcih0ZXJtaW5hbHMsIG5vblRlcm1pbmFscyk7XHJcbiAgICAgICAgLy8g5a6a5LmJ5LuO6Z2e57uI57uT56ym5a+55bqU5Y+z6YOo5byP5a2Q55qE57uT5p6EXHJcbiAgICAgICAgY29uc3Qgbm9uVGVybWluYWxzMkRlcml2YXRpb25NYXAgPSBuZXcgTWFwPHN0cmluZyxzdHJpbmdbXVtdPigpO1xyXG4gICAgICAgIGZvciAobGV0IGdyYW1tZXIgb2YgZ3JhbW1lcnMpIHtcclxuICAgICAgICAgICAgZ3JhbW1lciA9IGdyYW1tZXIucmVwbGFjZUFsbCgvXFxzL2csIFwiXCIpO1xyXG4gICAgICAgICAgICBjb25zdCBhcnIgPSBncmFtbWVyLnNwbGl0KC8oPT4pfCgtPikvKS5maWx0ZXIodiA9PiB2ICE9PSBcIj0+XCIgJiYgdiAhPT0gXCItPlwiICYmIHYpOy8vWydTJywnQUInXVxyXG4gICAgICAgICAgICBjb25zdCBub25UZXJtaW5hbCA9IGFyclswXTtcclxuICAgICAgICAgICAgY29uc3QgZGVyaXZhdGlvbnMgPSBhcnJbMV0uc3BsaXQoXCJ8XCIpLmZpbHRlcih2ID0+IHYpLm1hcChkZXJpdmF0aW9uID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxleGVyIS5zcGxpdERlcml2YXRpb24oZGVyaXZhdGlvbik7ICAgLy8g5bCG5Lqn55Sf5byP55qE5L2T5ouG5byA77yM57uI57uT56ym5ZKM6Z2e57uI57uT56ym5oiQ5Li65Liq5L2TXHJcbiAgICAgICAgICAgICAgICAvL3JldHVybiB0aGlzLmxleGVyPy5zcGxpdERlcml2YXRpb24oZGVyaXZhdGlvbilcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIG5vblRlcm1pbmFsczJEZXJpdmF0aW9uTWFwLnNldChub25UZXJtaW5hbCwgZGVyaXZhdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsb2cubG9nKG5vblRlcm1pbmFsczJEZXJpdmF0aW9uTWFwKTtcclxuXHJcbiAgICAgICAgdGhpcy5pbml0aWFsU3RhdGVOb2RlID0ge1xyXG4gICAgICAgICAgICBpZDogMCxcclxuICAgICAgICAgICAgaXRlbXM6IFt7XHJcbiAgICAgICAgICAgICAgICBub25UZXJtaW5hbDogQXVndW1lbnRTdGFydCxcclxuICAgICAgICAgICAgICAgIGRlcml2YXRpb246IFtwYXJzZVN0YXJ0Tm9uVGVybWluYWxdLCAvLyBTXHJcbiAgICAgICAgICAgICAgICBtYXRjaFBvaW50OiAwLFxyXG4gICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgZWRnZXM6IFtdLFxyXG4gICAgICAgIH1cclxuICAgICAgICBleHBhbmRTdGF0ZUl0ZW1zKHRoaXMuaW5pdGlhbFN0YXRlTm9kZS5pdGVtcyxub25UZXJtaW5hbHMyRGVyaXZhdGlvbk1hcCx0aGlzLmxleGVyKTtcclxuICAgICAgICBjb25zdCBhbGxTdGF0ZU5vZGVzTWFwID0gbmV3IE1hcDxzdHJpbmcsTFJTdGF0ZU5vZGU+KCk7XHJcbiAgICAgICAgdGhpcy5hbGxTdGF0ZU5vZGVzTWFwID0gYWxsU3RhdGVOb2Rlc01hcDtcclxuICAgICAgICBhbGxTdGF0ZU5vZGVzTWFwLnNldChzdGF0ZUl0ZW1zVG9TdHJpbmcodGhpcy5pbml0aWFsU3RhdGVOb2RlLml0ZW1zKSx0aGlzLmluaXRpYWxTdGF0ZU5vZGUpO1xyXG4gICAgICAgIGNvbnN0IHZpczogYm9vbGVhbltdID0gW107XHJcbiAgICAgICAgbGV0IHByZVNpemUgPSAwO1xyXG4gICAgICAgIHdoaWxlKHRydWUpIHtcclxuICAgICAgICAgICAgaWYoYWxsU3RhdGVOb2Rlc01hcC5zaXplID09IHByZVNpemUpYnJlYWs7IC8vIOebruWJjeWbvuS4reeahG5vZGXpg73lpITnkIblrozkuoZcclxuICAgICAgICAgICAgcHJlU2l6ZSA9IGFsbFN0YXRlTm9kZXNNYXAuc2l6ZTtcclxuICAgICAgICAgICAgZm9yKGxldCBzdGF0ZSBvZiBhbGxTdGF0ZU5vZGVzTWFwLnZhbHVlcygpKSB7XHJcbiAgICAgICAgICAgICAgICBpZih2aXNbc3RhdGUuaWRdKSBjb250aW51ZTsgLy8g5aaC5p6c6K+l54q25oCB5bey57uP6YGN5Y6G6L+H77yM5bCx55Wl6L+HXHJcbiAgICAgICAgICAgICAgICB2aXNbc3RhdGUuaWRdID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIC8vIOWIpOaWreaYr+WQpuWPr+S7peWIsOaOpeWPl+eKtuaAgVxyXG4gICAgICAgICAgICAgICAgZm9yKGxldCBpdGVtIG9mIHN0YXRlLml0ZW1zKSB7ICAvLyDorr/pl67ov5nkuKrnirbmgIHkuK3nmoTpobnnm65cclxuICAgICAgICAgICAgICAgICAgICBpZihpdGVtLm5vblRlcm1pbmFsID09PSBBdWd1bWVudFN0YXJ0ICYmIGl0ZW0ubWF0Y2hQb2ludCA9PT0gMSkgeyAvLyDliKTmlq3mmK/lkKbmmK/mjqXlj5fnirbmgIFcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuZWRnZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2NrZW46IEVuZGluZ0NoYXJhY3RlcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogLTEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkZ2VzOiBbXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IobGV0IG5vblRlcm1pbmFsIG9mIG5vblRlcm1pbmFscykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBtYXRjaEl0ZW1zOiBMUlN0YXRlTm9kZUl0ZW1bXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaXRlbSBvZiBzdGF0ZS5pdGVtcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihpdGVtLmRlcml2YXRpb24ubGVuZ3RoID09PSBpdGVtLm1hdGNoUG9pbnQpY29udGludWU7Ly/or7TmmI7ov5nkuKppdGVt5bey57uP57uT5p2f5LqGXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGl0ZW0uZGVyaXZhdGlvbltpdGVtLm1hdGNoUG9pbnRdID09PSBub25UZXJtaW5hbCkgeyAvLyrlkI7pnaLmmK/ov5nkuKpub25UZXJtaW5hbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hJdGVtcy5wdXNoKHsgLy8g5Yib5bu65LiA5Liq5paw55qE6IqC54K577yM5piv6YCa6L+H6I635Y+W6L+Z5Liqbm9uVGVybWluYWzojrflvpfnmoQgICDnnIvliLDov5nph4zkuoZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub25UZXJtaW5hbDogaXRlbS5ub25UZXJtaW5hbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXJpdmF0aW9uOiBpdGVtLmRlcml2YXRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hQb2ludDogaXRlbS5tYXRjaFBvaW50KzEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZighbWF0Y2hJdGVtcy5sZW5ndGgpY29udGludWU7IFxyXG4gICAgICAgICAgICAgICAgICAgIGV4cGFuZFN0YXRlSXRlbXMobWF0Y2hJdGVtcyxub25UZXJtaW5hbHMyRGVyaXZhdGlvbk1hcCx0aGlzLmxleGVyKTsgLy/ojrflj5bov5nkuKpzdGF0ZeWFtuS7lml0ZW1cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBzdGF0ZUl0ZW1zVG9TdHJpbmcobWF0Y2hJdGVtcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIWFsbFN0YXRlTm9kZXNNYXAuaGFzKGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsU3RhdGVOb2Rlc01hcC5zZXQoa2V5LHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBhbGxTdGF0ZU5vZGVzTWFwLnNpemUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogbWF0Y2hJdGVtcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkZ2VzOiBbXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuZWRnZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvY2tlbjogbm9uVGVybWluYWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQ6IGFsbFN0YXRlTm9kZXNNYXAuZ2V0KGtleSkhLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yKGxldCB0ZXJtaW5hbCBvZiB0ZXJtaW5hbHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbWF0Y2hJdGVtczogTFJTdGF0ZU5vZGVJdGVtW10gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGl0ZW0gb2Ygc3RhdGUuaXRlbXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXRlbS5kZXJpdmF0aW9uLmxlbmd0aCA9PT0gaXRlbS5tYXRjaFBvaW50KWNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihpdGVtLmRlcml2YXRpb25baXRlbS5tYXRjaFBvaW50XSA9PT0gdGVybWluYWxbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoSXRlbXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9uVGVybWluYWw6IGl0ZW0ubm9uVGVybWluYWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVyaXZhdGlvbjogaXRlbS5kZXJpdmF0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoUG9pbnQ6IGl0ZW0ubWF0Y2hQb2ludCsxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIW1hdGNoSXRlbXMubGVuZ3RoKWNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGV4cGFuZFN0YXRlSXRlbXMobWF0Y2hJdGVtcyxub25UZXJtaW5hbHMyRGVyaXZhdGlvbk1hcCx0aGlzLmxleGVyKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBzdGF0ZUl0ZW1zVG9TdHJpbmcobWF0Y2hJdGVtcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIWFsbFN0YXRlTm9kZXNNYXAuaGFzKGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsU3RhdGVOb2Rlc01hcC5zZXQoa2V5LHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBhbGxTdGF0ZU5vZGVzTWFwLnNpemUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogbWF0Y2hJdGVtcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkZ2VzOiBbXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuZWRnZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvY2tlbjogdGVybWluYWxbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQ6IGFsbFN0YXRlTm9kZXNNYXAuZ2V0KGtleSkhLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgKmdlbmVyYXRlU3RhdGVQcm9ncmVzc2l2ZShncmFtbWVyczogc3RyaW5nW10sIHBhcnNlU3RhcnROb25UZXJtaW5hbDogc3RyaW5nLG5vblRlcm1pbmFscz86IEFycmF5PHN0cmluZz4sIHRlcm1pbmFscz86IEFycmF5PFtzdHJpbmcsIFJlZ0V4cF0+KTogSXRlcmFibGVJdGVyYXRvcjx1bmRlZmluZWQ+IHtcclxuICAgICAgICBpZiAoIW5vblRlcm1pbmFscyB8fCAhdGVybWluYWxzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRvY2tlbkFuYVJlcyA9IGdldFRvY2tGcm9tU2ltcGxlR3JhbW1lcnMoZ3JhbW1lcnMpO1xyXG4gICAgICAgICAgICBub25UZXJtaW5hbHMgPSB0b2NrZW5BbmFSZXMubm9uVGVybWluYWxzO1xyXG4gICAgICAgICAgICB0ZXJtaW5hbHMgPSB0b2NrZW5BbmFSZXMudGVybWluYWxzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBBdWd1bWVudFN0YXJ0ID0gXCJBdWd1bWVudF9TXCI7XHJcbiAgICAgICAgbG9nLmxvZyhcIltub25UZXJtaW5hbHNdXCIsIG5vblRlcm1pbmFscyk7XHJcbiAgICAgICAgbG9nLmxvZyhcIlt0ZXJtaW5hbHNdXCIsIHRlcm1pbmFscyk7XHJcbiAgICAgICAgdGhpcy5ncmFtbWVycyA9IGdyYW1tZXJzO1xyXG4gICAgICAgIHRoaXMubGV4ZXIgPSBuZXcgTGV4ZXIodGVybWluYWxzLCBub25UZXJtaW5hbHMpO1xyXG5cclxuICAgICAgICBjb25zdCBub25UZXJtaW5hbHMyRGVyaXZhdGlvbk1hcCA9IG5ldyBNYXA8c3RyaW5nLHN0cmluZ1tdW10+KCk7XHJcbiAgICAgICAgZm9yIChsZXQgZ3JhbW1lciBvZiBncmFtbWVycykge1xyXG4gICAgICAgICAgICBncmFtbWVyID0gZ3JhbW1lci5yZXBsYWNlQWxsKC9cXHMvZywgXCJcIik7XHJcbiAgICAgICAgICAgIGNvbnN0IGFyciA9IGdyYW1tZXIuc3BsaXQoLyg9Pil8KC0+KS8pLmZpbHRlcih2ID0+IHYgIT09IFwiPT5cIiAmJiB2ICE9PSBcIi0+XCIgJiYgdik7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vblRlcm1pbmFsID0gYXJyWzBdO1xyXG4gICAgICAgICAgICBjb25zdCBkZXJpdmF0aW9ucyA9IGFyclsxXS5zcGxpdChcInxcIikuZmlsdGVyKHYgPT4gdikubWFwKGRlcml2YXRpb24gPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGV4ZXIhLnNwbGl0RGVyaXZhdGlvbihkZXJpdmF0aW9uKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIG5vblRlcm1pbmFsczJEZXJpdmF0aW9uTWFwLnNldChub25UZXJtaW5hbCwgZGVyaXZhdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsb2cubG9nKG5vblRlcm1pbmFsczJEZXJpdmF0aW9uTWFwKTtcclxuXHJcbiAgICAgICAgdGhpcy5pbml0aWFsU3RhdGVOb2RlID0ge1xyXG4gICAgICAgICAgICBpZDogMCxcclxuICAgICAgICAgICAgaXRlbXM6IFt7XHJcbiAgICAgICAgICAgICAgICBub25UZXJtaW5hbDogQXVndW1lbnRTdGFydCxcclxuICAgICAgICAgICAgICAgIGRlcml2YXRpb246IFtwYXJzZVN0YXJ0Tm9uVGVybWluYWxdLFxyXG4gICAgICAgICAgICAgICAgbWF0Y2hQb2ludDogMCxcclxuICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgIGVkZ2VzOiBbXSxcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBleHBhbmRTdGF0ZUl0ZW1zKHRoaXMuaW5pdGlhbFN0YXRlTm9kZS5pdGVtcyxub25UZXJtaW5hbHMyRGVyaXZhdGlvbk1hcCx0aGlzLmxleGVyKTtcclxuICAgICAgICB5aWVsZDtcclxuICAgICAgICBjb25zdCBhbGxTdGF0ZU5vZGVzTWFwID0gbmV3IE1hcDxzdHJpbmcsTFJTdGF0ZU5vZGU+KCk7XHJcbiAgICAgICAgdGhpcy5hbGxTdGF0ZU5vZGVzTWFwID0gYWxsU3RhdGVOb2Rlc01hcDtcclxuICAgICAgICBhbGxTdGF0ZU5vZGVzTWFwLnNldChzdGF0ZUl0ZW1zVG9TdHJpbmcodGhpcy5pbml0aWFsU3RhdGVOb2RlLml0ZW1zKSx0aGlzLmluaXRpYWxTdGF0ZU5vZGUpO1xyXG4gICAgICAgIGNvbnN0IHZpczogYm9vbGVhbltdID0gW107XHJcbiAgICAgICAgbGV0IHByZVNpemUgPSAwO1xyXG4gICAgICAgIHdoaWxlKHRydWUpIHtcclxuICAgICAgICAgICAgaWYoYWxsU3RhdGVOb2Rlc01hcC5zaXplID09IHByZVNpemUpYnJlYWs7XHJcbiAgICAgICAgICAgIHByZVNpemUgPSBhbGxTdGF0ZU5vZGVzTWFwLnNpemU7XHJcbiAgICAgICAgICAgIGZvcihsZXQgc3RhdGUgb2YgYWxsU3RhdGVOb2Rlc01hcC52YWx1ZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgaWYodmlzW3N0YXRlLmlkXSkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB2aXNbc3RhdGUuaWRdID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIC8vIOWIpOaWreaYr+WQpuWPr+S7peWIsOaOpeWPl+eKtuaAgVxyXG4gICAgICAgICAgICAgICAgZm9yKGxldCBpdGVtIG9mIHN0YXRlLml0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoaXRlbS5ub25UZXJtaW5hbCA9PT0gQXVndW1lbnRTdGFydCAmJiBpdGVtLm1hdGNoUG9pbnQgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuZWRnZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2NrZW46IEVuZGluZ0NoYXJhY3RlcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogLTEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkZ2VzOiBbXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IobGV0IG5vblRlcm1pbmFsIG9mIG5vblRlcm1pbmFscykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBtYXRjaEl0ZW1zOiBMUlN0YXRlTm9kZUl0ZW1bXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaXRlbSBvZiBzdGF0ZS5pdGVtcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihpdGVtLmRlcml2YXRpb24ubGVuZ3RoID09PSBpdGVtLm1hdGNoUG9pbnQpY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGl0ZW0uZGVyaXZhdGlvbltpdGVtLm1hdGNoUG9pbnRdID09PSBub25UZXJtaW5hbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hJdGVtcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub25UZXJtaW5hbDogaXRlbS5ub25UZXJtaW5hbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXJpdmF0aW9uOiBpdGVtLmRlcml2YXRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hQb2ludDogaXRlbS5tYXRjaFBvaW50KzEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZighbWF0Y2hJdGVtcy5sZW5ndGgpY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZXhwYW5kU3RhdGVJdGVtcyhtYXRjaEl0ZW1zLG5vblRlcm1pbmFsczJEZXJpdmF0aW9uTWFwLHRoaXMubGV4ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IHN0YXRlSXRlbXNUb1N0cmluZyhtYXRjaEl0ZW1zKTtcclxuICAgICAgICAgICAgICAgICAgICBpZighYWxsU3RhdGVOb2Rlc01hcC5oYXMoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxTdGF0ZU5vZGVzTWFwLnNldChrZXkse1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGFsbFN0YXRlTm9kZXNNYXAuc2l6ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBtYXRjaEl0ZW1zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRnZXM6IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5lZGdlcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9ja2VuOiBub25UZXJtaW5hbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dDogYWxsU3RhdGVOb2Rlc01hcC5nZXQoa2V5KSEsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgeWllbGQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IobGV0IHRlcm1pbmFsIG9mIHRlcm1pbmFscykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBtYXRjaEl0ZW1zOiBMUlN0YXRlTm9kZUl0ZW1bXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaXRlbSBvZiBzdGF0ZS5pdGVtcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihpdGVtLmRlcml2YXRpb24ubGVuZ3RoID09PSBpdGVtLm1hdGNoUG9pbnQpY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGl0ZW0uZGVyaXZhdGlvbltpdGVtLm1hdGNoUG9pbnRdID09PSB0ZXJtaW5hbFswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hJdGVtcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub25UZXJtaW5hbDogaXRlbS5ub25UZXJtaW5hbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXJpdmF0aW9uOiBpdGVtLmRlcml2YXRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hQb2ludDogaXRlbS5tYXRjaFBvaW50KzEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZighbWF0Y2hJdGVtcy5sZW5ndGgpY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZXhwYW5kU3RhdGVJdGVtcyhtYXRjaEl0ZW1zLG5vblRlcm1pbmFsczJEZXJpdmF0aW9uTWFwLHRoaXMubGV4ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IHN0YXRlSXRlbXNUb1N0cmluZyhtYXRjaEl0ZW1zKTtcclxuICAgICAgICAgICAgICAgICAgICBpZighYWxsU3RhdGVOb2Rlc01hcC5oYXMoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxTdGF0ZU5vZGVzTWFwLnNldChrZXkse1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGFsbFN0YXRlTm9kZXNNYXAuc2l6ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBtYXRjaEl0ZW1zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRnZXM6IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5lZGdlcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9ja2VuOiB0ZXJtaW5hbFswXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dDogYWxsU3RhdGVOb2Rlc01hcC5nZXQoa2V5KSEsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgeWllbGQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgcHJlZGljdElucHV0KGlucHV0OiBzdHJpbmcscHJlZGljdFRhYmxlOiBMUlByZWRpY3RUYWJsZSk6IExSUHJlZGljdFJlc3VsdFRhYmxlIHtcclxuICAgICAgICBpZighdGhpcy5sZXhlcikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbZ2VuZXJhdGVQcmVkaWN0VGFibGVdIG11c3QgY2FsbCBnZW5lcmF0ZVN0YXRlIGJlZm9yZSBnZW5lcmF0ZVByZWRpY3RUYWJsZVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGFuczogTFJQcmVkaWN0UmVzdWx0VGFibGUgPSBbXTtcclxuICAgICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2VBbGwoL1xccy9nLCBcIlwiKTtcclxuICAgICAgICBhbnMucHVzaCh7XHJcbiAgICAgICAgICAgIHN0YWNrOiBbMF0sXHJcbiAgICAgICAgICAgIHN5bWJvbHM6IFtdLFxyXG4gICAgICAgICAgICBpbnB1dDogWy4uLnRoaXMubGV4ZXIuc3BsaXREZXJpdmF0aW9uKGlucHV0KSxFbmRpbmdDaGFyYWN0ZXJdLFxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgd2hpbGUodHJ1ZSkge1xyXG4gICAgICAgICAgICBjb25zdCBzdGVwID0gYW5zW2Fucy5sZW5ndGgtMV07XHJcbiAgICAgICAgICAgIGNvbnN0IG5leHQgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHN0ZXApKSBhcyBMUlByZWRpY3RMaW5lO1xyXG4gICAgICAgICAgICBjb25zdCBzdGF0ZUlkID0gc3RlcC5zdGFja1tzdGVwLnN0YWNrLmxlbmd0aCAtIDFdOyAvL+iOt+WPlueKtuaAgWlkXHJcblxyXG4gICAgICAgICAgICBjb25zdCBwcmVkaWN0TGluZSA9IHByZWRpY3RUYWJsZVtzdGF0ZUlkXTtcclxuICAgICAgICAgICAgbGV0IGVtcHR5Q2hhcmFjdGVyRmxhZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBsZXQgbW92ZSA9IHByZWRpY3RMaW5lLmFjdGlvbi5nZXQoc3RlcC5pbnB1dFswXSkhO1xyXG4gICAgICAgICAgICBpZihtb3ZlLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgbW92ZSBjb2xsaXNpb24gJHttb3ZlfWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKCFtb3ZlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgaWYocHJlZGljdExpbmUuYWN0aW9uLmdldChFbXB0eUNoYXJhY3Rlcik/Lmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vdmUgPSBwcmVkaWN0TGluZS5hY3Rpb24uZ2V0KEVtcHR5Q2hhcmFjdGVyKSE7XHJcbiAgICAgICAgICAgICAgICAgICAgZW1wdHlDaGFyYWN0ZXJGbGFnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBtb3ZlIGlzIGVtcHR5ICR7bW92ZX1gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgY01vdmUgPSBtb3ZlWzBdIGFzIHN0cmluZztcclxuICAgICAgICAgICAgaWYoY01vdmUgPT09IFwiYWNjXCIpIHtcclxuICAgICAgICAgICAgICAgIHN0ZXAubW92ZSA9IFwi5o6l5Y+XXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihjTW92ZS5zdGFydHNXaXRoKFwiU1wiKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gc2hpZnRcclxuICAgICAgICAgICAgICAgIHN0ZXAubW92ZSA9IGDnp7vlhaUke3N0ZXAuaW5wdXRbMF19YDtcclxuICAgICAgICAgICAgICAgIGlmKGVtcHR5Q2hhcmFjdGVyRmxhZykge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHQuc3ltYm9scy5wdXNoKEVtcHR5Q2hhcmFjdGVyKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dC5zeW1ib2xzLnB1c2gobmV4dC5pbnB1dC5zaGlmdCgpISk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBuZXh0LnN0YWNrLnB1c2goTnVtYmVyKGNNb3ZlLnNsaWNlKDEpKSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyByZWR1Y2VcclxuICAgICAgICAgICAgICAgIHN0ZXAubW92ZSA9IGDmoLnmja4ke2NNb3ZlfeW9kue6pmA7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBncmFtbWVyID0gY01vdmUuc2xpY2UoMiwtMSkucmVwbGFjZUFsbCgvXFxzL2csXCJcIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBub25UZXJtaW5hbCA9IGdyYW1tZXIuc3BsaXQoXCItPlwiKVswXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRlcml2YXRpb24gPSB0aGlzLmxleGVyLnNwbGl0RGVyaXZhdGlvbihncmFtbWVyLnNwbGl0KFwiLT5cIilbMV0pO1xyXG4gICAgICAgICAgICAgICAgZm9yKGxldCBpPTA7aTxkZXJpdmF0aW9uLmxlbmd0aDtpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0LnN0YWNrLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHQuc3ltYm9scy5wb3AoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG5leHQuc3ltYm9scy5wdXNoKG5vblRlcm1pbmFsKTtcclxuICAgICAgICAgICAgICAgIC8vIGdvdG9cclxuICAgICAgICAgICAgICAgIGNvbnN0IGxlZnRTdGF0ZUlkID0gc3RlcC5zdGFja1tuZXh0LnN0YWNrLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgalByZWRpY3RMaW5lID0gcHJlZGljdFRhYmxlW2xlZnRTdGF0ZUlkXTtcclxuICAgICAgICAgICAgICAgIG5leHQuc3RhY2sucHVzaChqUHJlZGljdExpbmUuZ290by5nZXQobm9uVGVybWluYWwpIVswXSBhcyB1bmtub3duIGFzIG51bWJlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYW5zLnB1c2gobmV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhbnM7XHJcbiAgICB9XHJcblxyXG4gICAgcHJlZGljdElucHV0V2l0aEFTVChpbnB1dDogc3RyaW5nLHByZWRpY3RUYWJsZTogTFJQcmVkaWN0VGFibGUpOiBMUlByZWRpY3RSZXN1bHRUYWJsZVdpdGhBU1ROb2RlIHtcclxuICAgICAgICBpZighdGhpcy5sZXhlcikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbZ2VuZXJhdGVQcmVkaWN0VGFibGVdIG11c3QgY2FsbCBnZW5lcmF0ZVN0YXRlIGJlZm9yZSBnZW5lcmF0ZVByZWRpY3RUYWJsZVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGFuczogTFJQcmVkaWN0UmVzdWx0VGFibGVXaXRoQVNUTm9kZSA9IFtdO1xyXG4gICAgICAgIGlucHV0ID0gaW5wdXQucmVwbGFjZUFsbCgvXFxzL2csIFwiXCIpO1xyXG4gICAgICAgIGNvbnN0IGxpZD0xO1xyXG4gICAgICAgIGFucy5wdXNoKHtcclxuICAgICAgICAgICAgc3RhY2s6IFswXSxcclxuICAgICAgICAgICAgc3ltYm9sczogW10sXHJcbiAgICAgICAgICAgIGlucHV0OiBbLi4udGhpcy5sZXhlci5zcGxpdERlcml2YXRpb24oaW5wdXQpLEVuZGluZ0NoYXJhY3Rlcl0sXHJcbiAgICAgICAgfSlcclxuICAgICAgICB3aGlsZSh0cnVlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0ZXAgPSBhbnNbYW5zLmxlbmd0aC0xXTtcclxuICAgICAgICAgICAgY29uc3QgbmV4dCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc3RlcCkpIGFzIExSUHJlZGljdExpbmVXaXRoQVNUOyAgLy9cclxuICAgICAgICAgICAgY29uc3Qgc3RhdGVJZCA9IHN0ZXAuc3RhY2tbc3RlcC5zdGFjay5sZW5ndGggLSAxXTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHByZWRpY3RMaW5lID0gcHJlZGljdFRhYmxlW3N0YXRlSWRdO1xyXG4gICAgICAgICAgICBjb25zdCBtb3ZlID0gcHJlZGljdExpbmUuYWN0aW9uLmdldChzdGVwLmlucHV0WzBdKSE7XHJcbiAgICAgICAgICAgIGlmKG1vdmUubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBtb3ZlIGNvbGxpc2lvbiAke21vdmV9YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoIW1vdmUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYG1vdmUgaXMgZW1wdHkgJHttb3ZlfWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBjTW92ZSA9IG1vdmVbMF0gYXMgc3RyaW5nO1xyXG4gICAgICAgICAgICBpZihjTW92ZSA9PT0gXCJhY2NcIikge1xyXG4gICAgICAgICAgICAgICAgc3RlcC5tb3ZlID0gXCLmjqXlj5dcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKGNNb3ZlLnN0YXJ0c1dpdGgoXCJTXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBzaGlmdFxyXG4gICAgICAgICAgICAgICAgc3RlcC5tb3ZlID0gYOenu+WFpSR7c3RlcC5pbnB1dFswXX1gO1xyXG4gICAgICAgICAgICAgICAgLy9uZXh0LnN5bWJvbHMucHVzaChuZXh0LmlucHV0LnNoaWZ0KCkhKTsgLy8gc2h1ZnTmioppbnB1dOeahOesrOS4gOS4quWFg+e0oOWIoOmZpOW5tui/lOWbnlxyXG4gICAgICAgICAgICAgICAgY29uc3QgbHJub2RlOkxSQVNUTm9kZT17aWQ6bGlkLHRleHQ6bmV4dC5pbnB1dC5zaGlmdCgpISxjaGVjazogZmFsc2V9XHJcbiAgICAgICAgICAgICAgICBuZXh0LnN5bWJvbHMucHVzaChscm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgbmV4dC5zdGFjay5wdXNoKE51bWJlcihjTW92ZS5zbGljZSgxKSkpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gcmVkdWNlXHJcbiAgICAgICAgICAgICAgICBzdGVwLm1vdmUgPSBg5qC55o2uJHtjTW92ZX3lvZLnuqZgO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZ3JhbW1lciA9IGNNb3ZlLnNsaWNlKDIsLTEpLnJlcGxhY2VBbGwoL1xccy9nLFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgbm9uVGVybWluYWwgPSBncmFtbWVyLnNwbGl0KFwiLT5cIilbMF07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkZXJpdmF0aW9uID0gdGhpcy5sZXhlci5zcGxpdERlcml2YXRpb24oZ3JhbW1lci5zcGxpdChcIi0+XCIpWzFdKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudE5vZGU6TFJBU1ROb2RlPXtpZDpsaWQrMSx0ZXh0Om5vblRlcm1pbmFsLGNoZWNrOiBmYWxzZX07XHJcbiAgICAgICAgICAgICAgICBpZighcGFyZW50Tm9kZS5jaGlsZHJlbil7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5jaGlsZHJlbj1bXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvcihsZXQgaT0wO2k8ZGVyaXZhdGlvbi5sZW5ndGg7aSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dC5zdGFjay5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhuZXh0LnN5bWJvbHMpXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtcD0gbmV4dC5zeW1ib2xzLnBvcCgpITtcclxuICAgICAgICAgICAgICAgICAgICAvLyB0ZW1wIS5wYXJlbnQ9cGFyZW50Tm9kZSAvLy9cclxuICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiMTIzXCIscGFyZW50Tm9kZS5jaGlsZHJlbik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5jaGlsZHJlbiEucHVzaCh0ZW1wKTtcclxuICAgICAgICAgICAgICAgICAgICAvL2NvbnN0IGxybm9kZT1uZXh0LnN5bWJvbHMucG9wKCkgYXMgTFJBU1ROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJrYW56aGVsaTExMTExMTFcIixscm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGxybm9kZSEuYWRkUGFyZW50KHBhcmVudE5vZGUpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBuZXh0LnN5bWJvbHMucHVzaChwYXJlbnROb2RlKTtcclxuICAgICAgICAgICAgICAgIC8vIGdvdG9cclxuICAgICAgICAgICAgICAgIGNvbnN0IGxlZnRTdGF0ZUlkID0gc3RlcC5zdGFja1tuZXh0LnN0YWNrLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgalByZWRpY3RMaW5lID0gcHJlZGljdFRhYmxlW2xlZnRTdGF0ZUlkXTtcclxuICAgICAgICAgICAgICAgIG5leHQuc3RhY2sucHVzaChqUHJlZGljdExpbmUuZ290by5nZXQobm9uVGVybWluYWwpIVswXSBhcyB1bmtub3duIGFzIG51bWJlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYW5zLnB1c2gobmV4dCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyAoYW5zIGFzIGFueSkuYXN0Tm9kZSA9IFxyXG4gICAgICAgIHJldHVybiBhbnM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgICpwcmVkaWN0SW5wdXRQcm9ncmVzc2l2ZShpbnB1dDogc3RyaW5nLHByZWRpY3RUYWJsZTogTFJQcmVkaWN0VGFibGUpOiBJdGVyYWJsZUl0ZXJhdG9yPExSUHJlZGljdFJlc3VsdFRhYmxlV2l0aEFTVE5vZGU+IHtcclxuICAgICAgICBpZighdGhpcy5sZXhlcikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbZ2VuZXJhdGVQcmVkaWN0VGFibGVdIG11c3QgY2FsbCBnZW5lcmF0ZVN0YXRlIGJlZm9yZSBnZW5lcmF0ZVByZWRpY3RUYWJsZVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGFuczogTFJQcmVkaWN0UmVzdWx0VGFibGVXaXRoQVNUTm9kZSA9IFtdO1xyXG4gICAgICAgIGlucHV0ID0gaW5wdXQucmVwbGFjZUFsbCgvXFxzL2csIFwiXCIpO1xyXG4gICAgICAgIGNvbnN0IGxpZD0xMDA7XHJcbiAgICAgICAgYW5zLnB1c2goe1xyXG4gICAgICAgICAgICBzdGFjazogWzBdLFxyXG4gICAgICAgICAgICBzeW1ib2xzOiBbXSxcclxuICAgICAgICAgICAgaW5wdXQ6IFsuLi50aGlzLmxleGVyLnNwbGl0RGVyaXZhdGlvbihpbnB1dCksRW5kaW5nQ2hhcmFjdGVyXSxcclxuICAgICAgICB9KVxyXG4gICAgICAgIHlpZWxkIGFucztcclxuICAgICAgICB3aGlsZSh0cnVlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0ZXAgPSBhbnNbYW5zLmxlbmd0aC0xXTtcclxuICAgICAgICAgICAgY29uc3QgbmV4dCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc3RlcCkpIGFzIExSUHJlZGljdExpbmVXaXRoQVNUOyAgLy9cclxuICAgICAgICAgICAgY29uc3Qgc3RhdGVJZCA9IHN0ZXAuc3RhY2tbc3RlcC5zdGFjay5sZW5ndGggLSAxXTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHByZWRpY3RMaW5lID0gcHJlZGljdFRhYmxlW3N0YXRlSWRdO1xyXG4gICAgICAgICAgICBjb25zdCBtb3ZlID0gcHJlZGljdExpbmUuYWN0aW9uLmdldChzdGVwLmlucHV0WzBdKSE7XHJcbiAgICAgICAgICAgIGlmKG1vdmUubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBtb3ZlIGNvbGxpc2lvbiAke21vdmV9YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoIW1vdmUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYG1vdmUgaXMgZW1wdHkgJHttb3ZlfWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBjTW92ZSA9IG1vdmVbMF0gYXMgc3RyaW5nO1xyXG4gICAgICAgICAgICBpZihjTW92ZSA9PT0gXCJhY2NcIikge1xyXG4gICAgICAgICAgICAgICAgc3RlcC5tb3ZlID0gXCLmjqXlj5dcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKGNNb3ZlLnN0YXJ0c1dpdGgoXCJTXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBzaGlmdFxyXG4gICAgICAgICAgICAgICAgc3RlcC5tb3ZlID0gYOenu+WFpSR7c3RlcC5pbnB1dFswXX1gO1xyXG4gICAgICAgICAgICAgICAgLy9uZXh0LnN5bWJvbHMucHVzaChuZXh0LmlucHV0LnNoaWZ0KCkhKTsgLy8gc2h1ZnTmioppbnB1dOeahOesrOS4gOS4quWFg+e0oOWIoOmZpOW5tui/lOWbnlxyXG4gICAgICAgICAgICAgICAgY29uc3QgbHJub2RlOkxSQVNUTm9kZT17aWQ6bGlkLHRleHQ6bmV4dC5pbnB1dC5zaGlmdCgpISxjaGVjazogZmFsc2V9XHJcbiAgICAgICAgICAgICAgICBuZXh0LnN5bWJvbHMucHVzaChscm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgbmV4dC5zdGFjay5wdXNoKE51bWJlcihjTW92ZS5zbGljZSgxKSkpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gcmVkdWNlXHJcbiAgICAgICAgICAgICAgICBzdGVwLm1vdmUgPSBg5qC55o2uJHtjTW92ZX3lvZLnuqZgO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZ3JhbW1lciA9IGNNb3ZlLnNsaWNlKDIsLTEpLnJlcGxhY2VBbGwoL1xccy9nLFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgbm9uVGVybWluYWwgPSBncmFtbWVyLnNwbGl0KFwiLT5cIilbMF07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkZXJpdmF0aW9uID0gdGhpcy5sZXhlci5zcGxpdERlcml2YXRpb24oZ3JhbW1lci5zcGxpdChcIi0+XCIpWzFdKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudE5vZGU6TFJBU1ROb2RlPXtpZDpsaWQtMSx0ZXh0Om5vblRlcm1pbmFsLGNoZWNrOiBmYWxzZX07XHJcbiAgICAgICAgICAgICAgICBpZighcGFyZW50Tm9kZS5jaGlsZHJlbil7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5jaGlsZHJlbj1bXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvcihsZXQgaT0wO2k8ZGVyaXZhdGlvbi5sZW5ndGg7aSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dC5zdGFjay5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhuZXh0LnN5bWJvbHMpXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtcD0gbmV4dC5zeW1ib2xzLnBvcCgpITtcclxuICAgICAgICAgICAgICAgICAgICAvLyB0ZW1wIS5wYXJlbnQ9cGFyZW50Tm9kZSAvLy9cclxuICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiMTIzXCIscGFyZW50Tm9kZS5jaGlsZHJlbik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5jaGlsZHJlbiEucHVzaCh0ZW1wKTtcclxuICAgICAgICAgICAgICAgICAgICAvL2NvbnN0IGxybm9kZT1uZXh0LnN5bWJvbHMucG9wKCkgYXMgTFJBU1ROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJrYW56aGVsaTExMTExMTFcIixscm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGxybm9kZSEuYWRkUGFyZW50KHBhcmVudE5vZGUpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBuZXh0LnN5bWJvbHMucHVzaChwYXJlbnROb2RlKTtcclxuICAgICAgICAgICAgICAgIC8vIGdvdG9cclxuICAgICAgICAgICAgICAgIGNvbnN0IGxlZnRTdGF0ZUlkID0gc3RlcC5zdGFja1tuZXh0LnN0YWNrLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgalByZWRpY3RMaW5lID0gcHJlZGljdFRhYmxlW2xlZnRTdGF0ZUlkXTtcclxuICAgICAgICAgICAgICAgIG5leHQuc3RhY2sucHVzaChqUHJlZGljdExpbmUuZ290by5nZXQobm9uVGVybWluYWwpIVswXSBhcyB1bmtub3duIGFzIG51bWJlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgeWllbGQgYW5zO1xyXG4gICAgICAgICAgICBhbnMucHVzaChuZXh0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gKGFucyBhcyBhbnkpLmFzdE5vZGUgPSBcclxuICAgICAgICByZXR1cm4gYW5zO1xyXG4gICAgfVxyXG5cclxuICAgIGdlbmVyYXRlTFIwUHJlZGljdFRhYmxlKCkge1xyXG4gICAgICAgIGlmKCF0aGlzLmluaXRpYWxTdGF0ZU5vZGUgfHwgIXRoaXMuYWxsU3RhdGVOb2Rlc01hcCB8fCAhdGhpcy5sZXhlcikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbZ2VuZXJhdGVQcmVkaWN0VGFibGVdIG11c3QgY2FsbCBnZW5lcmF0ZVN0YXRlIGJlZm9yZSBnZW5lcmF0ZVByZWRpY3RUYWJsZVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcHJlZGljdFRhYmxlOiBMUlByZWRpY3RUYWJsZSA9IFtdO1xyXG4gICAgICAgIGZvcihsZXQgc3RhdGVOb2RlIG9mIHRoaXMuYWxsU3RhdGVOb2Rlc01hcC52YWx1ZXMoKSkge1xyXG4gICAgICAgICAgICBsZXQgcHJlZGljdExpbmU6IExSUHJlZGljdFRhYmxlTGluZSA9IHtcclxuICAgICAgICAgICAgICAgIGlkOiBzdGF0ZU5vZGUuaWQsXHJcbiAgICAgICAgICAgICAgICBhY3Rpb246IG5ldyBNYXAoKSxcclxuICAgICAgICAgICAgICAgIGdvdG86IG5ldyBNYXAoKVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBmb3IobGV0IG5vblRlcm1pbmFsICBvZiB0aGlzLmxleGVyLm5vblRlcm1pbmFscykge1xyXG4gICAgICAgICAgICAgICAgcHJlZGljdExpbmUuZ290by5zZXQobm9uVGVybWluYWwsW10pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvcihsZXQgdGVybWluYWwgIG9mIHRoaXMubGV4ZXIudGVybWluYWxzKSB7XHJcbiAgICAgICAgICAgICAgICBwcmVkaWN0TGluZS5hY3Rpb24uc2V0KHRlcm1pbmFsWzBdLFtdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBwcmVkaWN0TGluZS5hY3Rpb24uc2V0KEVuZGluZ0NoYXJhY3RlcixbXSk7XHJcbiAgICAgICAgICAgIGZvcihsZXQgZWRnZSBvZiBzdGF0ZU5vZGUuZWRnZXMpIHtcclxuICAgICAgICAgICAgICAgIGlmKGVkZ2UudG9ja2VuID09PSBFbmRpbmdDaGFyYWN0ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcmVkaWN0TGluZS5hY3Rpb24uZ2V0KGVkZ2UudG9ja2VuKSEucHVzaChcImFjY1wiKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmKHRoaXMubGV4ZXIuaXNUZXJtaW5hbChlZGdlLnRvY2tlbikpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcmVkaWN0TGluZS5hY3Rpb24uZ2V0KGVkZ2UudG9ja2VuKSEucHVzaChgUyR7ZWRnZS5uZXh0LmlkfWApO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBwcmVkaWN0TGluZS5nb3RvLmdldChlZGdlLnRvY2tlbikhLnB1c2goZWRnZS5uZXh0LmlkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IobGV0IGl0ZW0gb2Ygc3RhdGVOb2RlLml0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgICBpZihpdGVtLm1hdGNoUG9pbnQgPT09IGl0ZW0uZGVyaXZhdGlvbi5sZW5ndGgpIHsgLy8gcmVkdWNlXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCB0ZXJtaW5hbCBvZiB0aGlzLmxleGVyLnRlcm1pbmFscykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmVkaWN0TGluZS5hY3Rpb24uZ2V0KHRlcm1pbmFsWzBdKSEucHVzaChgcigke2l0ZW0ubm9uVGVybWluYWx9IC0+ICR7aXRlbS5kZXJpdmF0aW9uLmpvaW4oXCIgXCIpfSlgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIXByZWRpY3RMaW5lLmFjdGlvbi5nZXQoRW5kaW5nQ2hhcmFjdGVyKT8ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZWRpY3RMaW5lLmFjdGlvbi5nZXQoRW5kaW5nQ2hhcmFjdGVyKSEucHVzaChgcigke2l0ZW0ubm9uVGVybWluYWx9IC0+ICR7aXRlbS5kZXJpdmF0aW9uLmpvaW4oXCIgXCIpfSlgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcHJlZGljdFRhYmxlLnB1c2gocHJlZGljdExpbmUpO1xyXG4gICAgICAgIH0gICBcclxuICAgICAgICBwcmVkaWN0VGFibGUuc29ydCgoYSxiKT0+e1xyXG4gICAgICAgICAgICByZXR1cm4gYS5pZCAtIGIuaWQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHByZWRpY3RUYWJsZTtcclxuICAgIH1cclxuICAgIC8vICpnZW5lcmF0ZUxSMFByZWRpY3RUYWJsZVByb2dyZXNzaXZlKCk6IEl0ZXJhYmxlSXRlcmF0b3I8UnVsZSB8IFByb2Nlc3M8UHJlZGljdFRhYmxlPj4ge1xyXG4gICAgLy8gICAgIGlmKCF0aGlzLmluaXRpYWxTdGF0ZU5vZGUgfHwgIXRoaXMuYWxsU3RhdGVOb2Rlc01hcCB8fCAhdGhpcy5sZXhlcikge1xyXG4gICAgLy8gICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbZ2VuZXJhdGVQcmVkaWN0VGFibGVdIG11c3QgY2FsbCBnZW5lcmF0ZVN0YXRlIGJlZm9yZSBnZW5lcmF0ZVByZWRpY3RUYWJsZVwiKTtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyAgICAgeWllbGQgW1xyXG4gICAgLy8gICAgICAgICBcIjEuIOWvuSBGaXJzdCh1KSDkuK3nmoTmiYDmnInnu4jnu5PnrKYgYSDvvIjkuI3lkKsgzrUg77yJ77yM572uIE1bQSwgYV0gPSBBIC0+IHVcIixcclxuICAgIC8vICAgICAgICAgXCIyLiDoi6UgRmlyc3QodSkg5ZCrIM61IO+8jOWImeWvuSBGb2xsb3coQSkg5Lit55qE5omA5pyJ56ym5Y+3IGEg77yI5Y+v5ZCrICQg77yJ77yM572uIE1bQSwgYV0gPSBBIC0+IHVcIlxyXG4gICAgLy8gICAgIF1cclxuICAgIC8vICAgICBjb25zdCBwcmVkaWN0VGFibGU6IExSUHJlZGljdFRhYmxlID0gW107XHJcbiAgICAvLyAgICAgZm9yKGxldCBzdGF0ZU5vZGUgb2YgdGhpcy5hbGxTdGF0ZU5vZGVzTWFwLnZhbHVlcygpKSB7XHJcbiAgICAvLyAgICAgICAgIGxldCBwcmVkaWN0TGluZTogTFJQcmVkaWN0VGFibGVMaW5lID0ge1xyXG4gICAgLy8gICAgICAgICAgICAgaWQ6IHN0YXRlTm9kZS5pZCxcclxuICAgIC8vICAgICAgICAgICAgIGFjdGlvbjogbmV3IE1hcCgpLFxyXG4gICAgLy8gICAgICAgICAgICAgZ290bzogbmV3IE1hcCgpXHJcbiAgICAvLyAgICAgICAgIH07XHJcbiAgICAvLyAgICAgICAgIGZvcihsZXQgbm9uVGVybWluYWwgIG9mIHRoaXMubGV4ZXIubm9uVGVybWluYWxzKSB7XHJcbiAgICAvLyAgICAgICAgICAgICBwcmVkaWN0TGluZS5nb3RvLnNldChub25UZXJtaW5hbCxbXSk7XHJcbiAgICAvLyAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgZm9yKGxldCB0ZXJtaW5hbCAgb2YgdGhpcy5sZXhlci50ZXJtaW5hbHMpIHtcclxuICAgIC8vICAgICAgICAgICAgIHByZWRpY3RMaW5lLmFjdGlvbi5zZXQodGVybWluYWxbMF0sW10pO1xyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgIHByZWRpY3RMaW5lLmFjdGlvbi5zZXQoRW5kaW5nQ2hhcmFjdGVyLFtdKTtcclxuICAgIC8vICAgICAgICAgZm9yKGxldCBlZGdlIG9mIHN0YXRlTm9kZS5lZGdlcykge1xyXG4gICAgLy8gICAgICAgICAgICAgaWYoZWRnZS50b2NrZW4gPT09IEVuZGluZ0NoYXJhY3Rlcikge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByZWRpY3RMaW5lLmFjdGlvbi5nZXQoZWRnZS50b2NrZW4pIS5wdXNoKFwiYWNjXCIpO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgLy8gICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICAgICAgaWYodGhpcy5sZXhlci5pc1Rlcm1pbmFsKGVkZ2UudG9ja2VuKSkge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByZWRpY3RMaW5lLmFjdGlvbi5nZXQoZWRnZS50b2NrZW4pIS5wdXNoKGBTJHtlZGdlLm5leHQuaWR9YCk7XHJcbiAgICAvLyAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIHByZWRpY3RMaW5lLmdvdG8uZ2V0KGVkZ2UudG9ja2VuKSEucHVzaChlZGdlLm5leHQuaWQpO1xyXG4gICAgLy8gICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgIGZvcihsZXQgaXRlbSBvZiBzdGF0ZU5vZGUuaXRlbXMpIHtcclxuICAgIC8vICAgICAgICAgICAgIGlmKGl0ZW0ubWF0Y2hQb2ludCA9PT0gaXRlbS5kZXJpdmF0aW9uLmxlbmd0aCkgeyAvLyByZWR1Y2VcclxuICAgIC8vICAgICAgICAgICAgICAgICBmb3IobGV0IHRlcm1pbmFsIG9mIHRoaXMubGV4ZXIudGVybWluYWxzKSB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIHByZWRpY3RMaW5lLmFjdGlvbi5nZXQodGVybWluYWxbMF0pIS5wdXNoKGByKCR7aXRlbS5ub25UZXJtaW5hbH0gPT4gJHtpdGVtLmRlcml2YXRpb24uam9pbihcIiBcIil9KWApO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICBwcmVkaWN0VGFibGUucHVzaChwcmVkaWN0TGluZSk7XHJcbiAgICAvLyAgICAgfSAgIFxyXG4gICAgLy8gICAgIHByZWRpY3RUYWJsZS5zb3J0KChhLGIpPT57XHJcbiAgICAvLyAgICAgICAgIHJldHVybiBhLmlkIC0gYi5pZDtcclxuICAgIC8vICAgICB9KTtcclxuICAgIC8vICAgICByZXR1cm4gcHJlZGljdFRhYmxlO1xyXG4gICAgLy8gfVxyXG4gICAgZ2VuZXJhdGVTTFIxUHJlZGljdFRhYmxlKCkge1xyXG4gICAgICAgIGlmKCF0aGlzLmluaXRpYWxTdGF0ZU5vZGUgfHwgIXRoaXMuYWxsU3RhdGVOb2Rlc01hcCB8fCAhdGhpcy5sZXhlciB8fCAhdGhpcy5ncmFtbWVycykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbZ2VuZXJhdGVQcmVkaWN0VGFibGVdIG11c3QgY2FsbCBnZW5lcmF0ZVN0YXRlIGJlZm9yZSBnZW5lcmF0ZVByZWRpY3RUYWJsZVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZm9sbG93U2V0ID0gZ2VuZXJhdGVGbGxvd1NldCh0aGlzLmxleGVyLHRoaXMuZ3JhbW1lcnMpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGZvbGxvd1NldClcclxuICAgICAgICBjb25zdCBwcmVkaWN0VGFibGU6IExSUHJlZGljdFRhYmxlID0gW107XHJcbiAgICAgICAgZm9yKGxldCBzdGF0ZU5vZGUgb2YgdGhpcy5hbGxTdGF0ZU5vZGVzTWFwLnZhbHVlcygpKSB7XHJcbiAgICAgICAgICAgIGxldCBwcmVkaWN0TGluZTogTFJQcmVkaWN0VGFibGVMaW5lID0ge1xyXG4gICAgICAgICAgICAgICAgaWQ6IHN0YXRlTm9kZS5pZCxcclxuICAgICAgICAgICAgICAgIGFjdGlvbjogbmV3IE1hcCgpLFxyXG4gICAgICAgICAgICAgICAgZ290bzogbmV3IE1hcCgpXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGZvcihsZXQgbm9uVGVybWluYWwgIG9mIHRoaXMubGV4ZXIubm9uVGVybWluYWxzKSB7XHJcbiAgICAgICAgICAgICAgICBwcmVkaWN0TGluZS5nb3RvLnNldChub25UZXJtaW5hbCxbXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yKGxldCB0ZXJtaW5hbCAgb2YgdGhpcy5sZXhlci50ZXJtaW5hbHMpIHtcclxuICAgICAgICAgICAgICAgIHByZWRpY3RMaW5lLmFjdGlvbi5zZXQodGVybWluYWxbMF0sW10pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHByZWRpY3RMaW5lLmFjdGlvbi5zZXQoRW5kaW5nQ2hhcmFjdGVyLFtdKTtcclxuICAgICAgICAgICAgZm9yKGxldCBlZGdlIG9mIHN0YXRlTm9kZS5lZGdlcykge1xyXG4gICAgICAgICAgICAgICAgaWYoZWRnZS50b2NrZW4gPT09IEVuZGluZ0NoYXJhY3Rlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZWRpY3RMaW5lLmFjdGlvbi5nZXQoZWRnZS50b2NrZW4pIS5wdXNoKFwiYWNjXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5sZXhlci5pc1Rlcm1pbmFsKGVkZ2UudG9ja2VuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZWRpY3RMaW5lLmFjdGlvbi5nZXQoZWRnZS50b2NrZW4pIS5wdXNoKGBTJHtlZGdlLm5leHQuaWR9YCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZWRpY3RMaW5lLmdvdG8uZ2V0KGVkZ2UudG9ja2VuKSEucHVzaChlZGdlLm5leHQuaWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvcihsZXQgaXRlbSBvZiBzdGF0ZU5vZGUuaXRlbXMpIHtcclxuICAgICAgICAgICAgICAgIGlmKGl0ZW0ubWF0Y2hQb2ludCA9PT0gaXRlbS5kZXJpdmF0aW9uLmxlbmd0aCkgeyAvLyByZWR1Y2VcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZm9sbG93Q2g6IHN0cmluZ1tdID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBzZXRMaW5lIG9mIGZvbGxvd1NldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihzZXRMaW5lLnRvY2tlbiA9PT0gaXRlbS5ub25UZXJtaW5hbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9sbG93Q2ggPSBbLi4uc2V0TGluZS50ZXJtaW5hbHMudmFsdWVzKCldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCB0ZXJtaW5hbCBvZiBmb2xsb3dDaCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmVkaWN0TGluZS5hY3Rpb24uZ2V0KHRlcm1pbmFsWzBdKSEucHVzaChgcigke2l0ZW0ubm9uVGVybWluYWx9IC0+ICR7aXRlbS5kZXJpdmF0aW9uLmpvaW4oXCIgXCIpfSlgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcHJlZGljdFRhYmxlLnB1c2gocHJlZGljdExpbmUpO1xyXG4gICAgICAgIH0gICBcclxuICAgICAgICBwcmVkaWN0VGFibGUuc29ydCgoYSxiKT0+e1xyXG4gICAgICAgICAgICByZXR1cm4gYS5pZCAtIGIuaWQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHByZWRpY3RUYWJsZTtcclxuICAgIH1cclxuICAgIGdldCBzdGF0ZUdyYXBoKCk6IExSU3RhdGVOb2RlRm9yU2hvdyB7XHJcbiAgICAgICAgY29uc3QgdmlzOiBhbnlbXSA9IFtdO1xyXG4gICAgICAgIGNvbnN0IGRmcyA9IChub2RlOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgaWYodmlzW25vZGUuaWRdKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlzW25vZGUuaWRdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld05vZGU6IGFueSA9IHt9O1xyXG4gICAgICAgICAgICB2aXNbbm9kZS5pZF0gPSBuZXdOb2RlO1xyXG4gICAgICAgICAgICBuZXdOb2RlLmlkID0gbm9kZS5pZDtcclxuICAgICAgICAgICAgbGV0IHJlZHVjZU51bSA9IDA7XHJcbiAgICAgICAgICAgIGxldCBzaGlmdE51bT0wO1xyXG4gICAgICAgICAgICBub2RlLml0ZW1zPy5mb3JFYWNoKChpdGVtOiBMUlN0YXRlTm9kZUl0ZW0pPT57XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYoaXRlbS5tYXRjaFBvaW50ID09PSBpdGVtLmRlcml2YXRpb24ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVkdWNlTnVtKys7XHJcbiAgICAgICAgICAgICAgICB9ZWxzZSBpZih0aGlzLmxleGVyPy5pc1Rlcm1pbmFsKGl0ZW0uZGVyaXZhdGlvbltpdGVtLm1hdGNoUG9pbnRdKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hpZnROdW0rKztcclxuICAgICAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIGlmKHJlZHVjZU51bT49Mikge1xyXG4gICAgICAgICAgICAgICAgbmV3Tm9kZS5pc0NvbGxpc2lvbiA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZihyZWR1Y2VOdW0+PTEgJiYgc2hpZnROdW0+MCl7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3Tm9kZS5pc0NvbGxpc2lvbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICBuZXdOb2RlLmlzQ29sbGlzaW9uID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbmV3Tm9kZS5pdGVtcyA9IG5vZGUuaXRlbXMubWFwKChpdGVtOiBhbnkpPT57XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGVJdGVtVG9TdHJpbmcoaXRlbSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIG5ld05vZGUuZWRnZXMgPSBbXTtcclxuICAgICAgICAgICAgZm9yKGxldCBlZGdlIG9mIG5vZGUuZWRnZXMpIHtcclxuICAgICAgICAgICAgICAgIG5ld05vZGUuZWRnZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9ja2VuOiBlZGdlLnRvY2tlbixcclxuICAgICAgICAgICAgICAgICAgICBuZXh0OiBkZnMoZWRnZS5uZXh0KVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3Tm9kZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRmcyh0aGlzLmluaXRpYWxTdGF0ZU5vZGUpO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBzdGF0ZUl0ZW1zVG9TdHJpbmcoaXRlbXM6IExSU3RhdGVOb2RlSXRlbVtdKTogc3RyaW5nIHsgXHJcbiAgICBpdGVtcyAgPSBpdGVtcy5zb3J0KChhLGIpPT57XHJcbiAgICAgICAgaWYoYTxiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIDE7XHJcbiAgICB9KVxyXG4gICAgbGV0IGFucyA9IFwiXCI7XHJcbiAgICBmb3IobGV0IGl0ZW0gb2YgaXRlbXMpIHtcclxuICAgICAgICBhbnMgKz0gYCAke3N0YXRlSXRlbVRvU3RyaW5nKGl0ZW0pfWA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYW5zO1xyXG59XHJcbmZ1bmN0aW9uIHN0YXRlSXRlbVRvU3RyaW5nKGl0ZW06IExSU3RhdGVOb2RlSXRlbSk6IHN0cmluZyB7IFxyXG4gICAgbGV0IGFucyA9IGAke2l0ZW0ubm9uVGVybWluYWx9IC0+IGA7XHJcbiAgICBmb3IobGV0IGk9MDtpPGl0ZW0uZGVyaXZhdGlvbi5sZW5ndGg7aSsrKSB7XHJcbiAgICAgICAgaWYoaT09PWl0ZW0ubWF0Y2hQb2ludCkge1xyXG4gICAgICAgICAgICBpZighaSlhbnMgKz0gXCIgXCI7XHJcbiAgICAgICAgICAgIGFucyArPSBcIsK3IFwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihpPT09aXRlbS5kZXJpdmF0aW9uLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgYW5zICs9IGAke2l0ZW0uZGVyaXZhdGlvbltpXX1gO1xyXG4gICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgYW5zICs9IGAke2l0ZW0uZGVyaXZhdGlvbltpXX0gYDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoaSA9PT0gKGl0ZW0uZGVyaXZhdGlvbi5sZW5ndGgtMSkgJiYgaXRlbS5tYXRjaFBvaW50ID09PSBpdGVtLmRlcml2YXRpb24ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGFucyArPSBcIsK3XCJcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYW5zO1xyXG59XHJcblxyXG4vLyBcclxuZnVuY3Rpb24gZXhwYW5kU3RhdGVJdGVtcyhpdGVtczogTFJTdGF0ZU5vZGVJdGVtW10sbm9uVGVybWluYWxzMkRlcml2YXRpb25NYXA6IE1hcDxzdHJpbmcsc3RyaW5nW11bXT4sbGV4ZXI6IExleGVyKSB7XHJcbiAgICBmb3IobGV0IGk9MDtpPGl0ZW1zLmxlbmd0aDtpKyspIHsgLy8g5a+56aG56ZuG5Lit55qE5q+P5LiA5Liq6aG56YGN5Y6GXHJcbiAgICAgICAgY29uc3QgaXRlbSA9IGl0ZW1zW2ldO1xyXG4gICAgICAgIGNvbnN0IHRvY2tlbiA9IGl0ZW0uZGVyaXZhdGlvbltpdGVtLm1hdGNoUG9pbnRdOy8v5Y+WICog5LmL5ZCO55qE5a2X56ymLOavlOWmglMnLT4qU++8jOWPllNcclxuICAgICAgICBpZihsZXhlci5pc1Rlcm1pbmFsKHRvY2tlbikpY29udGludWU7IC8vIOWmguaenOaYr+e7iOe7k+espuWwsei3s+i/h1xyXG4gICAgICAgIGNvbnN0IGRlcml2YXRpb25zID0gbm9uVGVybWluYWxzMkRlcml2YXRpb25NYXAuZ2V0KHRvY2tlbik7ICAvLyDlj5blh7rpnZ7nu4jnu5PnrKbnmoTmjqjlr7zlvI8s5q+U5aaCUy0+QULvvIzlj5ZB77yMQlxyXG4gICAgICAgIC8vIOi/memHjOeahGRlcml2YXRpb25z5bCx5piv5o6l5LiL5p2l6K+t5rOV5YiG5p6Q5bCG5Lya6KeB5Yiw55qE5a2X56ym77yM5Y+v6IO95piv6Z2e57uI57uT56ym77yM5Y+v6IO95piv57uI57uT56ymXHJcbiAgICAgICAgZGVyaXZhdGlvbnM/LmZvckVhY2goZGVyaXZhdGlvbj0+e1xyXG4gICAgICAgICAgICBsZXQgaW5GbGFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGZvcihsZXQgakl0ZW0gb2YgaXRlbXMpIHsvL+mBjeWOhumhuembhuacieayoeaciei/meS4qumhuSzlpoLmnpzmnInlkI7pnaLlsLHkuI3opoHliqDlhaVcclxuICAgICAgICAgICAgICAgIGlmKGpJdGVtLm5vblRlcm1pbmFsID09PSB0b2NrZW4gJiYgakl0ZW0ubWF0Y2hQb2ludCA9PT0gMCkgeyAvL+WmguaenOmhuembhumHjOebruWJjeWtmOWcqOi/meS4qnRva2Vu55qE6aG577yM5LiU5Y2g5L2N54K55Lmf5pivMOeahOWMlu+8jOi/mOS4jeiDveehruWumuS4gOWumuaYr+i/meS4qumhuVxyXG4gICAgICAgICAgICAgICAgICAgIGlmKGpJdGVtLmRlcml2YXRpb24ubGVuZ3RoICE9PSBkZXJpdmF0aW9uLmxlbmd0aCljb250aW51ZTsgLy8g5aaC5p6c5LuW5Lus5o6o5a+85Ye65p2l55qE5L2T5LiN5LiA5qC36ZW/5bCx5LiN5piv5LiA5Liq5L2TXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVxdWFsID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGk9MDtpPGRlcml2YXRpb24ubGVuZ3RoO2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihqSXRlbS5kZXJpdmF0aW9uW2ldICE9PSBkZXJpdmF0aW9uW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcXVhbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZXF1YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5GbGFnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKGluRmxhZylyZXR1cm4gO1xyXG4gICAgICAgICAgICBpdGVtcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIG5vblRlcm1pbmFsOiB0b2NrZW4sXHJcbiAgICAgICAgICAgICAgICBtYXRjaFBvaW50OiAwLFxyXG4gICAgICAgICAgICAgICAgZGVyaXZhdGlvbixcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgZ2VuZXJhdGVGaXJzdFNldCwgeyBnZXREZXJpdmF0aW9uRmlyc3RTZXQgfSBmcm9tIFwiQC9maXJzdFNldFwiO1xyXG5pbXBvcnQgZ2VuZXJhdGVGbGxvd1NldCBmcm9tIFwiQC9mb2xsb3dTZXRcIjtcclxuaW1wb3J0IExleGVyIGZyb20gXCJAL2xleGVyXCI7XHJcbmltcG9ydCB7IGdldFRvY2tGcm9tU2ltcGxlR3JhbW1lcnMgfSBmcm9tIFwiQC9zaW1wbGVHcmFtbWVySGVscGVyXCI7XHJcbmltcG9ydCB7IEdyYW1tZXJzLCBMUlByZWRpY3RMaW5lLCBMUlByZWRpY3RSZXN1bHRUYWJsZSwgTFJQcmVkaWN0VGFibGVMaW5lLCBMUlByZWRpY3RUYWJsZSwgTFJTdGF0ZU5vZGUsIExSU3RhdGVOb2RlRm9yU2hvdywgTFJTdGF0ZU5vZGVJdGVtLCBQcmVkaWN0VGFibGUsIFByb2Nlc3MsIFJ1bGUsIE5vblRlcm1pbmFsLCBHcmFtbWVyU2V0TGluZSwgR3JhbW1lclNldCwgUHJlZGljdExpbmUgfSBmcm9tIFwiQC90eXBlcy90eXBlXCI7XHJcbmltcG9ydCB7IEVtcHR5Q2hhcmFjdGVyLCBFbmRpbmdDaGFyYWN0ZXIgfSBmcm9tIFwiQC91dGlscy9jb25zdFwiO1xyXG5pbXBvcnQgbG9nIGZyb20gXCJAL3V0aWxzL2xvZ1wiO1xyXG5jb25zdCBBdWd1bWVudFN0YXJ0ID0gXCJBdWd1bWVudF9TXCI7XHJcbmV4cG9ydCBjbGFzcyBMUjFQYXJzZXIgIHtcclxuICAgIGluaXRpYWxTdGF0ZU5vZGU6IExSU3RhdGVOb2RlIHwgbnVsbDtcclxuICAgIGFsbFN0YXRlTm9kZXNNYXA/OiBNYXA8c3RyaW5nLExSU3RhdGVOb2RlPjtcclxuICAgIGxleGVyPzogTGV4ZXI7XHJcbiAgICBncmFtbWVycz86IHN0cmluZ1tdO1xyXG4gICAgZmlyc3RTZXQ/OiBHcmFtbWVyU2V0O1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5pbml0aWFsU3RhdGVOb2RlID0gbnVsbDtcclxuICAgIH1cclxuICAgIGdlbmVyYXRlU3RhdGUoZ3JhbW1lcnM6IHN0cmluZ1tdLCBwYXJzZVN0YXJ0Tm9uVGVybWluYWw6IHN0cmluZyxub25UZXJtaW5hbHM/OiBBcnJheTxzdHJpbmc+LCB0ZXJtaW5hbHM/OiBBcnJheTxbc3RyaW5nLCBSZWdFeHBdPikge1xyXG4gICAgICAgIGlmICghbm9uVGVybWluYWxzIHx8ICF0ZXJtaW5hbHMpIHtcclxuICAgICAgICAgICAgY29uc3QgdG9ja2VuQW5hUmVzID0gZ2V0VG9ja0Zyb21TaW1wbGVHcmFtbWVycyhncmFtbWVycyk7XHJcbiAgICAgICAgICAgIG5vblRlcm1pbmFscyA9IHRvY2tlbkFuYVJlcy5ub25UZXJtaW5hbHM7XHJcbiAgICAgICAgICAgIHRlcm1pbmFscyA9IHRvY2tlbkFuYVJlcy50ZXJtaW5hbHM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxvZy5sb2coXCJbbm9uVGVybWluYWxzXVwiLCBub25UZXJtaW5hbHMpO1xyXG4gICAgICAgIGxvZy5sb2coXCJbdGVybWluYWxzXVwiLCB0ZXJtaW5hbHMpO1xyXG4gICAgICAgIHRoaXMuZ3JhbW1lcnMgPSBncmFtbWVycztcclxuICAgICAgICB0aGlzLmxleGVyID0gbmV3IExleGVyKHRlcm1pbmFscywgbm9uVGVybWluYWxzKTtcclxuICAgICAgICB0aGlzLmZpcnN0U2V0ID0gZ2VuZXJhdGVGaXJzdFNldCh0aGlzLmxleGVyLGdyYW1tZXJzKTtcclxuXHJcbiAgICAgICAgY29uc3Qgbm9uVGVybWluYWxzMkRlcml2YXRpb25NYXAgPSBuZXcgTWFwPHN0cmluZyxzdHJpbmdbXVtdPigpO1xyXG4gICAgICAgIGZvciAobGV0IGdyYW1tZXIgb2YgZ3JhbW1lcnMpIHtcclxuICAgICAgICAgICAgZ3JhbW1lciA9IGdyYW1tZXIucmVwbGFjZUFsbCgvXFxzL2csIFwiXCIpO1xyXG4gICAgICAgICAgICBjb25zdCBhcnIgPSBncmFtbWVyLnNwbGl0KC8oPT4pfCgtPikvKS5maWx0ZXIodiA9PiB2ICE9PSBcIj0+XCIgJiYgdiAhPT0gXCItPlwiICYmIHYpO1xyXG4gICAgICAgICAgICBjb25zdCBub25UZXJtaW5hbCA9IGFyclswXTtcclxuICAgICAgICAgICAgY29uc3QgZGVyaXZhdGlvbnMgPSBhcnJbMV0uc3BsaXQoXCJ8XCIpLmZpbHRlcih2ID0+IHYpLm1hcChkZXJpdmF0aW9uID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxleGVyIS5zcGxpdERlcml2YXRpb24oZGVyaXZhdGlvbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBub25UZXJtaW5hbHMyRGVyaXZhdGlvbk1hcC5zZXQobm9uVGVybWluYWwsIGRlcml2YXRpb25zKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbG9nLmxvZyhub25UZXJtaW5hbHMyRGVyaXZhdGlvbk1hcCk7XHJcblxyXG4gICAgICAgIHRoaXMuaW5pdGlhbFN0YXRlTm9kZSA9IHtcclxuICAgICAgICAgICAgaWQ6IDAsXHJcbiAgICAgICAgICAgIGl0ZW1zOiBbe1xyXG4gICAgICAgICAgICAgICAgbm9uVGVybWluYWw6IEF1Z3VtZW50U3RhcnQsXHJcbiAgICAgICAgICAgICAgICBkZXJpdmF0aW9uOiBbcGFyc2VTdGFydE5vblRlcm1pbmFsXSxcclxuICAgICAgICAgICAgICAgIG1hdGNoUG9pbnQ6IDAsXHJcbiAgICAgICAgICAgICAgICBsb29rQWhlYWRUb2NrZW46IFtFbmRpbmdDaGFyYWN0ZXJdLFxyXG4gICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgZWRnZXM6IFtdLFxyXG4gICAgICAgIH1cclxuICAgICAgICBleHBhbmRTdGF0ZUl0ZW1zKHRoaXMuaW5pdGlhbFN0YXRlTm9kZS5pdGVtcyxub25UZXJtaW5hbHMyRGVyaXZhdGlvbk1hcCx0aGlzLmxleGVyLHRoaXMuZmlyc3RTZXQpO1xyXG4gICAgICAgIGNvbnN0IGFsbFN0YXRlTm9kZXNNYXAgPSBuZXcgTWFwPHN0cmluZyxMUlN0YXRlTm9kZT4oKTtcclxuICAgICAgICB0aGlzLmFsbFN0YXRlTm9kZXNNYXAgPSBhbGxTdGF0ZU5vZGVzTWFwO1xyXG4gICAgICAgIGFsbFN0YXRlTm9kZXNNYXAuc2V0KHN0YXRlSXRlbXNUb1N0cmluZyh0aGlzLmluaXRpYWxTdGF0ZU5vZGUuaXRlbXMpLHRoaXMuaW5pdGlhbFN0YXRlTm9kZSk7XHJcbiAgICAgICAgY29uc3QgdmlzOiBib29sZWFuW10gPSBbXTtcclxuICAgICAgICBsZXQgcHJlU2l6ZSA9IDA7XHJcbiAgICAgICAgd2hpbGUodHJ1ZSkge1xyXG4gICAgICAgICAgICBpZihhbGxTdGF0ZU5vZGVzTWFwLnNpemUgPT0gcHJlU2l6ZSlicmVhaztcclxuICAgICAgICAgICAgcHJlU2l6ZSA9IGFsbFN0YXRlTm9kZXNNYXAuc2l6ZTtcclxuICAgICAgICAgICAgZm9yKGxldCBzdGF0ZSBvZiBhbGxTdGF0ZU5vZGVzTWFwLnZhbHVlcygpKSB7XHJcbiAgICAgICAgICAgICAgICBpZih2aXNbc3RhdGUuaWRdKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIHZpc1tzdGF0ZS5pZF0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgLy8g5Yik5pat5piv5ZCm5Y+v5Lul5Yiw5o6l5Y+X54q25oCBXHJcbiAgICAgICAgICAgICAgICBmb3IobGV0IGl0ZW0gb2Ygc3RhdGUuaXRlbXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihpdGVtLm5vblRlcm1pbmFsID09PSBBdWd1bWVudFN0YXJ0ICYmIGl0ZW0ubWF0Y2hQb2ludCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5lZGdlcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvY2tlbjogRW5kaW5nQ2hhcmFjdGVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAtMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRnZXM6IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvcihsZXQgbm9uVGVybWluYWwgb2Ygbm9uVGVybWluYWxzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1hdGNoSXRlbXM6IExSU3RhdGVOb2RlSXRlbVtdID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBpdGVtIG9mIHN0YXRlLml0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGl0ZW0uZGVyaXZhdGlvbi5sZW5ndGggPT09IGl0ZW0ubWF0Y2hQb2ludCljb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXRlbS5kZXJpdmF0aW9uW2l0ZW0ubWF0Y2hQb2ludF0gPT09IG5vblRlcm1pbmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaEl0ZW1zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vblRlcm1pbmFsOiBpdGVtLm5vblRlcm1pbmFsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcml2YXRpb246IGl0ZW0uZGVyaXZhdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFBvaW50OiBpdGVtLm1hdGNoUG9pbnQrMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb29rQWhlYWRUb2NrZW46IGl0ZW0ubG9va0FoZWFkVG9ja2VuLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIW1hdGNoSXRlbXMubGVuZ3RoKWNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGV4cGFuZFN0YXRlSXRlbXMobWF0Y2hJdGVtcyxub25UZXJtaW5hbHMyRGVyaXZhdGlvbk1hcCx0aGlzLmxleGVyLHRoaXMuZmlyc3RTZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IHN0YXRlSXRlbXNUb1N0cmluZyhtYXRjaEl0ZW1zKTtcclxuICAgICAgICAgICAgICAgICAgICBpZighYWxsU3RhdGVOb2Rlc01hcC5oYXMoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxTdGF0ZU5vZGVzTWFwLnNldChrZXkse1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGFsbFN0YXRlTm9kZXNNYXAuc2l6ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBtYXRjaEl0ZW1zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRnZXM6IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5lZGdlcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9ja2VuOiBub25UZXJtaW5hbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dDogYWxsU3RhdGVOb2Rlc01hcC5nZXQoa2V5KSEsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IobGV0IHRlcm1pbmFsIG9mIHRlcm1pbmFscykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBtYXRjaEl0ZW1zOiBMUlN0YXRlTm9kZUl0ZW1bXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaXRlbSBvZiBzdGF0ZS5pdGVtcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihpdGVtLmRlcml2YXRpb24ubGVuZ3RoID09PSBpdGVtLm1hdGNoUG9pbnQpY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGl0ZW0uZGVyaXZhdGlvbltpdGVtLm1hdGNoUG9pbnRdID09PSB0ZXJtaW5hbFswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hJdGVtcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub25UZXJtaW5hbDogaXRlbS5ub25UZXJtaW5hbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXJpdmF0aW9uOiBpdGVtLmRlcml2YXRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hQb2ludDogaXRlbS5tYXRjaFBvaW50KzEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9va0FoZWFkVG9ja2VuOiBpdGVtLmxvb2tBaGVhZFRvY2tlbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCFtYXRjaEl0ZW1zLmxlbmd0aCljb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICBleHBhbmRTdGF0ZUl0ZW1zKG1hdGNoSXRlbXMsbm9uVGVybWluYWxzMkRlcml2YXRpb25NYXAsdGhpcy5sZXhlcix0aGlzLmZpcnN0U2V0KTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBzdGF0ZUl0ZW1zVG9TdHJpbmcobWF0Y2hJdGVtcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIWFsbFN0YXRlTm9kZXNNYXAuaGFzKGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsU3RhdGVOb2Rlc01hcC5zZXQoa2V5LHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBhbGxTdGF0ZU5vZGVzTWFwLnNpemUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogbWF0Y2hJdGVtcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkZ2VzOiBbXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuZWRnZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvY2tlbjogdGVybWluYWxbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQ6IGFsbFN0YXRlTm9kZXNNYXAuZ2V0KGtleSkhLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHJlZGljdElucHV0KGlucHV0OiBzdHJpbmcscHJlZGljdFRhYmxlOiBMUlByZWRpY3RUYWJsZSk6IExSUHJlZGljdFJlc3VsdFRhYmxlIHtcclxuICAgICAgICBpZighdGhpcy5sZXhlcikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbZ2VuZXJhdGVQcmVkaWN0VGFibGVdIG11c3QgY2FsbCBnZW5lcmF0ZVN0YXRlIGJlZm9yZSBnZW5lcmF0ZVByZWRpY3RUYWJsZVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGFuczogTFJQcmVkaWN0UmVzdWx0VGFibGUgPSBbXTtcclxuICAgICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2VBbGwoL1xccy9nLCBcIlwiKTtcclxuICAgICAgICBhbnMucHVzaCh7XHJcbiAgICAgICAgICAgIHN0YWNrOiBbMF0sXHJcbiAgICAgICAgICAgIHN5bWJvbHM6IFtdLFxyXG4gICAgICAgICAgICBpbnB1dDogWy4uLnRoaXMubGV4ZXIuc3BsaXREZXJpdmF0aW9uKGlucHV0KSxFbmRpbmdDaGFyYWN0ZXJdLFxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgd2hpbGUodHJ1ZSkge1xyXG4gICAgICAgICAgICBjb25zdCBzdGVwID0gYW5zW2Fucy5sZW5ndGgtMV07XHJcbiAgICAgICAgICAgIGNvbnN0IG5leHQgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHN0ZXApKSBhcyBMUlByZWRpY3RMaW5lO1xyXG4gICAgICAgICAgICBjb25zdCBzdGF0ZUlkID0gc3RlcC5zdGFja1tzdGVwLnN0YWNrLmxlbmd0aCAtIDFdO1xyXG5cclxuICAgICAgICAgICAgbGV0IHByZWRpY3RMaW5lOiBMUlByZWRpY3RUYWJsZUxpbmUgfCB1bmRlZmluZWQgPSBnZXRJdGVtQnlJZEZyb21BcnIocHJlZGljdFRhYmxlLHN0YXRlSWQpO1xyXG4gICAgICAgICAgICBmb3IobGV0IGxpbmUgb2YgcHJlZGljdFRhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICBpZihsaW5lLmlkID09PSBzdGF0ZUlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJlZGljdExpbmUgPSBsaW5lO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKCFwcmVkaWN0TGluZSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBbcHJlZGljdF0gc3RhdGVJZDogJHtzdGF0ZUlkfSDnmoTpooTmtYvooYzmib7kuI3liLBgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgZW1wdHlDaGFyYWN0ZXJGbGFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGxldCBtb3ZlOiBhbnlbXSA9IFtdO1xyXG4gICAgICAgICAgICBtb3ZlID0gcHJlZGljdExpbmUuYWN0aW9uLmdldChzdGVwLmlucHV0WzBdKSE7XHJcbiAgICAgICAgICAgIGlmKG1vdmUubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBtb3ZlIGNvbGxpc2lvbiAke21vdmV9YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoIW1vdmUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBpZihwcmVkaWN0TGluZS5hY3Rpb24uZ2V0KEVtcHR5Q2hhcmFjdGVyKT8ubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW92ZSA9IHByZWRpY3RMaW5lLmFjdGlvbi5nZXQoRW1wdHlDaGFyYWN0ZXIpITtcclxuICAgICAgICAgICAgICAgICAgICBlbXB0eUNoYXJhY3RlckZsYWcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYG1vdmUgaXMgZW1wdHkgJHttb3ZlfWApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBjTW92ZSA9IG1vdmVbMF0gYXMgc3RyaW5nO1xyXG4gICAgICAgICAgICBpZihjTW92ZSA9PT0gXCJhY2NcIikge1xyXG4gICAgICAgICAgICAgICAgc3RlcC5tb3ZlID0gXCLmjqXlj5dcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKGNNb3ZlLnN0YXJ0c1dpdGgoXCJTXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBzaGlmdFxyXG4gICAgICAgICAgICAgICAgc3RlcC5tb3ZlID0gYOenu+WFpSR7c3RlcC5pbnB1dFswXX1gO1xyXG4gICAgICAgICAgICAgICAgaWYoZW1wdHlDaGFyYWN0ZXJGbGFnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dC5zeW1ib2xzLnB1c2goRW1wdHlDaGFyYWN0ZXIpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0LnN5bWJvbHMucHVzaChuZXh0LmlucHV0LnNoaWZ0KCkhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG5leHQuc3RhY2sucHVzaChOdW1iZXIoY01vdmUuc2xpY2UoMSkpKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIHJlZHVjZVxyXG4gICAgICAgICAgICAgICAgc3RlcC5tb3ZlID0gYOagueaNriR7Y01vdmV95b2S57qmYDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGdyYW1tZXIgPSBjTW92ZS5zbGljZSgyLC0xKS5yZXBsYWNlQWxsKC9cXHMvZyxcIlwiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5vblRlcm1pbmFsID0gZ3JhbW1lci5zcGxpdChcIi0+XCIpWzBdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGVyaXZhdGlvbiA9IHRoaXMubGV4ZXIuc3BsaXREZXJpdmF0aW9uKGdyYW1tZXIuc3BsaXQoXCItPlwiKVsxXSk7XHJcbiAgICAgICAgICAgICAgICBmb3IobGV0IGk9MDtpPGRlcml2YXRpb24ubGVuZ3RoO2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHQuc3RhY2sucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dC5zeW1ib2xzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbmV4dC5zeW1ib2xzLnB1c2gobm9uVGVybWluYWwpO1xyXG4gICAgICAgICAgICAgICAgLy8gZ290b1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbGVmdFN0YXRlSWQgPSBzdGVwLnN0YWNrW25leHQuc3RhY2subGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBqUHJlZGljdExpbmUgPSBnZXRJdGVtQnlJZEZyb21BcnIocHJlZGljdFRhYmxlLGxlZnRTdGF0ZUlkKTs7XHJcbiAgICAgICAgICAgICAgICBuZXh0LnN0YWNrLnB1c2goalByZWRpY3RMaW5lLmdvdG8uZ2V0KG5vblRlcm1pbmFsKSFbMF0gYXMgdW5rbm93biBhcyBudW1iZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFucy5wdXNoKG5leHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYW5zO1xyXG4gICAgfVxyXG4gICAgbWVyZ2VOZXdOb2RlKG5vZGU6IExSU3RhdGVOb2RlLGFkZE5vZGU6IExSU3RhdGVOb2RlKSB7XHJcbiAgICAgICAgbm9kZS5pZCA9IE51bWJlcihgJHtub2RlLmlkfSR7YWRkTm9kZS5pZH1gKTtcclxuICAgICAgICBpZihub2RlLml0ZW1zLmxlbmd0aCAhPT0gYWRkTm9kZS5pdGVtcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiW21lcmdlTmV3Tm9kZV0g5ZCI5bm25qC45b+D6IqC54K55Ye66ZSZXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IobGV0IGk9MDtpPG5vZGUuaXRlbXMubGVuZ3RoO2krKykge1xyXG4gICAgICAgICAgICBjb25zdCBpdGVtID0gbm9kZS5pdGVtc1tpXTtcclxuICAgICAgICAgICAgY29uc3QgYWRkSXRlbSA9IGFkZE5vZGUuaXRlbXNbaV07XHJcbiAgICAgICAgICAgIGZvcihsZXQgY2hhIG9mIGFkZEl0ZW0ubG9va0FoZWFkVG9ja2VuISkge1xyXG4gICAgICAgICAgICAgICAgaWYoaXRlbS5sb29rQWhlYWRUb2NrZW4/LmluZGV4T2YoY2hhKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtLmxvb2tBaGVhZFRvY2tlbi5wdXNoKGNoYSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgbm9kZS5hY2MgPSBub2RlLmFjYyB8fCBhZGROb2RlLmFjYztcclxuICAgIH1cclxuICAgIGdlbmVyYXRlTEFMUlByZWRpY3RUYWJsZSgpIHtcclxuICAgICAgICBpZighdGhpcy5pbml0aWFsU3RhdGVOb2RlIHx8ICF0aGlzLmFsbFN0YXRlTm9kZXNNYXAgfHwgIXRoaXMubGV4ZXIpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiW2dlbmVyYXRlUHJlZGljdFRhYmxlXSBtdXN0IGNhbGwgZ2VuZXJhdGVTdGF0ZSBiZWZvcmUgZ2VuZXJhdGVQcmVkaWN0VGFibGVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOWQiOW5tumhuembhlxyXG4gICAgICAgIGNvbnN0IG1lcmdlTWFwID0gbmV3IE1hcDxzdHJpbmcsTFJTdGF0ZU5vZGU+KCk7XHJcbiAgICAgICAgY29uc3Qgam9pbk1hcERmcyA9ICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgdmlzID0gbmV3IE1hcDxudW1iZXIsYm9vbGVhbj4oKTtcclxuICAgICAgICAgICAgY29uc3QgZGZzID0gKG5vZGU6IExSU3RhdGVOb2RlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZih2aXMuaGFzKG5vZGUuaWQpKXJldHVybiA7XHJcbiAgICAgICAgICAgICAgICB2aXMuc2V0KG5vZGUuaWQsdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBzdGF0ZUl0ZW1zVG9TdHJpbmcobm9kZS5pdGVtcyxmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgbmV3Tm9kZTogTFJTdGF0ZU5vZGUgfCB1bmRlZmluZWQgPSBtZXJnZU1hcC5nZXQoa2V5KTtcclxuICAgICAgICAgICAgICAgIGlmKCFuZXdOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3Tm9kZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IG5vZGUuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWRnZXM6IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY2M6IG5vZGUuYWNjXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGl0ZW0gb2Ygbm9kZS5pdGVtcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdOb2RlLml0ZW1zLnB1c2goSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShpdGVtKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBuZXdOb2RlIS5lZGdlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIG1lcmdlTWFwLnNldChrZXksbmV3Tm9kZSEpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lcmdlTmV3Tm9kZShuZXdOb2RlLG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yKGxldCBlZGdlIG9mIG5vZGUuZWRnZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZnMoZWRnZS5uZXh0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZnModGhpcy5pbml0aWFsU3RhdGVOb2RlISk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGpvaW5NYXBEZnMoKTtcclxuXHJcblxyXG4gICAgICAgIGNvbnN0IGlkMmlkTWFwID0gbmV3IE1hcDxudW1iZXIsbnVtYmVyPigpO1xyXG4gICAgICAgIGNvbnN0IE1hcE1hcERmcyA9ICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgdmlzID0gbmV3IE1hcDxudW1iZXIsYm9vbGVhbj4oKTtcclxuICAgICAgICAgICAgY29uc3QgZGZzID0gKG5vZGU6IExSU3RhdGVOb2RlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZih2aXMuaGFzKG5vZGUuaWQpKXJldHVybiA7XHJcbiAgICAgICAgICAgICAgICB2aXMuc2V0KG5vZGUuaWQsdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBzdGF0ZUl0ZW1zVG9TdHJpbmcobm9kZS5pdGVtcyxmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBpZDJpZE1hcC5zZXQobm9kZS5pZCxtZXJnZU1hcC5nZXQoa2V5KSEuaWQpO1xyXG4gICAgICAgICAgICAgICAgZm9yKGxldCBlZGdlIG9mIG5vZGUuZWRnZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZnMoZWRnZS5uZXh0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZnModGhpcy5pbml0aWFsU3RhdGVOb2RlISk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIE1hcE1hcERmcygpO1xyXG4gICAgICAgIGNvbnN0IGkyaSA9IChpZDogbnVtYmVyKTpudW1iZXIgPT4gaWQyaWRNYXAuZ2V0KGlkKSE7XHJcbiAgICAgICAgY29uc3QgcHJlZGljdFRhYmxlOiBMUlByZWRpY3RUYWJsZSA9IFtdO1xyXG4gICAgICAgIGNvbnN0IHVzZWQgPSBuZXcgTWFwPG51bWJlcixib29sZWFuPigpO1xyXG4gICAgICAgIGZvcihsZXQgc3RhdGVOb2RlIG9mIHRoaXMuYWxsU3RhdGVOb2Rlc01hcC52YWx1ZXMoKSkge1xyXG4gICAgICAgICAgICBpZih1c2VkLmdldChpMmkoc3RhdGVOb2RlLmlkKSkpY29udGludWU7XHJcbiAgICAgICAgICAgIHVzZWQuc2V0KGkyaShzdGF0ZU5vZGUuaWQpLHRydWUpO1xyXG4gICAgICAgICAgICBsZXQgcHJlZGljdExpbmU6IExSUHJlZGljdFRhYmxlTGluZSA9IHtcclxuICAgICAgICAgICAgICAgIGlkOiBpMmkoc3RhdGVOb2RlLmlkKSxcclxuICAgICAgICAgICAgICAgIGFjdGlvbjogbmV3IE1hcCgpLFxyXG4gICAgICAgICAgICAgICAgZ290bzogbmV3IE1hcCgpXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGZvcihsZXQgbm9uVGVybWluYWwgIG9mIHRoaXMubGV4ZXIubm9uVGVybWluYWxzKSB7XHJcbiAgICAgICAgICAgICAgICBwcmVkaWN0TGluZS5nb3RvLnNldChub25UZXJtaW5hbCxbXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yKGxldCB0ZXJtaW5hbCAgb2YgdGhpcy5sZXhlci50ZXJtaW5hbHMpIHtcclxuICAgICAgICAgICAgICAgIHByZWRpY3RMaW5lLmFjdGlvbi5zZXQodGVybWluYWxbMF0sW10pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHByZWRpY3RMaW5lLmFjdGlvbi5zZXQoRW5kaW5nQ2hhcmFjdGVyLFtdKTtcclxuICAgICAgICAgICAgZm9yKGxldCBlZGdlIG9mIHN0YXRlTm9kZS5lZGdlcykge1xyXG4gICAgICAgICAgICAgICAgaWYoZWRnZS50b2NrZW4gPT09IEVuZGluZ0NoYXJhY3Rlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZWRpY3RMaW5lLmFjdGlvbi5nZXQoZWRnZS50b2NrZW4pIS5wdXNoKFwiYWNjXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5sZXhlci5pc1Rlcm1pbmFsKGVkZ2UudG9ja2VuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZWRpY3RMaW5lLmFjdGlvbi5nZXQoZWRnZS50b2NrZW4pIS5wdXNoKGBTJHtpMmkoZWRnZS5uZXh0LmlkKX1gKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJlZGljdExpbmUuZ290by5nZXQoZWRnZS50b2NrZW4pIS5wdXNoKGkyaShlZGdlLm5leHQuaWQpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgaXRlbXM6IExSU3RhdGVOb2RlSXRlbVtdID0gc3RhdGVOb2RlLml0ZW1zO1xyXG4gICAgICAgICAgICBpZihpMmkoc3RhdGVOb2RlLmlkKSAhPT0gc3RhdGVOb2RlLmlkKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtcyA9IG1lcmdlTWFwLmdldChzdGF0ZUl0ZW1zVG9TdHJpbmcoc3RhdGVOb2RlLml0ZW1zLGZhbHNlKSkhLml0ZW1zO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvcihsZXQgaXRlbSBvZiBpdGVtcykge1xyXG4gICAgICAgICAgICAgICAgaWYoaXRlbS5tYXRjaFBvaW50ID09PSBpdGVtLmRlcml2YXRpb24ubGVuZ3RoKSB7IC8vIHJlZHVjZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmKGl0ZW0ubm9uVGVybWluYWwgPT09IEF1Z3VtZW50U3RhcnQpY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCB0b2NrZW4gb2YgaXRlbS5sb29rQWhlYWRUb2NrZW4hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZWRpY3RMaW5lLmFjdGlvbi5nZXQodG9ja2VuKSEucHVzaChgcigke2l0ZW0ubm9uVGVybWluYWx9IC0+ICR7aXRlbS5kZXJpdmF0aW9uLmpvaW4oXCIgXCIpfSlgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcHJlZGljdFRhYmxlLnB1c2gocHJlZGljdExpbmUpO1xyXG4gICAgICAgIH0gICBcclxuICAgICAgICBwcmVkaWN0VGFibGUuc29ydCgoYSxiKT0+e1xyXG4gICAgICAgICAgICByZXR1cm4gYS5pZCAtIGIuaWQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHByZWRpY3RUYWJsZTtcclxuICAgIH1cclxuICAgIGdlbmVyYXRlTFIxUHJlZGljdFRhYmxlKCkge1xyXG4gICAgICAgIGlmKCF0aGlzLmluaXRpYWxTdGF0ZU5vZGUgfHwgIXRoaXMuYWxsU3RhdGVOb2Rlc01hcCB8fCAhdGhpcy5sZXhlcikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbZ2VuZXJhdGVQcmVkaWN0VGFibGVdIG11c3QgY2FsbCBnZW5lcmF0ZVN0YXRlIGJlZm9yZSBnZW5lcmF0ZVByZWRpY3RUYWJsZVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcHJlZGljdFRhYmxlOiBMUlByZWRpY3RUYWJsZSA9IFtdO1xyXG4gICAgICAgIGZvcihsZXQgc3RhdGVOb2RlIG9mIHRoaXMuYWxsU3RhdGVOb2Rlc01hcC52YWx1ZXMoKSkge1xyXG4gICAgICAgICAgICBsZXQgcHJlZGljdExpbmU6IExSUHJlZGljdFRhYmxlTGluZSA9IHtcclxuICAgICAgICAgICAgICAgIGlkOiBzdGF0ZU5vZGUuaWQsXHJcbiAgICAgICAgICAgICAgICBhY3Rpb246IG5ldyBNYXAoKSxcclxuICAgICAgICAgICAgICAgIGdvdG86IG5ldyBNYXAoKVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBmb3IobGV0IG5vblRlcm1pbmFsICBvZiB0aGlzLmxleGVyLm5vblRlcm1pbmFscykge1xyXG4gICAgICAgICAgICAgICAgcHJlZGljdExpbmUuZ290by5zZXQobm9uVGVybWluYWwsW10pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvcihsZXQgdGVybWluYWwgIG9mIHRoaXMubGV4ZXIudGVybWluYWxzKSB7XHJcbiAgICAgICAgICAgICAgICBwcmVkaWN0TGluZS5hY3Rpb24uc2V0KHRlcm1pbmFsWzBdLFtdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBwcmVkaWN0TGluZS5hY3Rpb24uc2V0KEVuZGluZ0NoYXJhY3RlcixbXSk7XHJcbiAgICAgICAgICAgIGZvcihsZXQgZWRnZSBvZiBzdGF0ZU5vZGUuZWRnZXMpIHtcclxuICAgICAgICAgICAgICAgIGlmKGVkZ2UudG9ja2VuID09PSBFbmRpbmdDaGFyYWN0ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcmVkaWN0TGluZS5hY3Rpb24uZ2V0KGVkZ2UudG9ja2VuKSEucHVzaChcImFjY1wiKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmKHRoaXMubGV4ZXIuaXNUZXJtaW5hbChlZGdlLnRvY2tlbikpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcmVkaWN0TGluZS5hY3Rpb24uZ2V0KGVkZ2UudG9ja2VuKSEucHVzaChgUyR7ZWRnZS5uZXh0LmlkfWApO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBwcmVkaWN0TGluZS5nb3RvLmdldChlZGdlLnRvY2tlbikhLnB1c2goZWRnZS5uZXh0LmlkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IobGV0IGl0ZW0gb2Ygc3RhdGVOb2RlLml0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgICBpZihpdGVtLm1hdGNoUG9pbnQgPT09IGl0ZW0uZGVyaXZhdGlvbi5sZW5ndGgpIHsgLy8gcmVkdWNlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoaXRlbS5ub25UZXJtaW5hbCA9PT0gQXVndW1lbnRTdGFydCljb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IobGV0IHRvY2tlbiBvZiBpdGVtLmxvb2tBaGVhZFRvY2tlbiEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJlZGljdExpbmUuYWN0aW9uLmdldCh0b2NrZW4pIS5wdXNoKGByKCR7aXRlbS5ub25UZXJtaW5hbH0gLT4gJHtpdGVtLmRlcml2YXRpb24uam9pbihcIiBcIil9KWApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBwcmVkaWN0VGFibGUucHVzaChwcmVkaWN0TGluZSk7XHJcbiAgICAgICAgfSAgIFxyXG4gICAgICAgIHByZWRpY3RUYWJsZS5zb3J0KChhLGIpPT57XHJcbiAgICAgICAgICAgIHJldHVybiBhLmlkIC0gYi5pZDtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcHJlZGljdFRhYmxlO1xyXG4gICAgfVxyXG4gICAgZ2V0IHN0YXRlR3JhcGgoKTogTFJTdGF0ZU5vZGVGb3JTaG93IHtcclxuICAgICAgICBjb25zdCB2aXM6IGFueVtdID0gW107XHJcbiAgICAgICAgY29uc3QgZGZzID0gKG5vZGU6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBpZih2aXNbbm9kZS5pZF0pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2aXNbbm9kZS5pZF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgbmV3Tm9kZTogYW55ID0ge307XHJcbiAgICAgICAgICAgIHZpc1tub2RlLmlkXSA9IG5ld05vZGU7XHJcbiAgICAgICAgICAgIG5ld05vZGUuaWQgPSBub2RlLmlkO1xyXG4gICAgICAgICAgICBsZXQgcmVkdWNlTnVtID0gMDtcclxuICAgICAgICAgICAgbm9kZS5pdGVtcz8uZm9yRWFjaCgoaXRlbTogTFJTdGF0ZU5vZGVJdGVtKT0+e1xyXG4gICAgICAgICAgICAgICAgaWYoaXRlbS5tYXRjaFBvaW50ID09PSBpdGVtLmRlcml2YXRpb24ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVkdWNlTnVtKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIGlmKHJlZHVjZU51bT49Mikge1xyXG4gICAgICAgICAgICAgICAgbmV3Tm9kZS5pc0NvbGxpc2lvbiA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBuZXdOb2RlLmlzQ29sbGlzaW9uID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbmV3Tm9kZS5pdGVtcyA9IG5vZGUuaXRlbXMubWFwKChpdGVtOiBhbnkpPT57XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGVJdGVtVG9TdHJpbmcoaXRlbSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIG5ld05vZGUuZWRnZXMgPSBbXTtcclxuICAgICAgICAgICAgZm9yKGxldCBlZGdlIG9mIG5vZGUuZWRnZXMpIHtcclxuICAgICAgICAgICAgICAgIG5ld05vZGUuZWRnZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9ja2VuOiBlZGdlLnRvY2tlbixcclxuICAgICAgICAgICAgICAgICAgICBuZXh0OiBkZnMoZWRnZS5uZXh0KVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3Tm9kZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRmcyh0aGlzLmluaXRpYWxTdGF0ZU5vZGUpO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBzdGF0ZUl0ZW1zVG9TdHJpbmcoaXRlbXM6IExSU3RhdGVOb2RlSXRlbVtdLG5lZWRMb29rQWhlYWQ6IGJvb2xlYW4gPSB0cnVlKTogc3RyaW5nIHsgXHJcbiAgICBpdGVtcyA9IGl0ZW1zLnNvcnQoKGEsYik9PntcclxuICAgICAgICBpZihhPGIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gMTtcclxuICAgIH0pXHJcbiAgICBsZXQgYW5zID0gXCJcIjtcclxuICAgIGZvcihsZXQgaXRlbSBvZiBpdGVtcykge1xyXG4gICAgICAgIGFucyArPSBgICR7c3RhdGVJdGVtVG9TdHJpbmcoaXRlbSxuZWVkTG9va0FoZWFkKX1gO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFucztcclxufVxyXG5mdW5jdGlvbiBzdGF0ZUl0ZW1Ub1N0cmluZyhpdGVtOiBMUlN0YXRlTm9kZUl0ZW0sbmVlZExvb2tBaGVhZDogYm9vbGVhbiA9IHRydWUpOiBzdHJpbmcgeyBcclxuICAgIGxldCBhbnMgPSBgJHtpdGVtLm5vblRlcm1pbmFsfSAtPiBgO1xyXG4gICAgZm9yKGxldCBpPTA7aTxpdGVtLmRlcml2YXRpb24ubGVuZ3RoO2krKykge1xyXG4gICAgICAgIGlmKGk9PT1pdGVtLm1hdGNoUG9pbnQpIHtcclxuICAgICAgICAgICAgaWYoIWkpYW5zICs9IFwiIFwiO1xyXG4gICAgICAgICAgICBhbnMgKz0gXCLCtyBcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoaT09PWl0ZW0uZGVyaXZhdGlvbi5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgIGFucyArPSBgJHtpdGVtLmRlcml2YXRpb25baV19YDtcclxuICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgIGFucyArPSBgJHtpdGVtLmRlcml2YXRpb25baV19IGA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGkgPT09IChpdGVtLmRlcml2YXRpb24ubGVuZ3RoLTEpICYmIGl0ZW0ubWF0Y2hQb2ludCA9PT0gaXRlbS5kZXJpdmF0aW9uLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBhbnMgKz0gXCLCt1wiXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYoaXRlbS5sb29rQWhlYWRUb2NrZW4/Lmxlbmd0aCAmJiBuZWVkTG9va0FoZWFkKSB7XHJcbiAgICAgICAgYW5zICs9IFwiICwgXCIgKyBpdGVtLmxvb2tBaGVhZFRvY2tlbi5qb2luKFwiL1wiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBhbnM7XHJcbn1cclxuZnVuY3Rpb24gZXhwYW5kU3RhdGVJdGVtcyhpdGVtczogTFJTdGF0ZU5vZGVJdGVtW10sbm9uVGVybWluYWxzMkRlcml2YXRpb25NYXA6IE1hcDxzdHJpbmcsc3RyaW5nW11bXT4sbGV4ZXI6IExleGVyLGZpcnN0U2V0OiBHcmFtbWVyU2V0KSB7XHJcbiAgICBmb3IobGV0IGk9MDtpPGl0ZW1zLmxlbmd0aDtpKyspIHtcclxuICAgICAgICBjb25zdCBpdGVtID0gaXRlbXNbaV07XHJcbiAgICAgICAgY29uc3QgdG9ja2VuID0gaXRlbS5kZXJpdmF0aW9uW2l0ZW0ubWF0Y2hQb2ludF07XHJcbiAgICAgICAgaWYobGV4ZXIuaXNUZXJtaW5hbCh0b2NrZW4pKWNvbnRpbnVlO1xyXG4gICAgICAgIGNvbnN0IGRlcml2YXRpb25zID0gbm9uVGVybWluYWxzMkRlcml2YXRpb25NYXAuZ2V0KHRvY2tlbik7XHJcbiAgICAgICAgY29uc3QgZGVyaUZvckZpcnN0U2V0ID0gaXRlbS5kZXJpdmF0aW9uLnNsaWNlKGl0ZW0ubWF0Y2hQb2ludCsxKTtcclxuICAgICAgICBjb25zdCBsb29rQWhlYWRUb2NrZW4gPSBbLi4uZ2V0RGVyaXZhdGlvbkZpcnN0U2V0KGxleGVyLGRlcmlGb3JGaXJzdFNldCxmaXJzdFNldCkudGVybWluYWxzXTtcclxuICAgICAgICBpZighbG9va0FoZWFkVG9ja2VuLmxlbmd0aCB8fCBsb29rQWhlYWRUb2NrZW4uaW5kZXhPZihFbXB0eUNoYXJhY3RlcikhPT0tMSkge1xyXG4gICAgICAgICAgICBsb29rQWhlYWRUb2NrZW4ucHVzaCguLi5pdGVtLmxvb2tBaGVhZFRvY2tlbiEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkZXJpdmF0aW9ucz8uZm9yRWFjaChkZXJpdmF0aW9uPT57XHJcbiAgICAgICAgICAgIGxldCBpbkZsYWcgPSBmYWxzZTtcclxuICAgICAgICAgICAgZm9yKGxldCBqSXRlbSBvZiBpdGVtcykge1xyXG4gICAgICAgICAgICAgICAgaWYoakl0ZW0ubm9uVGVybWluYWwgPT09IHRvY2tlbiAmJiBqSXRlbS5tYXRjaFBvaW50ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoakl0ZW0uZGVyaXZhdGlvbi5sZW5ndGggIT09IGRlcml2YXRpb24ubGVuZ3RoKWNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBlcXVhbCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBpPTA7aTxkZXJpdmF0aW9uLmxlbmd0aDtpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoakl0ZW0uZGVyaXZhdGlvbltpXSAhPT0gZGVyaXZhdGlvbltpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXF1YWwgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmKGVxdWFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluRmxhZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihpbkZsYWcpcmV0dXJuIDtcclxuICAgICAgICAgICAgaXRlbXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBub25UZXJtaW5hbDogdG9ja2VuLFxyXG4gICAgICAgICAgICAgICAgbWF0Y2hQb2ludDogMCxcclxuICAgICAgICAgICAgICAgIGRlcml2YXRpb24sXHJcbiAgICAgICAgICAgICAgICBsb29rQWhlYWRUb2NrZW4sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBnZXRJdGVtQnlJZEZyb21BcnIoYXJyOiBhbnlbXSxpZDogYW55KTogYW55IHtcclxuICAgIGZvcihsZXQgaXRlbSBvZiBhcnIpIHtcclxuICAgICAgICBpZihpdGVtLmlkID09PSBpZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gaXRlbTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgZ2VuZXJhdGVGaXJzdFNldCwgeyBnZW5lcmF0ZUZpcnN0U2V0UHJvZ3Jlc3NpdmUgfSBmcm9tIFwiQC9maXJzdFNldFwiO1xyXG5pbXBvcnQgZ2VuZXJhdGVGbGxvd1NldCwgeyBnZW5lcmF0ZUZsbG93U2V0UHJvZ3Jlc3NpdmUgfSBmcm9tIFwiQC9mb2xsb3dTZXRcIjtcclxuaW1wb3J0IExleGVyIGZyb20gXCJAL2xleGVyXCI7XHJcbmltcG9ydCB7IEdyYW1tZXJTZXQsIFByZWRpY3RQcm9jZXNzTGluZSwgUHJlZGljdFRhYmxlLCBQcm9jZXNzLCBSdWxlIH0gZnJvbSBcIkAvdHlwZXMvdHlwZVwiO1xyXG5pbXBvcnQgZ2VuZXJhdG9yUHJlZGljdFRhYmxlLCB7IGNoZWNrUHJlZGlja1RhYmxlSXNWYWxpZCwgZ2VuZXJhdGVQcmVkaWN0VGFibGVQcm9ncmVzc2l2ZSwgcHJlZGljdCwgcHJlZGljdFByb2dyZXNzaXZlIH0gZnJvbSBcIi4vcHJlZGljdFRhYmxlXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMTDFQYXJzZXIge1xyXG4gICAgcHVibGljIGxleGVyOiBMZXhlcjtcclxuICAgIHB1YmxpYyB0ZXh0R3JhbW1lcnM6IEFycmF5PHN0cmluZz47XHJcbiAgICBjb25zdHJ1Y3Rvcih0ZXJtaW5hbHM6IEFycmF5PFtzdHJpbmcsIFJlZ0V4cF0+LCBub25UZXJtaW5hbHM6IEFycmF5PHN0cmluZz4sIGluR3JhbW1lcnM6IEFycmF5PHN0cmluZz4pIHtcclxuICAgICAgICB0aGlzLmxleGVyID0gbmV3IExleGVyKHRlcm1pbmFscywgbm9uVGVybWluYWxzKTtcclxuICAgICAgICB0aGlzLnRleHRHcmFtbWVycyA9IGluR3JhbW1lcnM7XHJcbiAgICB9XHJcbiAgICBnZXRGaXJzdFNldCgpOiBHcmFtbWVyU2V0IHtcclxuICAgICAgICByZXR1cm4gZ2VuZXJhdGVGaXJzdFNldCh0aGlzLmxleGVyLCB0aGlzLnRleHRHcmFtbWVycyk7XHJcbiAgICB9XHJcbiAgICBnZXRGb2xsb3dTZXQoZmlyc3RTZXQ/OiBHcmFtbWVyU2V0KTogR3JhbW1lclNldCB7XHJcbiAgICAgICAgaWYgKCFmaXJzdFNldCkge1xyXG4gICAgICAgICAgICBmaXJzdFNldCA9IHRoaXMuZ2V0Rmlyc3RTZXQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGdlbmVyYXRlRmxsb3dTZXQodGhpcy5sZXhlciwgdGhpcy50ZXh0R3JhbW1lcnMsIGZpcnN0U2V0KTtcclxuICAgIH1cclxuICAgIGdldFByZWRpY3RUYWJsZShmaXJzdFNldD86IEdyYW1tZXJTZXQsIGZvbGxvd1NldD86IEdyYW1tZXJTZXQpOiBQcmVkaWN0VGFibGUge1xyXG4gICAgICAgIGlmICghZmlyc3RTZXQpIHtcclxuICAgICAgICAgICAgZmlyc3RTZXQgPSB0aGlzLmdldEZpcnN0U2V0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghZm9sbG93U2V0KSB7XHJcbiAgICAgICAgICAgIGZvbGxvd1NldCA9IHRoaXMuZ2V0Rm9sbG93U2V0KGZpcnN0U2V0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGdlbmVyYXRvclByZWRpY3RUYWJsZSh0aGlzLmxleGVyLCB0aGlzLnRleHRHcmFtbWVycywgZmlyc3RTZXQsIGZvbGxvd1NldCk7XHJcbiAgICB9XHJcbiAgICBnZXRQcmVkaWN0UHJvY2VzcyhpbnB1dDogc3RyaW5nLCBwYXJzZVN0YXJ0Tm9uVGVybWluYWw6IHN0cmluZywgcHJlZGljdFRhYmxlPzogUHJlZGljdFRhYmxlKTogQXJyYXk8UHJlZGljdFByb2Nlc3NMaW5lPiB7XHJcbiAgICAgICAgaWYgKCFwcmVkaWN0VGFibGUpIHtcclxuICAgICAgICAgICAgcHJlZGljdFRhYmxlID0gZ2VuZXJhdG9yUHJlZGljdFRhYmxlKHRoaXMubGV4ZXIsIHRoaXMudGV4dEdyYW1tZXJzLCB0aGlzLmdldEZpcnN0U2V0KCksIHRoaXMuZ2V0Rm9sbG93U2V0KCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZighdGhpcy5sZXhlci5ub25UZXJtaW5hbHMuc29tZShub25UZXJtaW5hbD0+e1xyXG4gICAgICAgICAgICBpZihwYXJzZVN0YXJ0Tm9uVGVybWluYWwgPT09IG5vblRlcm1pbmFsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiMVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHByZWRpY3QodGhpcy5sZXhlciwgcHJlZGljdFRhYmxlLCBpbnB1dCwgcGFyc2VTdGFydE5vblRlcm1pbmFsKTtcclxuICAgIH1cclxuICAgIGNoZWNrUHJlZGlja1RhYmxlSXNWYWxpZChwcmVkaWN0VGFibGU6IFByZWRpY3RUYWJsZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBjaGVja1ByZWRpY2tUYWJsZUlzVmFsaWQodGhpcy5sZXhlciwgcHJlZGljdFRhYmxlKTtcclxuICAgIH1cclxuICAgIGNoZWNrSXNMTDAoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIGNoZWNrUHJlZGlja1RhYmxlSXNWYWxpZCh0aGlzLmxleGVyLCB0aGlzLmdldFByZWRpY3RUYWJsZSgpKTtcclxuICAgIH1cclxuICAgIGdldEZpcnN0U2V0UHJvZ3Jlc3NpdmUoKTogSXRlcmFibGVJdGVyYXRvcjxSdWxlIHwgUHJvY2VzczxHcmFtbWVyU2V0Pj4ge1xyXG4gICAgICAgIHJldHVybiBnZW5lcmF0ZUZpcnN0U2V0UHJvZ3Jlc3NpdmUodGhpcy5sZXhlciwgdGhpcy50ZXh0R3JhbW1lcnMpO1xyXG4gICAgfVxyXG4gICAgZ2V0Rm9sbG93U2V0UHJvZ3Jlc3NpdmUoZmlyc3RTZXQ/OiBHcmFtbWVyU2V0KTogSXRlcmFibGVJdGVyYXRvcjxSdWxlIHwgUHJvY2VzczxHcmFtbWVyU2V0Pj4ge1xyXG4gICAgICAgIGlmICghZmlyc3RTZXQpIHtcclxuICAgICAgICAgICAgZmlyc3RTZXQgPSB0aGlzLmdldEZpcnN0U2V0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBnZW5lcmF0ZUZsbG93U2V0UHJvZ3Jlc3NpdmUodGhpcy5sZXhlciwgdGhpcy50ZXh0R3JhbW1lcnMsIGZpcnN0U2V0KTtcclxuICAgIH1cclxuICAgIGdldFByZWRpY3RQcm9jZXNzUHJvZ3Jlc3NpdmUoaW5wdXQ6IHN0cmluZywgcGFyc2VTdGFydE5vblRlcm1pbmFsOiBzdHJpbmcsIHByZWRpY3RUYWJsZT86IFByZWRpY3RUYWJsZSk6IEl0ZXJhYmxlSXRlcmF0b3I8QXJyYXk8UHJlZGljdFByb2Nlc3NMaW5lPj4ge1xyXG4gICAgICAgIGlmICghcHJlZGljdFRhYmxlKSB7XHJcbiAgICAgICAgICAgIHByZWRpY3RUYWJsZSA9IGdlbmVyYXRvclByZWRpY3RUYWJsZSh0aGlzLmxleGVyLCB0aGlzLnRleHRHcmFtbWVycywgdGhpcy5nZXRGaXJzdFNldCgpLCB0aGlzLmdldEZvbGxvd1NldCgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoIXRoaXMubGV4ZXIubm9uVGVybWluYWxzLnNvbWUobm9uVGVybWluYWw9PntcclxuICAgICAgICAgICAgaWYocGFyc2VTdGFydE5vblRlcm1pbmFsID09PSBub25UZXJtaW5hbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0pKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIjFcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwcmVkaWN0UHJvZ3Jlc3NpdmUodGhpcy5sZXhlciwgcHJlZGljdFRhYmxlLCBpbnB1dCwgcGFyc2VTdGFydE5vblRlcm1pbmFsKTtcclxuICAgIH1cclxuICAgIGdldFByZWRpY3RUYWJsZVByb2dyZXNzaXZlKGZpcnN0U2V0PzogR3JhbW1lclNldCwgZm9sbG93U2V0PzogR3JhbW1lclNldCk6IEl0ZXJhYmxlSXRlcmF0b3I8UnVsZSB8IFByb2Nlc3M8UHJlZGljdFRhYmxlPj4ge1xyXG4gICAgICAgIGlmICghZmlyc3RTZXQpIHtcclxuICAgICAgICAgICAgZmlyc3RTZXQgPSB0aGlzLmdldEZpcnN0U2V0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghZm9sbG93U2V0KSB7XHJcbiAgICAgICAgICAgIGZvbGxvd1NldCA9IHRoaXMuZ2V0Rm9sbG93U2V0KGZpcnN0U2V0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGdlbmVyYXRlUHJlZGljdFRhYmxlUHJvZ3Jlc3NpdmUodGhpcy5sZXhlciwgdGhpcy50ZXh0R3JhbW1lcnMsIGZpcnN0U2V0LCBmb2xsb3dTZXQpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuIl0sIm5hbWVzIjpbInRyYW5zZmVyU3RyaW5nMkdyYW1tZXJzIiwibGV4ZXIiLCJncmFtbWVycyIsIm1hcCIsImdyYW1tZXIiLCJyZXBsYWNlQWxsIiwiYXJyIiwic3BsaXQiLCJmaWx0ZXIiLCJ2IiwiZGVyaXZhdGlvbnMiLCJkZXJpdmF0aW9uIiwic3BsaXREZXJpdmF0aW9uIiwibm9uVGVybWluYWwiLCJzYWZlUmVnQ2hhcmFjdGVyIiwiY2hhciIsIkVtcHR5Q2hhcmFjdGVyIiwiRW5kaW5nQ2hhcmFjdGVyIiwiTG9nTGV2ZWwiLCJOb3JtYWwiLCJsb2dMZXZlbF9pbml0IiwiRXJyb3IiLCJsb2dMZXZlbCIsImxvZ0NoYW5uZWwiLCJjb25zdHJ1Y3RvciIsImNvbnNvbGUiLCJ0aGlzIiwibG9nIiwiaW5mbyIsIndhcm4iLCJXYXJubmluZyIsImVycm9yIiwiZ2VuZXJhdGVGaXJzdFNldCIsImluR3JhbW1lcnMiLCJmaXJzdFNldCIsIkFycmF5IiwidG9ja2VuIiwidGVybWluYWxzIiwiU2V0IiwiZ3JhbW1lck1hcCIsIk1hcCIsImZvckVhY2giLCJzZXQiLCJwdXNoIiwidGVybWluYWwiLCJpc1Rlcm1pbmFsIiwic2V0TGluZSIsImdldCIsImxlbmd0aCIsImhhcyIsImFkZCIsImZpcnN0U2V0TWFwIiwiaGFzQ2hhbmdlIiwiaSIsIm5leHRTZXRMaW5lIiwic29ydCIsImEiLCJiIiwiZnJvbSIsImdldERlcml2YXRpb25GaXJzdFNldCIsImpvaW4iLCJnZXREZXJpdmF0aW9uRmlyc3RTZXRXaXRoTWFwIiwiZ2VuZXJhdGVGbGxvd1NldCIsImZvbGxvd1NldCIsImZvbGxvd1NldE1hcCIsImoiLCJwU2V0TGluZSIsIkxleGVyIiwibm9uVGVybWluYWxzIiwiY3VycmVudExpbmUiLCJjdXJyZW50Q29sdW1uIiwic291cmNlIiwic2V0U291cmNlIiwiZ2V0U291cmNlIiwicmVtYWluU3RyaW5nIiwic2xpY2UiLCJuZXh0Iiwib3JpZ2luIiwibWF0Y2hSZXN1bHQiLCJtYXRjaCIsInBvcCIsImUiLCJuZXh0Tm90RW1wdHlUZXJtaW5hbCIsIm5leHROb3RFbXB0eSIsInN0ZXAiLCJiYWNrIiwicG9wTm90RW1wdHlUZXJtaW5hbCIsInN0ciIsInNvbWUiLCJjb3VudFRpbWUiLCJpblN0ciIsIlJlZ0V4cCIsImdldE5ld05vblRlcm1pbmFsIiwidG1wIiwiaW5kZXhPZiIsInVuc2hpZnQiLCJnZW5lcmF0b3JQcmVkaWN0VGFibGUiLCJwcmVkaWN0VGFibGUiLCJub25UZXJtaW5hbDJUYWJsZVJvd01hcCIsInRhYmxlTGluZSIsInRlcm1pbmFsMkRlcml2YXRpb24iLCJub25UZXJtaW5hbDJGaXJzdFNldE1hcCIsIm5vblRlcm1pbmFsMkZvbGxvd1NldExpbmUiLCJkZXJpdmF0aW9uRmlyc3RTZXQiLCJoYXNTZXQiLCJjZWxsR3JhbW1lciIsImNoZWNrUHJlZGlja1RhYmxlSXNWYWxpZCIsInRhYmxlIiwidDJkIiwic2ltcGxlTm9uVGVybWluYWxSZWciLCJzaW1wbGVUZXJtaW5hbFJlZyIsImdldFRvY2tGcm9tU2ltcGxlR3JhbW1lcnMiLCJKU09OIiwic3RyaW5naWZ5IiwianNvbkRhdGEiLCJwYXJzZSIsInN0YXRlSXRlbXNUb1N0cmluZyIsIml0ZW1zIiwiYW5zIiwiaXRlbSIsInN0YXRlSXRlbVRvU3RyaW5nIiwibWF0Y2hQb2ludCIsImV4cGFuZFN0YXRlSXRlbXMiLCJub25UZXJtaW5hbHMyRGVyaXZhdGlvbk1hcCIsImluRmxhZyIsImpJdGVtIiwiZXF1YWwiLCJBdWd1bWVudFN0YXJ0IiwibmVlZExvb2tBaGVhZCIsImxvb2tBaGVhZFRvY2tlbiIsImdldEl0ZW1CeUlkRnJvbUFyciIsImlkIiwidGV4dEdyYW1tZXJzIiwiZ2V0Rmlyc3RTZXQiLCJnZXRGb2xsb3dTZXQiLCJnZXRQcmVkaWN0VGFibGUiLCJnZXRQcmVkaWN0UHJvY2VzcyIsImlucHV0IiwicGFyc2VTdGFydE5vblRlcm1pbmFsIiwiX2lucHV0IiwicHJlZGljdFByb2Nlc3MiLCJhc3RJZHgiLCJhc3ROb2RlIiwidGV4dCIsImNoZWNrIiwiYXN0U3RhY2siLCJjdXJyZW50U3RhdGUiLCJwYXJzZVN0YWNrIiwicmVtYWluaW5nSW5wdXQiLCJwYXJzZUFjdGlvbiIsImNoaWxkcmVuIiwicmV2ZXJzZSIsInRvU3RyaW5nIiwicHJlZGljdCIsImNoZWNrSXNMTDAiLCJnZXRGaXJzdFNldFByb2dyZXNzaXZlIiwicnVsZUluZGV4IiwicmVzdWx0IiwiZ2VuZXJhdGVGaXJzdFNldFByb2dyZXNzaXZlIiwiZ2V0Rm9sbG93U2V0UHJvZ3Jlc3NpdmUiLCJnZW5lcmF0ZUZsbG93U2V0UHJvZ3Jlc3NpdmUiLCJnZXRQcmVkaWN0UHJvY2Vzc1Byb2dyZXNzaXZlIiwicHJlZGljdFByb2dyZXNzaXZlIiwiZ2V0UHJlZGljdFRhYmxlUHJvZ3Jlc3NpdmUiLCJnZW5lcmF0ZVByZWRpY3RUYWJsZVByb2dyZXNzaXZlIiwiaW5pdGlhbFN0YXRlTm9kZSIsImFsbFN0YXRlTm9kZXNNYXAiLCJnZW5lcmF0ZVN0YXRlIiwidG9ja2VuQW5hUmVzIiwiZWRnZXMiLCJ2aXMiLCJwcmVTaXplIiwic2l6ZSIsInN0YXRlIiwidmFsdWVzIiwibWF0Y2hJdGVtcyIsImtleSIsInByZWRpY3RJbnB1dCIsInN0YWNrIiwic3ltYm9scyIsInN0YXRlSWQiLCJwcmVkaWN0TGluZSIsImxpbmUiLCJlbXB0eUNoYXJhY3RlckZsYWciLCJtb3ZlIiwiYWN0aW9uIiwiY01vdmUiLCJzdGFydHNXaXRoIiwic2hpZnQiLCJOdW1iZXIiLCJqUHJlZGljdExpbmUiLCJnb3RvIiwibWVyZ2VOZXdOb2RlIiwibm9kZSIsImFkZE5vZGUiLCJhZGRJdGVtIiwiY2hhIiwiYWNjIiwiZ2VuZXJhdGVMQUxSUHJlZGljdFRhYmxlIiwibWVyZ2VNYXAiLCJkZnMiLCJuZXdOb2RlIiwiZWRnZSIsImpvaW5NYXBEZnMiLCJpZDJpZE1hcCIsIk1hcE1hcERmcyIsImkyaSIsInVzZWQiLCJzdGF0ZU5vZGUiLCJnZW5lcmF0ZUxSMVByZWRpY3RUYWJsZSIsInN0YXRlR3JhcGgiLCJyZWR1Y2VOdW0iLCJpc0NvbGxpc2lvbiIsImdlbmVyYXRlU3RhdGVQcm9ncmVzc2l2ZSIsInByZWRpY3RJbnB1dFdpdGhBU1QiLCJscm5vZGUiLCJwYXJlbnROb2RlIiwibGlkIiwidGVtcCIsInByZWRpY3RJbnB1dFByb2dyZXNzaXZlIiwiZ2VuZXJhdGVMUjBQcmVkaWN0VGFibGUiLCJnZW5lcmF0ZVNMUjFQcmVkaWN0VGFibGUiLCJmb2xsb3dDaCIsInNoaWZ0TnVtIiwiZ0kiLCJmaXJzdFRvY2tlbjJEZXJpdmF0aW9uc01hcCIsImtleXMiLCJ1bmlvbk1hcCIsImdKIiwiayIsImpncmFtbWVyIiwic3BsaWNlIiwibmVlZEhhbmRsZUluZGV4IiwibmV3Tm9uVGVybWluYWxUb2NrZW4iLCJuZXdHcmFtbWVycyIsIm5ld05vblRlcm1pbmFsR3JhbW1lcnMiLCJpbmRleCIsIm5ld0FkZEdyYW1tZXJzIiwidG1wUmVzdWx0IiwibmV3RGVyaXZhdGlvbiIsIm5ld1VuVGVybWluYWwiLCJuZXdSZXN1bHQiLCJkZXJpIl0sIm1hcHBpbmdzIjoiYUFHZ0IsU0FBQUEsRUFBd0JDLEVBQWNDLEdBQ2xELE9BQU9BLEVBQVNDLEtBQUlDLEdBQ1RBLEVBQVFDLFdBQVcsTUFBTyxNQUNsQ0YsS0FBSUMsSUFDSCxNQUFNRSxFQUFNRixFQUFRRyxNQUFNLGFBQWFDLFFBQU9DLEdBQVcsT0FBTkEsR0FBb0IsT0FBTkEsR0FBY0EsSUFDekVD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
