function e(e,t){return t.map((e=>e.replaceAll(/\s/g,""))).map((t=>{const n=t.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),i=n[1].split("|").filter((e=>e&&"|"!==e)).map((t=>e.splitDerivation(t)));return{nonTerminal:n[0],derivations:i}}))}function t(e){switch(e){case"+":case"*":case"(":case")":return`\\${e}`;default:return e}}const n="ε",i="$";var r;!function(e){e[e.Normal=0]="Normal",e[e.Warnning=1]="Warnning",e[e.Error=2]="Error",e[e.None=3]="None"}(r||(r={}));let o=r.Normal;o=r.Error;var s=new class{logLevel;logChannel;constructor(e=r.Normal,t=console){this.logLevel=e,this.logChannel=t}log(...e){this.logLevel<=r.Normal&&this.logChannel.log("[normal]",...e)}warn(...e){this.logLevel<=r.Warnning&&this.logChannel.warn("[warn]",...e)}error(...e){this.logLevel<=r.Error&&this.logChannel.error("[error]",...e)}logTo(e){this.logChannel=e}}(o);function l(t,i){s.log("[generateFirstSet start]");const r=e(t,i);s.log("[grammers after transferString2Grammers]",r);const o=new Array(...r.map((e=>({tocken:e.nonTerminal,terminals:new Set})))),l=new Map;r.forEach((e=>{l.set(e.nonTerminal,e.derivations)})),o.push(...t.terminals.map((e=>({tocken:e[0],terminals:new Set([e[0]]),isTerminal:!0})))),o.forEach((e=>{if(!e.isTerminal)for(let t of l.get(e.tocken))1!==t.length||t[0]!==n||e.terminals.has(n)||e.terminals.add(n)}));const a=new Map;for(let e of o)a.set(e.tocken,e);for(;;){let e=!1;if(o.forEach((i=>{if(!i.isTerminal)for(let r of l.get(i.tocken))for(let o=0;o<r.length;o++){const l=r[o];if(t.isTerminal(l)){if(i.terminals.has(l)||(s.log(l),e=!0,i.terminals.add(l)),l!==n)break}else{const t=a.get(l);if(t.terminals.forEach((t=>{t!==n&&(i.terminals.has(t)||(e=!0,i.terminals.add(t)))})),!t.terminals.has(n))break}o===r.length-1&&i.terminals.add(n)}})),!e)break}return o.filter((e=>!e.isTerminal)).sort(((e,t)=>e.tocken<t.tocken?-1:1)).map((e=>(e.terminals=new Set(Array.from(e.terminals).sort(((e,t)=>e<t?-1:1))),e)))}function a(e,t,i){const r=new Map;i.forEach((e=>{r.set(e.tocken,e)}));const o=new Set;for(let i=0;i<t.length;i++){const s=t[i];if(e.isTerminal(s)){if(s!==n){o.add(s);break}}else if(r.get(s)?.terminals.forEach((e=>{o.add(e)})),!r.get(s).terminals.has(n))break;i===t.length-1&&o.add(n)}return{tocken:t.join(""),terminals:o}}function c(e,t,i){const r=new Set;for(let o=0;o<t.length;o++){const s=t[o];if(e.isTerminal(s)){if(s!==n){r.add(s);break}}else if(i.get(s)?.terminals.forEach((e=>{r.add(e)})),!i.get(s).terminals.has(n))break;o===t.length-1&&r.add(n)}return{tocken:t.join(""),terminals:r}}function h(t,r,o){s.log("[generateFllowSet start]"),o=o?Array.from(o):l(t,r);const a=e(t,r);s.log("[grammers after transferString2Grammers]",a);const c=new Array(...a.map((e=>({tocken:e.nonTerminal,terminals:new Set([i])})))),h=new Map;a.forEach((e=>{h.set(e.nonTerminal,e.derivations)})),c.push(...t.terminals.map((e=>({tocken:e[0],terminals:new Set([i]),isTerminal:!0}))));const m=new Map;for(let e of c)m.set(e.tocken,e);o.push(...t.terminals.map((e=>({tocken:e[0],terminals:new Set([e[0]]),isTerminal:!0}))));const f=new Map;for(let e of o)f.set(e.tocken,e);for(;;){let e=!1;if(a.forEach((t=>{for(let i of t.derivations)for(let t=i.length-2;t>=0;t--){const r=m.get(i[t]);for(let o=t+1;o<i.length;o++){const t=f.get(i[o]).terminals;for(let i of t)i!==n&&(r?.terminals.has(i)||(e=!0,r?.terminals.add(i)));if(!t.has(n))break}}})),a.forEach((t=>{const i=m.get(t.nonTerminal);for(let r of t.derivations)for(let t=r.length-1;t>=0;t--){const o=r[t],s=m.get(o);for(let t of i.terminals)t!==n&&(s?.terminals.has(t)||(e=!0,s?.terminals.add(t)));if(!f.get(o).terminals.has(n))break}})),!e)break}return c.filter((e=>!e.isTerminal)).sort(((e,t)=>e.tocken<t.tocken?-1:1)).map((e=>(e.terminals=new Set(Array.from(e.terminals).sort(((e,t)=>e<t?-1:1))),e)))}class m{nonTerminals;terminals;currentLine=0;currentColumn=0;source="";constructor(e,t){this.nonTerminals=[...t],this.terminals=[...e]}setSource(e){this.source=e,this.currentLine=0,this.currentColumn=0}getSource(){console.log(this.source)}remainString(){return this.source.slice(this.currentColumn)}next(){if(this.currentColumn>=this.source.length)return{tocken:i,origin:i};for(let e of this.terminals){const t=this.source.slice(this.currentColumn).match(e[1]);if(t)return{tocken:e[0],origin:t[0]}}throw new Error(`[词法分析]: 匹配下一个tocken失败  源输入字符串: ${this.source} 剩余字符串: ${this.source.slice(this.currentColumn)}`)}pop(){try{const e=this.next();return e.tocken!==i&&(this.currentColumn+=e.origin.length),e}catch(e){throw e}}nextNotEmptyTerminal(){for(;;){const e=this.next();if("whiteSpace"!==e.tocken)return e;this.currentColumn+=e.origin.length}}nextNotEmpty(e){const t=this.currentColumn;for(let t=0;t<e-1;t++)this.popNotEmptyTerminal();const n=this.nextNotEmptyTerminal();return this.currentColumn=t,n}popNotEmptyTerminal(){const e=this.nextNotEmptyTerminal();return e.tocken!==i&&(this.currentColumn+=e.origin.length),e}isTerminal(e){let t=!0;return this.nonTerminals.some((n=>n===e&&(t=!1,!0))),t}splitDerivation(e){const n=[];let i=0;const r=e;for(;e.length;){for(let t of this.nonTerminals){const i=e.match(new RegExp("^"+t));if(i){n.push(t),e=e.slice(i[0].length);break}}for(let i of this.terminals){const r=e.match(new RegExp("^"+t(i[0])));if(r){n.push(i[0]),e=e.slice(r[0].length);break}}if(i++,i>5e4)throw new Error(`[splitDerivation] error: excute over MAX_EXCUTE str: ${r}  remaining str: ${e} `)}return n}getNewNonTerminal(e){let t=e;for(;;)if(t+="'",-1===this.nonTerminals.indexOf(t))return this.nonTerminals.unshift(t),t}}function f(t,i,r,o){const l=e(t,i),a=[],h=new Map;t.nonTerminals.forEach((e=>{const t={nonTerminal:e,terminal2Derivation:new Map};h.set(e,t),a.push(t)}));const m=new Map,f=new Map;for(let e of o)f.set(e.tocken,e);for(let e of r)m.set(e.tocken,e);return l.forEach((e=>{for(let i of e.derivations){const r=c(t,i,m),o=h.get(e.nonTerminal);s.log(r);let l=new Map;for(let t of r.terminals){if(t===n)continue;let r=o?.terminal2Derivation.get(t);l.set(t,!0),r||(r={nonTerminal:e.nonTerminal,derivations:[]},o?.terminal2Derivation.set(t,r)),r.derivations.push(i)}if(r.terminals.has(n))for(let t of f.get(e.nonTerminal).terminals){if(l.has(t))continue;let n=o?.terminal2Derivation.get(t);n||(n={nonTerminal:e.nonTerminal,derivations:[]},o?.terminal2Derivation.set(t,n)),n.derivations.push(i)}}})),a}function g(e,t){for(let n of e.terminals){const e=n[0];t.forEach((t=>{const n=t.terminal2Derivation.get(e);if(n&&n.derivations.length>1)return!1}))}return!0}class p{lexer;textGrammers;constructor(e,t,n){this.lexer=new m(e,t),this.textGrammers=n}getFirstSet(){return l(this.lexer,this.textGrammers)}getFollowSet(e){return e||(e=this.getFirstSet()),h(this.lexer,this.textGrammers,e)}getPredictTable(e,t){return e||(e=this.getFirstSet()),t||(t=this.getFollowSet(e)),f(this.lexer,this.textGrammers,e,t)}getPredictProcess(e,t,r){if(r||(r=f(this.lexer,this.textGrammers,this.getFirstSet(),this.getFollowSet())),!this.lexer.nonTerminals.some((e=>t===e)))throw new Error("1");return function(e,t,r,o){let l=r.replaceAll(/\s/g,"");const a=[];let c=1;const h={id:0,text:o,check:!1},m=[h];let f={parseStack:[i,o],remainingInput:r,parseAction:""};e.setSource(l);const g=new Map;t.forEach((e=>{g.set(e.nonTerminal,e)}));try{for(;;){const t=f.parseStack[f.parseStack.length-1];if(e.isTerminal(t)){const n=e.next();if(t!==n.tocken)throw new Error(`[预测错误] 非终结符匹配错误: ${t} stack: ${f.parseStack} 剩余字符串: ${e.remainString()}`);{if(f.parseAction=`match ${n.tocken}${n.tocken===n.origin?"":": "+n.origin}`,a.push(f),f=JSON.parse(JSON.stringify(f)),e.pop(),f.parseAction="",f.remainingInput=e.remainString(),f.parseStack.pop(),0===f.parseStack.length)break;const t=m.pop();t.children||(t.children=[]),t.children.push({id:c++,text:n.origin,check:!1})}continue}const i=e.next(),r=g.get(t).terminal2Derivation.get(i.tocken);if(1!==r?.derivations?.length)throw new Error(`[预测错误] 分析输入错误  终结符: ${i}   剩余字符串: ${e.remainString()} 文法: ${r} `);f.parseAction=`Predict ${r.nonTerminal} -> ${r.derivations[0].join(" ")}`,s.log("[predict State]",f),a.push(f),f=JSON.parse(JSON.stringify(f)),f.parseStack.pop();const o=m.pop(),l=r.derivations[0].filter((e=>e!==n));o.children||(o.children=[]);for(let e of l)o.children.push({id:c++,text:e,check:!1});m.push(...[...o.children].reverse()),f.parseStack.push(...l.reverse()),f.parseAction="",f.remainingInput=e.remainString()}}catch(e){f.parseAction=e.toString(),a.push(f)}return a.astNode=h,a}(this.lexer,r,e,t)}checkPredickTableIsValid(e){return g(this.lexer,e)}checkIsLL0(){return g(this.lexer,this.getPredictTable())}getFirstSetProgressive(){return function*(t,i){yield["1. 如果X式一个终结符号，那么FIRST(X) = X ","2. 如果 X -> ε 是一个产生式，那么将e加人到 FIRST（X)中。","3. A -> B0B1B2B3，i = 0，循环i\n            FIRST(Bi) - ε 加入到 FIRST(A)中\n            如果FIRST(B1)ε\n            若B0 - B3均含有ε，将ε加入到FIRST(A)中\n        ","4. 去除所有终结符号的表项"],s.log("[generateFirstSet start]");const r=e(t,i);s.log("[grammers after transferString2Grammers]",r);const o=new Array(...r.map((e=>({tocken:e.nonTerminal,terminals:new Set})))),l=new Map;r.forEach((e=>{l.set(e.nonTerminal,e.derivations)})),o.push(...t.terminals.map((e=>({tocken:e[0],terminals:new Set([e[0]]),isTerminal:!0})))),yield{ruleIndex:0,result:o},o.forEach((e=>{if(!e.isTerminal)for(let t of l.get(e.tocken))1!==t.length||t[0]!==n||e.terminals.has(n)||e.terminals.add(n)})),yield{ruleIndex:1,result:o};const a=new Map;for(let e of o)a.set(e.tocken,e);for(;;){let e=!1;if(o.forEach((i=>{if(!i.isTerminal)for(let r of l.get(i.tocken))for(let o=0;o<r.length;o++){const l=r[o];if(t.isTerminal(l)){if(i.terminals.has(l)||(s.log(l),e=!0,i.terminals.add(l)),l!==n)break}else{const t=a.get(l);if(t.terminals.forEach((t=>{t!==n&&(i.terminals.has(t)||(e=!0,i.terminals.add(t)))})),!t.terminals.has(n))break}o===r.length-1&&i.terminals.add(n)}})),!e)break;yield{ruleIndex:2,result:o}}yield{ruleIndex:3,result:o.filter((e=>!e.isTerminal)).sort(((e,t)=>e.tocken<t.tocken?-1:1)).map((e=>(e.terminals=new Set(Array.from(e.terminals).sort(((e,t)=>e<t?-1:1))),e)))}}(this.lexer,this.textGrammers)}getFollowSetProgressive(t){return t||(t=this.getFirstSet()),function*(t,r,o){yield["1. 将$放到FOLLOW(S)中","2. 如果存在一个产生式A -> aBb ， 那么FIRST(b) 中除ε 之外的所有符号都在FOLLOW(B)中。attention: A -> aBCd 那么把first(Cd)加入到Follow(B)中去","3.如果存在一个产生式 A -> aB ， 或存在产生式 A -> aBb 且FIRST(b) 包含 ε ，那么FOLLOW(A)中的所有符号都在FOLLOW(B)中。","4. 去除所有终结符号的表项"],s.log("[generateFllowSet start]"),o=o?Array.from(o):l(t,r);const a=e(t,r);s.log("[grammers after transferString2Grammers]",a);const c=new Array(...a.map((e=>({tocken:e.nonTerminal,terminals:new Set([i])})))),h=new Map;a.forEach((e=>{h.set(e.nonTerminal,e.derivations)})),c.push(...t.terminals.map((e=>({tocken:e[0],terminals:new Set([i]),isTerminal:!0})))),yield{ruleIndex:0,result:c};const m=new Map;for(let e of c)m.set(e.tocken,e);o.push(...t.terminals.map((e=>({tocken:e[0],terminals:new Set([e[0]]),isTerminal:!0}))));const f=new Map;for(let e of o)f.set(e.tocken,e);for(;;){let e=!1;if(a.forEach((t=>{for(let i of t.derivations)for(let t=i.length-2;t>=0;t--){const r=m.get(i[t]);for(let o=t+1;o<i.length;o++){const t=f.get(i[o]).terminals;for(let i of t)i!==n&&(r?.terminals.has(i)||(e=!0,r?.terminals.add(i)));if(!t.has(n))break}}})),e&&(yield{ruleIndex:1,result:c},e=!1),a.forEach((t=>{const i=m.get(t.nonTerminal);for(let r of t.derivations)for(let t=r.length-1;t>=0;t--){const o=r[t],s=m.get(o);for(let t of i.terminals)t!==n&&(s?.terminals.has(t)||(e=!0,s?.terminals.add(t)));if(!f.get(o).terminals.has(n))break}})),e&&(yield{ruleIndex:2,result:c}),!e)break}yield{ruleIndex:3,result:c.filter((e=>!e.isTerminal)).sort(((e,t)=>e.tocken<t.tocken?-1:1)).map((e=>(e.terminals=new Set(Array.from(e.terminals).sort(((e,t)=>e<t?-1:1))),e)))}}(this.lexer,this.textGrammers,t)}getPredictProcessProgressive(e,t,r){if(r||(r=f(this.lexer,this.textGrammers,this.getFirstSet(),this.getFollowSet())),!this.lexer.nonTerminals.some((e=>t===e)))throw new Error("1");return function*(e,t,r,o){let l=r.replaceAll(/\s/g,"");const a=[];let c=1;const h={id:0,text:o,check:!1};a.astNode=h;const m=[h];let f={parseStack:[i,o],remainingInput:r,parseAction:""};e.setSource(l);const g=new Map;t.forEach((e=>{g.set(e.nonTerminal,e)})),yield a;try{for(;;){const t=f.parseStack[f.parseStack.length-1];if(e.isTerminal(t)){const n=e.next();if(t!==n.tocken)throw new Error(`[预测错误] 非终结符匹配错误: ${t} stack: ${f.parseStack} 剩余字符串: ${e.remainString()}`);{if(f.parseAction=`match ${n.tocken}${n.tocken===n.origin?"":": "+n.origin}`,a.push(f),f=JSON.parse(JSON.stringify(f)),e.pop(),f.parseAction="",f.remainingInput=e.remainString(),f.parseStack.pop(),0===f.parseStack.length)break;const t=m.pop();t.children||(t.children=[]),t.children.push({id:c++,text:n.origin,check:!1})}yield a;continue}const i=e.next(),r=g.get(t).terminal2Derivation.get(i.tocken);if(1!==r?.derivations?.length)throw new Error(`[预测错误] 分析输入错误  终结符: ${i}   剩余字符串: ${e.remainString()} 文法: ${r} `);f.parseAction=`Predict ${r.nonTerminal} -> ${r.derivations[0].join(" ")}`,s.log("[predict State]",f),a.push(f),f=JSON.parse(JSON.stringify(f)),f.parseStack.pop();const o=m.pop(),l=r.derivations[0].filter((e=>e!==n));o.children||(o.children=[]);for(let e of l)o.children.push({id:c++,text:e,check:!1});m.push(...[...o.children].reverse()),f.parseStack.push(...l.reverse()),f.parseAction="",f.remainingInput=e.remainString(),yield a}}catch(e){f.parseAction=e.toString(),a.push(f)}return a.astNode=h,a}(this.lexer,r,e,t)}getPredictTableProgressive(t,i){return t||(t=this.getFirstSet()),i||(i=this.getFollowSet(t)),function*(t,i,r,o){yield["1. 对 First(u) 中的所有终结符 a （不含 ε ），置 M[A, a] = A -> u","2. 若 First(u) 含 ε ，则对 Follow(A) 中的所有符号 a （可含 $ ），置 M[A, a] = A -> u"];const l=e(t,i),a=[],h=new Map;t.nonTerminals.forEach((e=>{const t={nonTerminal:e,terminal2Derivation:new Map};h.set(e,t),a.push(t)}));const m=new Map,f=new Map;for(let e of o)f.set(e.tocken,e);for(let e of r)m.set(e.tocken,e);for(let e of l)for(let i of e.derivations){const r=c(t,i,m),o=h.get(e.nonTerminal);s.log(r);for(let t of r.terminals){if(t===n)continue;let r=o?.terminal2Derivation.get(t);r||(r={nonTerminal:e.nonTerminal,derivations:[]},o?.terminal2Derivation.set(t,r)),r.derivations.push(i),yield{ruleIndex:0,result:a}}if(r.terminals.has(n))for(let t of f.get(e.nonTerminal).terminals){let n=o?.terminal2Derivation.get(t);n||(n={nonTerminal:e.nonTerminal,derivations:[]},o?.terminal2Derivation.set(t,n)),n.derivations.push(i),yield{ruleIndex:1,result:a}}}}(this.lexer,this.textGrammers,t,i)}}const d=/^[A-Z]'*/,u=/[a-z|\u0391-\u03C9]/;function k(e){const t=new Set,n=new Set;return e.forEach((e=>{const i=e.replaceAll(/\s/g,"").split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),r=i[0];t.add(r),i[1].split("|").filter((e=>e&&"|"!==e)).forEach((e=>{for(;e.length;){let i=null;if(i=e.match(d),i)t.add(i[0]),e=e.slice(i[0].length);else{if(i=e.match(u),!i)throw new Error(`[getTockFromSimpleGrammers error] cant recognize the character remaining: ${e}`);n.add(JSON.stringify([i[0],"^"+i[0]])),e=e.slice(i[0].length)}}}))})),{nonTerminals:Array.from(t).sort(((e,t)=>t.length-e.length)),terminals:Array.from(n).map((e=>{const t=JSON.parse(e);return t[1]=new RegExp(t[1]),t}))}}function T(e){let t=new Map;for(let n of e){n=n.replaceAll(/\s/g,"");const e=n.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),i=e[0],r=e[1];if(t.has(i))return!0;t.set(i,[r])}return!1}function S(e,t,n){let i=new Map;const r=[];if(!t||!n){const i=k(e);t=i.nonTerminals,n=i.terminals}let o=new m(n,t);e.forEach((e=>{const t=(e=e.replaceAll(/\s/g,"")).split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),n=t[0],l=t[1].split("|").filter((e=>e)).map((e=>(s.log("[debug]",r),o.splitDerivation(e))));if(i.has(n)){const e=i.get(n);l.forEach((t=>{const n=t.join(" ");-1===e?.indexOf(n)&&e.push(n)}))}else i.set(n,l.map((e=>e.join(" "))))}));for(let e of i.keys()){const t=[...new Set(i.get(e))];r.push(`${e} -> ${t.join("|")}`.split("|").join(" | "))}return s.log(r),r}function v(e,t,n){let i=e;if(!t||!n){const i=k(e);t=i.nonTerminals,n=i.terminals}let r=new m(n,t);for(let e of i){e=e.replaceAll(/\s/g,"");const t=e.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e))[1].split("|").filter((e=>e)).map((e=>(s.log("[debug]",i),r.splitDerivation(e)))),n=new Map;t.forEach((e=>{let t=n.get(e[0]);t?t.push(e.slice(1)):t=[e.slice(1)],n.set(e[0],t)}));for(let e of n.keys())if(1!==n.get(e)?.length)return!0}return!1}function w(e,t,n){let i=e;if(!t||!n){const i=k(e);t=i.nonTerminals,n=i.terminals}let r=new m(n,t);for(;;){let e=[];const t=i.map((t=>{const n=(t=t.replaceAll(/\s/g,"")).split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),o=n[0],l=n[1].split("|").filter((e=>e)).map((e=>(s.log("[debug]",i),r.splitDerivation(e)))),a=[],c=new Map;l.forEach((e=>{let t=c.get(e[0]);t?t.push(e.slice(1)):t=[e.slice(1)],c.set(e[0],t)}));for(let t of c.keys()){if(1===c.get(t)?.length){a.push(t+c.get(t)[0].join(""));continue}const n=c.get(t),i=r.getNewNonTerminal(o);a.push(t+i),e.push(i+" -> "+n?.map((e=>e.join(" "))).join(" | "))}return o+" -> "+a.join(" | ")}));s.log("[pre]",t,e);const n=[...t,...e];if(s.log("[com]",i,n),i.length===n.length)break;i=n}return i}function x(e,t,n){if(!t||!n){const i=k(e);t=i.nonTerminals,n=i.terminals}s.log("[nonTerminals]",t),s.log("[terminals]",n);let i=new m(n,t);const r=new Map;for(let t of e){t=t.replaceAll(/\s/g,"");const e=t.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),n=e[0],o=e[1].split("|").filter((e=>e)).map((e=>i.splitDerivation(e)));r.set(n,o)}s.log("[nonTerminals2DerivationMap]",r);for(let e=0;e<t.length;e++){const n=r.get(t[e]);for(let i=n.length-1;i>=0;i--){if(n[i][0]===t[e])return!0}}return!1}function b(e,t,i){const r=[];if(!t||!i){const n=k(e);t=n.nonTerminals,i=n.terminals}s.log("[nonTerminals]",t),s.log("[terminals]",i);let o=new m(i,t);const l=new Map;for(let t of e){t=t.replaceAll(/\s/g,"");const e=t.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),n=e[0],i=e[1].split("|").filter((e=>e)).map((e=>o.splitDerivation(e)));l.set(n,i)}s.log("[nonTerminals2DerivationMap]",l);for(let e=0;e<t.length;e++){const i=l.get(t[e]);for(let n=0;n<e;n++){const e=l.get(t[n]);for(let r=i.length-1;r>=0;r--){const o=i[r];if(o[0]===t[n]){s.log(o,t[n]);for(let t of e)s.log("[-]",t),i?.push([...t,...o.slice(1)]);i?.splice(r,1)}}}const r=[];for(let n=i.length-1;n>=0;n--){i[n][0]===t[e]&&r.push(n)}if(r.length){const s=o.getNewNonTerminal(t[e]),a=[],c=[];for(let e=i.length-1;e>=0;e--)-1===r.indexOf(e)&&a.push([...i[e][0]===n?i[e].slice(1):i[e],s]);for(let e of r)c.push([...i[e].slice(1),s]);c.push([n]),l.set(t[e],[...a,...r.length?[]:i]),l.set(s,c)}s.log("[nonTerminals2DerivationMap in process]",l,i)}for(let e of l.keys()){const t=l.get(e).map((e=>e.join(" "))).join(" | ");r.push(`${e} -> ${t}`)}return r}class N{initialStateNode;allStateNodesMap;lexer;grammers;constructor(){this.initialStateNode=null}generateState(e,t,n,r){if(!n||!r){const t=k(e);n=t.nonTerminals,r=t.terminals}const o="Augument_S";s.log("[nonTerminals]",n),s.log("[terminals]",r),this.grammers=e,this.lexer=new m(r,n);const l=new Map;for(let t of e){t=t.replaceAll(/\s/g,"");const e=t.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),n=e[0],i=e[1].split("|").filter((e=>e)).map((e=>this.lexer.splitDerivation(e)));l.set(n,i)}s.log(l),this.initialStateNode={id:0,items:[{nonTerminal:o,derivation:[t],matchPoint:0}],edges:[]},y(this.initialStateNode.items,l,this.lexer);const a=new Map;this.allStateNodesMap=a,a.set(P(this.initialStateNode.items),this.initialStateNode);const c=[];let h=0;for(;a.size!=h;){h=a.size;for(let e of a.values())if(!c[e.id]){c[e.id]=!0;for(let t of e.items)t.nonTerminal===o&&1===t.matchPoint&&e.edges.push({tocken:i,next:{id:-1,items:[],edges:[]}});for(let t of n){let n=[];for(let i of e.items)i.derivation.length!==i.matchPoint&&i.derivation[i.matchPoint]===t&&n.push({nonTerminal:i.nonTerminal,derivation:i.derivation,matchPoint:i.matchPoint+1});if(!n.length)continue;y(n,l,this.lexer);const i=P(n);a.has(i)||a.set(i,{id:a.size,items:n,edges:[]}),e.edges.push({tocken:t,next:a.get(i)})}for(let t of r){let n=[];for(let i of e.items)i.derivation.length!==i.matchPoint&&i.derivation[i.matchPoint]===t[0]&&n.push({nonTerminal:i.nonTerminal,derivation:i.derivation,matchPoint:i.matchPoint+1});if(!n.length)continue;y(n,l,this.lexer);const i=P(n);a.has(i)||a.set(i,{id:a.size,items:n,edges:[]}),e.edges.push({tocken:t[0],next:a.get(i)})}}}}*generateStateProgressive(e,t,n,r){if(!n||!r){const t=k(e);n=t.nonTerminals,r=t.terminals}const o="Augument_S";s.log("[nonTerminals]",n),s.log("[terminals]",r),this.grammers=e,this.lexer=new m(r,n);const l=new Map;for(let t of e){t=t.replaceAll(/\s/g,"");const e=t.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),n=e[0],i=e[1].split("|").filter((e=>e)).map((e=>this.lexer.splitDerivation(e)));l.set(n,i)}s.log(l),this.initialStateNode={id:0,items:[{nonTerminal:o,derivation:[t],matchPoint:0}],edges:[]},y(this.initialStateNode.items,l,this.lexer),yield;const a=new Map;this.allStateNodesMap=a,a.set(P(this.initialStateNode.items),this.initialStateNode);const c=[];let h=0;for(;a.size!=h;){h=a.size;for(let e of a.values())if(!c[e.id]){c[e.id]=!0;for(let t of e.items)t.nonTerminal===o&&1===t.matchPoint&&e.edges.push({tocken:i,next:{id:-1,items:[],edges:[]}});for(let t of n){let n=[];for(let i of e.items)i.derivation.length!==i.matchPoint&&i.derivation[i.matchPoint]===t&&n.push({nonTerminal:i.nonTerminal,derivation:i.derivation,matchPoint:i.matchPoint+1});if(!n.length)continue;y(n,l,this.lexer);const i=P(n);a.has(i)||a.set(i,{id:a.size,items:n,edges:[]}),e.edges.push({tocken:t,next:a.get(i)}),yield}for(let t of r){let n=[];for(let i of e.items)i.derivation.length!==i.matchPoint&&i.derivation[i.matchPoint]===t[0]&&n.push({nonTerminal:i.nonTerminal,derivation:i.derivation,matchPoint:i.matchPoint+1});if(!n.length)continue;y(n,l,this.lexer);const i=P(n);a.has(i)||a.set(i,{id:a.size,items:n,edges:[]}),e.edges.push({tocken:t[0],next:a.get(i)}),yield}}}}predictInput(e,t){if(!this.lexer)throw new Error("[generatePredictTable] must call generateState before generatePredictTable");let r=[];for(e=e.replaceAll(/\s/g,""),r.push({stack:[0],symbols:[],input:[...this.lexer.splitDerivation(e),i]});;){const e=r[r.length-1],i=JSON.parse(JSON.stringify(e)),o=t[e.stack[e.stack.length-1]];let s=!1,l=o.action.get(e.input[0]);if(l.length>1)throw new Error(`move collision ${l}`);if(!l.length){if(1!==o.action.get(n)?.length)throw new Error(`move is empty ${l}`);l=o.action.get(n),s=!0}let a=l[0];if("acc"===a){e.move="接受";break}if(a.startsWith("S"))e.move=`移入${e.input[0]}`,s?i.symbols.push(n):i.symbols.push(i.input.shift()),i.stack.push(Number(a.slice(1)));else{e.move=`根据${a}归约`;const n=a.slice(2,-1).replaceAll(/\s/g,""),r=n.split("->")[0],o=this.lexer.splitDerivation(n.split("->")[1]);for(let e=0;e<o.length;e++)i.stack.pop(),i.symbols.pop();i.symbols.push(r);const s=t[e.stack[i.stack.length-1]];i.stack.push(s.goto.get(r)[0])}r.push(i)}return r}predictInputWithAST(e,t){if(!this.lexer)throw new Error("[generatePredictTable] must call generateState before generatePredictTable");let n=[];e=e.replaceAll(/\s/g,"");for(n.push({stack:[0],symbols:[],input:[...this.lexer.splitDerivation(e),i]});;){const e=n[n.length-1],i=JSON.parse(JSON.stringify(e)),r=t[e.stack[e.stack.length-1]].action.get(e.input[0]);if(r.length>1)throw new Error(`move collision ${r}`);if(!r.length)throw new Error(`move is empty ${r}`);let o=r[0];if("acc"===o){e.move="接受";break}if(o.startsWith("S")){e.move=`移入${e.input[0]}`;const t={id:1,text:i.input.shift()};i.symbols.push(t),i.stack.push(Number(o.slice(1)))}else{e.move=`根据${o}归约`;const n=o.slice(2,-1).replaceAll(/\s/g,""),r=n.split("->")[0],s=this.lexer.splitDerivation(n.split("->")[1]),l={id:2,text:r};l.children||(l.children=[]);for(let e=0;e<s.length;e++){i.stack.pop();const e=i.symbols.pop();l.children.push(e)}i.symbols.push(l);const a=t[e.stack[i.stack.length-1]];i.stack.push(a.goto.get(r)[0])}n.push(i)}return n}*predictInputProgressive(e,t){if(!this.lexer)throw new Error("[generatePredictTable] must call generateState before generatePredictTable");let n=[];e=e.replaceAll(/\s/g,"");for(n.push({stack:[0],symbols:[],input:[...this.lexer.splitDerivation(e),i]}),yield n;;){const e=n[n.length-1],i=JSON.parse(JSON.stringify(e)),r=t[e.stack[e.stack.length-1]].action.get(e.input[0]);if(r.length>1)throw new Error(`move collision ${r}`);if(!r.length)throw new Error(`move is empty ${r}`);let o=r[0];if("acc"===o){e.move="接受";break}if(o.startsWith("S")){e.move=`移入${e.input[0]}`;const t={id:100,text:i.input.shift()};i.symbols.push(t),i.stack.push(Number(o.slice(1)))}else{e.move=`根据${o}归约`;const n=o.slice(2,-1).replaceAll(/\s/g,""),r=n.split("->")[0],s=this.lexer.splitDerivation(n.split("->")[1]),l={id:99,text:r};l.children||(l.children=[]);for(let e=0;e<s.length;e++){i.stack.pop();const e=i.symbols.pop();l.children.push(e)}i.symbols.push(l);const a=t[e.stack[i.stack.length-1]];i.stack.push(a.goto.get(r)[0])}yield n,n.push(i)}return n}generateLR0PredictTable(){if(!this.initialStateNode||!this.allStateNodesMap||!this.lexer)throw new Error("[generatePredictTable] must call generateState before generatePredictTable");const e=[];for(let t of this.allStateNodesMap.values()){let n={id:t.id,action:new Map,goto:new Map};for(let e of this.lexer.nonTerminals)n.goto.set(e,[]);for(let e of this.lexer.terminals)n.action.set(e[0],[]);n.action.set(i,[]);for(let e of t.edges)e.tocken!==i?this.lexer.isTerminal(e.tocken)?n.action.get(e.tocken).push(`S${e.next.id}`):n.goto.get(e.tocken).push(e.next.id):n.action.get(e.tocken).push("acc");for(let e of t.items)if(e.matchPoint===e.derivation.length){for(let t of this.lexer.terminals)n.action.get(t[0]).push(`r(${e.nonTerminal} -> ${e.derivation.join(" ")})`);n.action.get(i)?.length||n.action.get(i).push(`r(${e.nonTerminal} -> ${e.derivation.join(" ")})`)}e.push(n)}return e.sort(((e,t)=>e.id-t.id)),e}generateSLR1PredictTable(){if(!(this.initialStateNode&&this.allStateNodesMap&&this.lexer&&this.grammers))throw new Error("[generatePredictTable] must call generateState before generatePredictTable");const e=h(this.lexer,this.grammers);console.log(e);const t=[];for(let n of this.allStateNodesMap.values()){let r={id:n.id,action:new Map,goto:new Map};for(let e of this.lexer.nonTerminals)r.goto.set(e,[]);for(let e of this.lexer.terminals)r.action.set(e[0],[]);r.action.set(i,[]);for(let e of n.edges)e.tocken!==i?this.lexer.isTerminal(e.tocken)?r.action.get(e.tocken).push(`S${e.next.id}`):r.goto.get(e.tocken).push(e.next.id):r.action.get(e.tocken).push("acc");for(let t of n.items)if(t.matchPoint===t.derivation.length){let n=[];for(let i of e)if(i.tocken===t.nonTerminal){n=[...i.terminals.values()];break}for(let e of n)r.action.get(e[0]).push(`r(${t.nonTerminal} -> ${t.derivation.join(" ")})`)}t.push(r)}return t.sort(((e,t)=>e.id-t.id)),t}get stateGraph(){const e=[],t=n=>{if(e[n.id])return e[n.id];const i={};e[n.id]=i,i.id=n.id;let r=0;n.items?.forEach((e=>{e.matchPoint===e.derivation.length&&r++})),i.isCollision=r>=2,i.items=n.items.map((e=>A(e))),i.edges=[];for(let e of n.edges)i.edges.push({tocken:e.tocken,next:t(e.next)});return i};return t(this.initialStateNode)}}function P(e){e=e.sort(((e,t)=>e<t?-1:1));let t="";for(let n of e)t+=` ${A(n)}`;return t}function A(e){let t=`${e.nonTerminal} -> `;for(let n=0;n<e.derivation.length;n++)n===e.matchPoint&&(n||(t+=" "),t+="· "),n===e.derivation.length-1?t+=`${e.derivation[n]}`:t+=`${e.derivation[n]} `,n===e.derivation.length-1&&e.matchPoint===e.derivation.length&&(t+="·");return t}function y(e,t,n){for(let i=0;i<e.length;i++){const r=e[i],o=r.derivation[r.matchPoint];if(n.isTerminal(o))continue;t.get(o)?.forEach((t=>{let n=!1;for(let i of e)if(i.nonTerminal===o&&0===i.matchPoint){if(i.derivation.length!==t.length)continue;let e=!0;for(let n=0;n<t.length;n++)if(i.derivation[n]!==t[n]){e=!1;break}if(e){n=!0;break}}n||e.push({nonTerminal:o,matchPoint:0,derivation:t})}))}}const E="Augument_S";class ${initialStateNode;allStateNodesMap;lexer;grammers;firstSet;constructor(){this.initialStateNode=null}generateState(e,t,n,r){if(!n||!r){const t=k(e);n=t.nonTerminals,r=t.terminals}s.log("[nonTerminals]",n),s.log("[terminals]",r),this.grammers=e,this.lexer=new m(r,n),this.firstSet=l(this.lexer,e);const o=new Map;for(let t of e){t=t.replaceAll(/\s/g,"");const e=t.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),n=e[0],i=e[1].split("|").filter((e=>e)).map((e=>this.lexer.splitDerivation(e)));o.set(n,i)}s.log(o),this.initialStateNode={id:0,items:[{nonTerminal:E,derivation:[t],matchPoint:0,lookAheadTocken:[i]}],edges:[]},F(this.initialStateNode.items,o,this.lexer,this.firstSet);const a=new Map;this.allStateNodesMap=a,a.set(M(this.initialStateNode.items),this.initialStateNode);const c=[];let h=0;for(;a.size!=h;){h=a.size;for(let e of a.values())if(!c[e.id]){c[e.id]=!0;for(let t of e.items)t.nonTerminal===E&&1===t.matchPoint&&e.edges.push({tocken:i,next:{id:-1,items:[],edges:[]}});for(let t of n){let n=[];for(let i of e.items)i.derivation.length!==i.matchPoint&&i.derivation[i.matchPoint]===t&&n.push({nonTerminal:i.nonTerminal,derivation:i.derivation,matchPoint:i.matchPoint+1,lookAheadTocken:i.lookAheadTocken});if(!n.length)continue;F(n,o,this.lexer,this.firstSet);const i=M(n);a.has(i)||a.set(i,{id:a.size,items:n,edges:[]}),e.edges.push({tocken:t,next:a.get(i)})}for(let t of r){let n=[];for(let i of e.items)i.derivation.length!==i.matchPoint&&i.derivation[i.matchPoint]===t[0]&&n.push({nonTerminal:i.nonTerminal,derivation:i.derivation,matchPoint:i.matchPoint+1,lookAheadTocken:i.lookAheadTocken});if(!n.length)continue;F(n,o,this.lexer,this.firstSet);const i=M(n);a.has(i)||a.set(i,{id:a.size,items:n,edges:[]}),e.edges.push({tocken:t[0],next:a.get(i)})}}}}predictInput(e,t){if(!this.lexer)throw new Error("[generatePredictTable] must call generateState before generatePredictTable");let r=[];for(e=e.replaceAll(/\s/g,""),r.push({stack:[0],symbols:[],input:[...this.lexer.splitDerivation(e),i]});;){const e=r[r.length-1],i=JSON.parse(JSON.stringify(e)),o=e.stack[e.stack.length-1];let s=O(t,o);for(let e of t)if(e.id===o){s=e;break}if(!s)throw new Error(`[predict] stateId: ${o} 的预测行找不到`);let l=!1,a=[];if(a=s.action.get(e.input[0]),a.length>1)throw new Error(`move collision ${a}`);if(!a.length){if(1!==s.action.get(n)?.length)throw new Error(`move is empty ${a}`);a=s.action.get(n),l=!0}let c=a[0];if("acc"===c){e.move="接受";break}if(c.startsWith("S"))e.move=`移入${e.input[0]}`,l?i.symbols.push(n):i.symbols.push(i.input.shift()),i.stack.push(Number(c.slice(1)));else{e.move=`根据${c}归约`;const n=c.slice(2,-1).replaceAll(/\s/g,""),r=n.split("->")[0],o=this.lexer.splitDerivation(n.split("->")[1]);for(let e=0;e<o.length;e++)i.stack.pop(),i.symbols.pop();i.symbols.push(r);const s=O(t,e.stack[i.stack.length-1]);i.stack.push(s.goto.get(r)[0])}r.push(i)}return r}mergeNewNode(e,t){if(e.id=Number(`${e.id}${t.id}`),e.items.length!==t.items.length)throw new Error("[mergeNewNode] 合并核心节点出错");for(let n=0;n<e.items.length;n++){const i=e.items[n],r=t.items[n];for(let e of r.lookAheadTocken)-1===i.lookAheadTocken?.indexOf(e)&&i.lookAheadTocken.push(e)}e.acc=e.acc||t.acc}generateLALRPredictTable(){if(!this.initialStateNode||!this.allStateNodesMap||!this.lexer)throw new Error("[generatePredictTable] must call generateState before generatePredictTable");const e=new Map;(()=>{const t=new Map,n=i=>{if(t.has(i.id))return;t.set(i.id,!0);const r=M(i.items,!1);let o=e.get(r);if(o)this.mergeNewNode(o,i);else{o={id:i.id,items:[],edges:[],acc:i.acc};for(let e of i.items)o.items.push(JSON.parse(JSON.stringify(e)));o.edges=[],e.set(r,o)}for(let e of i.edges)n(e.next)};n(this.initialStateNode)})();const t=new Map;(()=>{const n=new Map,i=r=>{if(n.has(r.id))return;n.set(r.id,!0);const o=M(r.items,!1);t.set(r.id,e.get(o).id);for(let e of r.edges)i(e.next)};i(this.initialStateNode)})();const n=e=>t.get(e),r=[],o=new Map;for(let t of this.allStateNodesMap.values()){if(o.get(n(t.id)))continue;o.set(n(t.id),!0);let s={id:n(t.id),action:new Map,goto:new Map};for(let e of this.lexer.nonTerminals)s.goto.set(e,[]);for(let e of this.lexer.terminals)s.action.set(e[0],[]);s.action.set(i,[]);for(let e of t.edges)e.tocken!==i?this.lexer.isTerminal(e.tocken)?s.action.get(e.tocken).push(`S${n(e.next.id)}`):s.goto.get(e.tocken).push(n(e.next.id)):s.action.get(e.tocken).push("acc");let l=t.items;n(t.id)!==t.id&&(l=e.get(M(t.items,!1)).items);for(let e of l)if(e.matchPoint===e.derivation.length){if(e.nonTerminal===E)continue;for(let t of e.lookAheadTocken)s.action.get(t).push(`r(${e.nonTerminal} -> ${e.derivation.join(" ")})`)}r.push(s)}return r.sort(((e,t)=>e.id-t.id)),r}generateLR1PredictTable(){if(!this.initialStateNode||!this.allStateNodesMap||!this.lexer)throw new Error("[generatePredictTable] must call generateState before generatePredictTable");const e=[];for(let t of this.allStateNodesMap.values()){let n={id:t.id,action:new Map,goto:new Map};for(let e of this.lexer.nonTerminals)n.goto.set(e,[]);for(let e of this.lexer.terminals)n.action.set(e[0],[]);n.action.set(i,[]);for(let e of t.edges)e.tocken!==i?this.lexer.isTerminal(e.tocken)?n.action.get(e.tocken).push(`S${e.next.id}`):n.goto.get(e.tocken).push(e.next.id):n.action.get(e.tocken).push("acc");for(let e of t.items)if(e.matchPoint===e.derivation.length){if(e.nonTerminal===E)continue;for(let t of e.lookAheadTocken)n.action.get(t).push(`r(${e.nonTerminal} -> ${e.derivation.join(" ")})`)}e.push(n)}return e.sort(((e,t)=>e.id-t.id)),e}get stateGraph(){const e=[],t=n=>{if(e[n.id])return e[n.id];const i={};e[n.id]=i,i.id=n.id;let r=0;n.items?.forEach((e=>{e.matchPoint===e.derivation.length&&r++})),i.isCollision=r>=2,i.items=n.items.map((e=>D(e))),i.edges=[];for(let e of n.edges)i.edges.push({tocken:e.tocken,next:t(e.next)});return i};return t(this.initialStateNode)}}function M(e,t=!0){e=e.sort(((e,t)=>e<t?-1:1));let n="";for(let i of e)n+=` ${D(i,t)}`;return n}function D(e,t=!0){let n=`${e.nonTerminal} -> `;for(let t=0;t<e.derivation.length;t++)t===e.matchPoint&&(t||(n+=" "),n+="· "),t===e.derivation.length-1?n+=`${e.derivation[t]}`:n+=`${e.derivation[t]} `,t===e.derivation.length-1&&e.matchPoint===e.derivation.length&&(n+="·");return e.lookAheadTocken?.length&&t&&(n+=" , "+e.lookAheadTocken.join("/")),n}function F(e,t,i,r){for(let o=0;o<e.length;o++){const s=e[o],l=s.derivation[s.matchPoint];if(i.isTerminal(l))continue;const c=t.get(l),h=[...a(i,s.derivation.slice(s.matchPoint+1),r).terminals];h.length&&-1===h.indexOf(n)||h.push(...s.lookAheadTocken),c?.forEach((t=>{let n=!1;for(let i of e)if(i.nonTerminal===l&&0===i.matchPoint){if(i.derivation.length!==t.length)continue;let e=!0;for(let n=0;n<t.length;n++)if(i.derivation[n]!==t[n]){e=!1;break}if(e){n=!0;break}}n||e.push({nonTerminal:l,matchPoint:0,derivation:t,lookAheadTocken:h})}))}}function O(e,t){for(let n of e)if(n.id===t)return n}export{p as LL1Parser,$ as LR1Parser,N as LRParser,m as Lexer,x as checkNeedClearRightRecursion,v as checkNeedliftUpCommonTocken,T as checkNeedunionGrammers,b as clearRightRecursion,k as getTockFromSimpleGrammers,w as liftUpCommonTocken,S as unionGrammers};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
