function e(e,t){return t.map((e=>e.replaceAll(/\s/g,""))).map((t=>{const n=t.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),r=n[1].split("|").filter((e=>e&&"|"!==e)).map((t=>e.splitDerivation(t)));return{nonTerminal:n[0],derivations:r}}))}function t(e){switch(e){case"+":case"*":case"(":case")":return`\\${e}`;default:return e}}const n="ε",r="$";var i;!function(e){e[e.Normal=0]="Normal",e[e.Warnning=1]="Warnning",e[e.Error=2]="Error",e[e.None=3]="None"}(i||(i={}));let o=i.Normal;o=i.Error;var s=new class{logLevel;logChannel;constructor(e=i.Normal,t=console){this.logLevel=e,this.logChannel=t}log(...e){this.logLevel<=i.Normal&&this.logChannel.log("[normal]",...e)}warn(...e){this.logLevel<=i.Warnning&&this.logChannel.warn("[warn]",...e)}error(...e){this.logLevel<=i.Error&&this.logChannel.error("[error]",...e)}logTo(e){this.logChannel=e}}(o);function l(t,r){s.log("[generateFirstSet start]");const i=e(t,r);s.log("[grammers after transferString2Grammers]",i);const o=new Array(...i.map((e=>({tocken:e.nonTerminal,terminals:new Set})))),l=new Map;i.forEach((e=>{l.set(e.nonTerminal,e.derivations)})),o.push(...t.terminals.map((e=>({tocken:e[0],terminals:new Set([e[0]]),isTerminal:!0})))),o.forEach((e=>{if(!e.isTerminal)for(let t of l.get(e.tocken))1!==t.length||t[0]!==n||e.terminals.has(n)||e.terminals.add(n)}));const a=new Map;for(let e of o)a.set(e.tocken,e);for(;;){let e=!1;if(o.forEach((r=>{if(!r.isTerminal)for(let i of l.get(r.tocken))for(let o=0;o<i.length;o++){const l=i[o];if(t.isTerminal(l)){if(r.terminals.has(l)||(s.log(l),e=!0,r.terminals.add(l)),l!==n)break}else{const t=a.get(l);if(t.terminals.forEach((t=>{t!==n&&(r.terminals.has(t)||(e=!0,r.terminals.add(t)))})),!t.terminals.has(n))break}o===i.length-1&&r.terminals.add(n)}})),!e)break}return o.filter((e=>!e.isTerminal)).sort(((e,t)=>e.tocken<t.tocken?-1:1)).map((e=>(e.terminals=new Set(Array.from(e.terminals).sort(((e,t)=>e<t?-1:1))),e)))}function a(e,t,r){const i=new Set;for(let o=0;o<t.length;o++){const s=t[o];if(e.isTerminal(s)){if(s!==n){i.add(s);break}}else if(r.get(s)?.terminals.forEach((e=>{i.add(e)})),!r.get(s).terminals.has(n))break;o===t.length-1&&i.add(n)}return{tocken:t.join(""),terminals:i}}function c(t,i,o){s.log("[generateFllowSet start]"),o=o?Array.from(o):l(t,i);const a=e(t,i);s.log("[grammers after transferString2Grammers]",a);const c=new Array(...a.map((e=>({tocken:e.nonTerminal,terminals:new Set([r])})))),m=new Map;a.forEach((e=>{m.set(e.nonTerminal,e.derivations)})),c.push(...t.terminals.map((e=>({tocken:e[0],terminals:new Set([r]),isTerminal:!0}))));const h=new Map;for(let e of c)h.set(e.tocken,e);o.push(...t.terminals.map((e=>({tocken:e[0],terminals:new Set([e[0]]),isTerminal:!0}))));const f=new Map;for(let e of o)f.set(e.tocken,e);for(;;){let e=!1;if(a.forEach((t=>{for(let r of t.derivations)for(let t=r.length-2;t>=0;t--){const i=h.get(r[t]);for(let o=t+1;o<r.length;o++){const t=f.get(r[o]).terminals;for(let r of t)r!==n&&(i?.terminals.has(r)||(e=!0,i?.terminals.add(r)));if(!t.has(n))break}}})),a.forEach((t=>{const r=h.get(t.nonTerminal);for(let i of t.derivations)for(let t=i.length-1;t>=0;t--){const o=i[t],s=h.get(o);for(let t of r.terminals)t!==n&&(s?.terminals.has(t)||(e=!0,s?.terminals.add(t)));if(!f.get(o).terminals.has(n))break}})),!e)break}return c.filter((e=>!e.isTerminal)).sort(((e,t)=>e.tocken<t.tocken?-1:1)).map((e=>(e.terminals=new Set(Array.from(e.terminals).sort(((e,t)=>e<t?-1:1))),e)))}class m{nonTerminals;terminals;currentLine=0;currentColumn=0;source="";constructor(e,t){this.nonTerminals=[...t],this.terminals=[...e]}setSource(e){this.source=e,this.currentLine=0,this.currentColumn=0}remainString(){return this.source.slice(this.currentColumn)}next(){if(this.currentColumn>=this.source.length)return{tocken:r,origin:r};for(let e of this.terminals){const t=this.source.slice(this.currentColumn).match(e[1]);if(t)return{tocken:e[0],origin:t[0]}}throw new Error(`[lexer next]: match next Terminal error \n sourecInput: ${this.source}\n remainString: ${this.source.slice(this.currentColumn)}`)}pop(){try{const e=this.next();return e.tocken!==r&&(this.currentColumn+=e.origin.length),e}catch(e){throw e}}nextNotEmptyTerminal(){for(;;){const e=this.next();if("whiteSpace"!==e.tocken)return e;this.currentColumn+=e.origin.length}}nextNotEmpty(e){const t=this.currentColumn;for(let t=0;t<e-1;t++)this.popNotEmptyTerminal();const n=this.nextNotEmptyTerminal();return this.currentColumn=t,n}popNotEmptyTerminal(){const e=this.nextNotEmptyTerminal();return e.tocken!==r&&(this.currentColumn+=e.origin.length),e}isTerminal(e){let t=!0;return this.nonTerminals.some((n=>n===e&&(t=!1,!0))),t}splitDerivation(e){const n=[];let r=0;const i=e;for(;e.length;){for(let t of this.nonTerminals){const r=e.match(new RegExp("^"+t));if(r){n.push(t),e=e.slice(r[0].length);break}}for(let r of this.terminals){const i=e.match(new RegExp("^"+t(r[0])));if(i){n.push(r[0]),e=e.slice(i[0].length);break}}if(r++,r>5e4)throw new Error(`[splitDerivation] error: excute over MAX_EXCUTE str: ${i}  remaining str: ${e} `)}return n}getNewNonTerminal(e){let t=e;for(;;)if(t+="'",-1===this.nonTerminals.indexOf(t))return this.nonTerminals.unshift(t),t}}function h(t,r,i,o){const l=e(t,r),c=[],m=new Map;t.nonTerminals.forEach((e=>{const t={nonTerminal:e,terminal2Derivation:new Map};m.set(e,t),c.push(t)}));const h=new Map,f=new Map;for(let e of o)f.set(e.tocken,e);for(let e of i)h.set(e.tocken,e);return l.forEach((e=>{for(let r of e.derivations){const i=a(t,r,h),o=m.get(e.nonTerminal);s.log(i);let l=new Map;for(let t of i.terminals){if(t===n)continue;let i=o?.terminal2Derivation.get(t);l.set(t,!0),i||(i={nonTerminal:e.nonTerminal,derivations:[]},o?.terminal2Derivation.set(t,i)),i.derivations.push(r)}if(i.terminals.has(n))for(let t of f.get(e.nonTerminal).terminals){if(l.has(t))continue;let n=o?.terminal2Derivation.get(t);n||(n={nonTerminal:e.nonTerminal,derivations:[]},o?.terminal2Derivation.set(t,n)),n.derivations.push(r)}}})),c}function f(e,t){for(let n of e.terminals){const e=n[0];t.forEach((t=>{const n=t.terminal2Derivation.get(e);if(n&&n.derivations.length>1)return!1}))}return!0}class g{lexer;textGrammers;constructor(e,t,n){this.lexer=new m(e,t),this.textGrammers=n}getFirstSet(){return l(this.lexer,this.textGrammers)}getFollowSet(e){return e||(e=this.getFirstSet()),c(this.lexer,this.textGrammers,e)}getPredictTable(e,t){return e||(e=this.getFirstSet()),t||(t=this.getFollowSet(e)),h(this.lexer,this.textGrammers,e,t)}getPredictProcess(e,t,i){if(i||(i=h(this.lexer,this.textGrammers,this.getFirstSet(),this.getFollowSet())),!this.lexer.nonTerminals.some((e=>t===e)))throw new Error("1");return function(e,t,i,o){let l=i.replaceAll(/\s/g,"");const a=[];let c=1;const m={id:0,text:o,check:!1},h=[m];let f={parseStack:[r,o],remainingInput:i,parseAction:""};e.setSource(l);const g=new Map;t.forEach((e=>{g.set(e.nonTerminal,e)}));try{for(;;){const t=f.parseStack[f.parseStack.length-1];if(e.isTerminal(t)){const n=e.next();if(t!==n.tocken)throw new Error(`[预测错误] 非终结符匹配错误: ${t} stack: ${f.parseStack} 剩余字符串: ${e.remainString()}`);{if(f.parseAction=`match ${n.tocken}${n.tocken===n.origin?"":": "+n.origin}`,a.push(f),f=JSON.parse(JSON.stringify(f)),e.pop(),f.parseAction="",f.remainingInput=e.remainString(),f.parseStack.pop(),0===f.parseStack.length)break;const t=h.pop();t.children||(t.children=[]),t.children.push({id:c++,text:n.origin,check:!1})}continue}const r=e.next(),i=g.get(t).terminal2Derivation.get(r.tocken);if(1!==i?.derivations?.length)throw new Error(`[预测错误] 分析输入错误  终结符: ${r}   剩余字符串: ${e.remainString()} 文法: ${i} `);f.parseAction=`Predict ${i.nonTerminal} => ${i.derivations[0].join(" ")}`,s.log("[predict State]",f),a.push(f),f=JSON.parse(JSON.stringify(f)),f.parseStack.pop();const o=h.pop(),l=i.derivations[0].filter((e=>e!==n));o.children||(o.children=[]);for(let e of l)o.children.push({id:c++,text:e,check:!1});h.push(...[...o.children].reverse()),f.parseStack.push(...l.reverse()),f.parseAction="",f.remainingInput=e.remainString()}}catch(e){f.parseAction=e.toString(),a.push(f)}return a.astNode=m,a}(this.lexer,i,e,t)}checkPredickTableIsValid(e){return f(this.lexer,e)}checkIsLL0(){return f(this.lexer,this.getPredictTable())}getFirstSetProgressive(){return function*(t,r){yield["1. 如果X式一个终结符号，那么FIRST(X) = X ","2. 如果 X => ε 是一个产生式，那么将e加人到 FIRST（X)中。","3. A => B0B1B2B3\n            i = 0\n            FIRST(Bi) - EmptyCharacter 加入到 FIRST(A)中\n            如果FIRST(B1)不含有EmptyCharacter退出循环\n            若B0 - B3均含有EmptyCharacter 将EmptyCharacter加入到FIRST(A)中\n        ","4. 去除所有终结符号的表项"],s.log("[generateFirstSet start]");const i=e(t,r);s.log("[grammers after transferString2Grammers]",i);const o=new Array(...i.map((e=>({tocken:e.nonTerminal,terminals:new Set})))),l=new Map;i.forEach((e=>{l.set(e.nonTerminal,e.derivations)})),o.push(...t.terminals.map((e=>({tocken:e[0],terminals:new Set([e[0]]),isTerminal:!0})))),yield{ruleIndex:0,result:o},o.forEach((e=>{if(!e.isTerminal)for(let t of l.get(e.tocken))1!==t.length||t[0]!==n||e.terminals.has(n)||e.terminals.add(n)})),yield{ruleIndex:1,result:o};const a=new Map;for(let e of o)a.set(e.tocken,e);for(;;){let e=!1;if(o.forEach((r=>{if(!r.isTerminal)for(let i of l.get(r.tocken))for(let o=0;o<i.length;o++){const l=i[o];if(t.isTerminal(l)){if(r.terminals.has(l)||(s.log(l),e=!0,r.terminals.add(l)),l!==n)break}else{const t=a.get(l);if(t.terminals.forEach((t=>{t!==n&&(r.terminals.has(t)||(e=!0,r.terminals.add(t)))})),!t.terminals.has(n))break}o===i.length-1&&r.terminals.add(n)}})),!e)break;yield{ruleIndex:2,result:o}}yield{ruleIndex:3,result:o.filter((e=>!e.isTerminal)).sort(((e,t)=>e.tocken<t.tocken?-1:1)).map((e=>(e.terminals=new Set(Array.from(e.terminals).sort(((e,t)=>e<t?-1:1))),e)))}}(this.lexer,this.textGrammers)}getFollowSetProgressive(t){return t||(t=this.getFirstSet()),function*(t,i,o){yield["1. 将$放到FOLLOW(S)中","2. 如果存在一个产生式A => aBb ， 那么FIRST(b) 中除ε 之外的所有符号都在FOLLOW(B)中。attention: A => aBCd 那么把first(Cd)加入到Follow(B)中去","3.如果存在一个产生式 A => aB ， 或存在产生式 A => aBb 且FIRST(b) 包含 ε ，那么FOLLOW(A)中的所有符号都在FOLLOW(B)中。","4. 去除所有终结符号的表项"],s.log("[generateFllowSet start]"),o=o?Array.from(o):l(t,i);const a=e(t,i);s.log("[grammers after transferString2Grammers]",a);const c=new Array(...a.map((e=>({tocken:e.nonTerminal,terminals:new Set([r])})))),m=new Map;a.forEach((e=>{m.set(e.nonTerminal,e.derivations)})),c.push(...t.terminals.map((e=>({tocken:e[0],terminals:new Set([r]),isTerminal:!0})))),yield{ruleIndex:0,result:c};const h=new Map;for(let e of c)h.set(e.tocken,e);o.push(...t.terminals.map((e=>({tocken:e[0],terminals:new Set([e[0]]),isTerminal:!0}))));const f=new Map;for(let e of o)f.set(e.tocken,e);for(;;){let e=!1;if(a.forEach((t=>{for(let r of t.derivations)for(let t=r.length-2;t>=0;t--){const i=h.get(r[t]);for(let o=t+1;o<r.length;o++){const t=f.get(r[o]).terminals;for(let r of t)r!==n&&(i?.terminals.has(r)||(e=!0,i?.terminals.add(r)));if(!t.has(n))break}}})),e&&(yield{ruleIndex:1,result:c},e=!1),a.forEach((t=>{const r=h.get(t.nonTerminal);for(let i of t.derivations)for(let t=i.length-1;t>=0;t--){const o=i[t],s=h.get(o);for(let t of r.terminals)t!==n&&(s?.terminals.has(t)||(e=!0,s?.terminals.add(t)));if(!f.get(o).terminals.has(n))break}})),e&&(yield{ruleIndex:2,result:c}),!e)break}yield{ruleIndex:3,result:c.filter((e=>!e.isTerminal)).sort(((e,t)=>e.tocken<t.tocken?-1:1)).map((e=>(e.terminals=new Set(Array.from(e.terminals).sort(((e,t)=>e<t?-1:1))),e)))}}(this.lexer,this.textGrammers,t)}getPredictProcessProgressive(e,t,i){if(i||(i=h(this.lexer,this.textGrammers,this.getFirstSet(),this.getFollowSet())),!this.lexer.nonTerminals.some((e=>t===e)))throw new Error("1");return function*(e,t,i,o){let l=i.replaceAll(/\s/g,"");const a=[];let c=1;const m={id:0,text:o,check:!1};a.astNode=m;const h=[m];let f={parseStack:[r,o],remainingInput:i,parseAction:""};e.setSource(l);const g=new Map;t.forEach((e=>{g.set(e.nonTerminal,e)})),yield a;try{for(;;){const t=f.parseStack[f.parseStack.length-1];if(e.isTerminal(t)){const n=e.next();if(t!==n.tocken)throw new Error(`[预测错误] 非终结符匹配错误: ${t} stack: ${f.parseStack} 剩余字符串: ${e.remainString()}`);{if(f.parseAction=`match ${n.tocken}${n.tocken===n.origin?"":": "+n.origin}`,a.push(f),f=JSON.parse(JSON.stringify(f)),e.pop(),f.parseAction="",f.remainingInput=e.remainString(),f.parseStack.pop(),0===f.parseStack.length)break;const t=h.pop();t.children||(t.children=[]),t.children.push({id:c++,text:n.origin,check:!1})}yield a;continue}const r=e.next(),i=g.get(t).terminal2Derivation.get(r.tocken);if(1!==i?.derivations?.length)throw new Error(`[预测错误] 分析输入错误  终结符: ${r}   剩余字符串: ${e.remainString()} 文法: ${i} `);f.parseAction=`Predict ${i.nonTerminal} => ${i.derivations[0].join(" ")}`,s.log("[predict State]",f),a.push(f),f=JSON.parse(JSON.stringify(f)),f.parseStack.pop();const o=h.pop(),l=i.derivations[0].filter((e=>e!==n));o.children||(o.children=[]);for(let e of l)o.children.push({id:c++,text:e,check:!1});h.push(...[...o.children].reverse()),f.parseStack.push(...l.reverse()),f.parseAction="",f.remainingInput=e.remainString(),yield a}}catch(e){f.parseAction=e.toString(),a.push(f)}return a.astNode=m,a}(this.lexer,i,e,t)}getPredictTableProgressive(t,r){return t||(t=this.getFirstSet()),r||(r=this.getFollowSet(t)),function*(t,r,i,o){yield["1. 对 First(u) 中的所有终结符 a （不含 ε ），置 M[A, a] = A -> u","2. 若 First(u) 含 ε ，则对 Follow(A) 中的所有符号 a （可含 $ ），置 M[A, a] = A -> u"];const l=e(t,r),c=[],m=new Map;t.nonTerminals.forEach((e=>{const t={nonTerminal:e,terminal2Derivation:new Map};m.set(e,t),c.push(t)}));const h=new Map,f=new Map;for(let e of o)f.set(e.tocken,e);for(let e of i)h.set(e.tocken,e);for(let e of l)for(let r of e.derivations){const i=a(t,r,h),o=m.get(e.nonTerminal);s.log(i);for(let t of i.terminals){if(t===n)continue;let i=o?.terminal2Derivation.get(t);i||(i={nonTerminal:e.nonTerminal,derivations:[]},o?.terminal2Derivation.set(t,i)),i.derivations.push(r),yield{ruleIndex:0,result:c}}if(i.terminals.has(n))for(let t of f.get(e.nonTerminal).terminals){let n=o?.terminal2Derivation.get(t);n||(n={nonTerminal:e.nonTerminal,derivations:[]},o?.terminal2Derivation.set(t,n)),n.derivations.push(r),yield{ruleIndex:1,result:c}}}}(this.lexer,this.textGrammers,t,r)}}const p=/^[A-Z]'*/,u=/[a-z|\u0391-\u03C9]/;function d(e){const t=new Set,n=new Set;return e.forEach((e=>{const r=e.replaceAll(/\s/g,"").split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),i=r[0];t.add(i),r[1].split("|").filter((e=>e&&"|"!==e)).forEach((e=>{for(;e.length;){let r=null;if(r=e.match(p),r)t.add(r[0]),e=e.slice(r[0].length);else{if(r=e.match(u),!r)throw new Error(`[getTockFromSimpleGrammers error] cant recognize the character remaining: ${e}`);n.add(JSON.stringify([r[0],"^"+r[0]])),e=e.slice(r[0].length)}}}))})),{nonTerminals:Array.from(t).sort(((e,t)=>t.length-e.length)),terminals:Array.from(n).map((e=>{const t=JSON.parse(e);return t[1]=new RegExp(t[1]),t}))}}function T(e){let t=new Map;for(let n of e){n=n.replaceAll(/\s/g,"");const e=n.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),r=e[0],i=e[1];if(t.has(r))return!0;t.set(r,[i])}return!1}function k(e,t,n){let r=new Map;const i=[];if(!t||!n){const r=d(e);t=r.nonTerminals,n=r.terminals}let o=new m(n,t);e.forEach((e=>{const t=(e=e.replaceAll(/\s/g,"")).split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),n=t[0],l=t[1].split("|").filter((e=>e)).map((e=>(s.log("[debug]",i),o.splitDerivation(e))));if(r.has(n)){const e=r.get(n);l.forEach((t=>{const n=t.join(" ");-1===e?.indexOf(n)&&e.push(n)}))}else r.set(n,l.map((e=>e.join(" "))))}));for(let e of r.keys()){const t=[...new Set(r.get(e))];i.push(`${e} => ${t.join("|")}`.split("|").join(" | "))}return s.log(i),i}function S(e,t,n){let r=e;if(!t||!n){const r=d(e);t=r.nonTerminals,n=r.terminals}let i=new m(n,t);for(let e of r){e=e.replaceAll(/\s/g,"");const t=e.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e))[1].split("|").filter((e=>e)).map((e=>(s.log("[debug]",r),i.splitDerivation(e)))),n=new Map;t.forEach((e=>{let t=n.get(e[0]);t?t.push(e.slice(1)):t=[e.slice(1)],n.set(e[0],t)}));for(let e of n.keys())if(1!==n.get(e)?.length)return!0}return!1}function w(e,t,n){let r=e;if(!t||!n){const r=d(e);t=r.nonTerminals,n=r.terminals}let i=new m(n,t);for(;;){let e=[];const t=r.map((t=>{const n=(t=t.replaceAll(/\s/g,"")).split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),o=n[0],l=n[1].split("|").filter((e=>e)).map((e=>(s.log("[debug]",r),i.splitDerivation(e)))),a=[],c=new Map;l.forEach((e=>{let t=c.get(e[0]);t?t.push(e.slice(1)):t=[e.slice(1)],c.set(e[0],t)}));for(let t of c.keys()){if(1===c.get(t)?.length){a.push(t+c.get(t)[0].join(""));continue}const n=c.get(t),r=i.getNewNonTerminal(o);a.push(t+r),e.push(r+" => "+n?.map((e=>e.join(" "))).join(" | "))}return o+" => "+a.join(" | ")}));s.log("[pre]",t,e);const n=[...t,...e];if(s.log("[com]",r,n),r.length===n.length)break;r=n}return r}function v(e,t,n){if(!t||!n){const r=d(e);t=r.nonTerminals,n=r.terminals}s.log("[nonTerminals]",t),s.log("[terminals]",n);let r=new m(n,t);const i=new Map;for(let t of e){t=t.replaceAll(/\s/g,"");const e=t.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),n=e[0],o=e[1].split("|").filter((e=>e)).map((e=>r.splitDerivation(e)));i.set(n,o)}s.log("[nonTerminals2DerivationMap]",i);for(let e=0;e<t.length;e++){const n=i.get(t[e]);for(let r=n.length-1;r>=0;r--){if(n[r][0]===t[e])return!0}}return!1}function x(e,t,r){const i=[];if(!t||!r){const n=d(e);t=n.nonTerminals,r=n.terminals}s.log("[nonTerminals]",t),s.log("[terminals]",r);let o=new m(r,t);const l=new Map;for(let t of e){t=t.replaceAll(/\s/g,"");const e=t.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),n=e[0],r=e[1].split("|").filter((e=>e)).map((e=>o.splitDerivation(e)));l.set(n,r)}s.log("[nonTerminals2DerivationMap]",l);for(let e=0;e<t.length;e++){const r=l.get(t[e]);for(let n=0;n<e;n++){const e=l.get(t[n]);for(let i=r.length-1;i>=0;i--){const o=r[i];if(o[0]===t[n]){s.log(o,t[n]);for(let t of e)s.log("[-]",t),r?.push([...t,...o.slice(1)]);r?.splice(i,1)}}}const i=[];for(let n=r.length-1;n>=0;n--){r[n][0]===t[e]&&i.push(n)}if(i.length){const s=o.getNewNonTerminal(t[e]),a=[],c=[];for(let e=r.length-1;e>=0;e--)-1===i.indexOf(e)&&a.push([...r[e][0]===n?r[e].slice(1):r[e],s]);for(let e of i)c.push([...r[e].slice(1),s]);c.push([n]),l.set(t[e],[...a,...i.length?[]:r]),l.set(s,c)}s.log("[nonTerminals2DerivationMap in process]",l,r)}for(let e of l.keys()){const t=l.get(e).map((e=>e.join(" "))).join(" | ");i.push(`${e} => ${t}`)}return i}class E{initialStateNode;allStateNodesMap;lexer;grammers;constructor(){this.initialStateNode=null}generateState(e,t,n,i){if(!n||!i){const t=d(e);n=t.nonTerminals,i=t.terminals}const o="Augument_S";s.log("[nonTerminals]",n),s.log("[terminals]",i),this.grammers=e,this.lexer=new m(i,n);const l=new Map;for(let t of e){t=t.replaceAll(/\s/g,"");const e=t.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),n=e[0],r=e[1].split("|").filter((e=>e)).map((e=>this.lexer.splitDerivation(e)));l.set(n,r)}s.log(l),this.initialStateNode={id:0,items:[{nonTerminal:o,derivation:[t],matchPoint:0}],edges:[]},N(this.initialStateNode.items,l,this.lexer);const a=new Map;this.allStateNodesMap=a,a.set(y(this.initialStateNode.items),this.initialStateNode);const c=[];let h=0;for(;a.size!=h;){h=a.size;for(let e of a.values())if(!c[e.id]){c[e.id]=!0;for(let t of e.items)t.nonTerminal===o&&1===t.matchPoint&&e.edges.push({tocken:r,next:{id:-1,items:[],edges:[]}});for(let t of n){let n=[];for(let r of e.items)r.derivation.length!==r.matchPoint&&r.derivation[r.matchPoint]===t&&n.push({nonTerminal:r.nonTerminal,derivation:r.derivation,matchPoint:r.matchPoint+1});if(!n.length)continue;N(n,l,this.lexer);const r=y(n);a.has(r)||a.set(r,{id:a.size,items:n,edges:[]}),e.edges.push({tocken:t,next:a.get(r)})}for(let t of i){let n=[];for(let r of e.items)r.derivation.length!==r.matchPoint&&r.derivation[r.matchPoint]===t[0]&&n.push({nonTerminal:r.nonTerminal,derivation:r.derivation,matchPoint:r.matchPoint+1});if(!n.length)continue;N(n,l,this.lexer);const r=y(n);a.has(r)||a.set(r,{id:a.size,items:n,edges:[]}),e.edges.push({tocken:t[0],next:a.get(r)})}}}}*generateStateProgressive(e,t,n,i){if(!n||!i){const t=d(e);n=t.nonTerminals,i=t.terminals}const o="Augument_S";s.log("[nonTerminals]",n),s.log("[terminals]",i),this.grammers=e,this.lexer=new m(i,n);const l=new Map;for(let t of e){t=t.replaceAll(/\s/g,"");const e=t.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),n=e[0],r=e[1].split("|").filter((e=>e)).map((e=>this.lexer.splitDerivation(e)));l.set(n,r)}s.log(l),this.initialStateNode={id:0,items:[{nonTerminal:o,derivation:[t],matchPoint:0}],edges:[]},N(this.initialStateNode.items,l,this.lexer),yield;const a=new Map;this.allStateNodesMap=a,a.set(y(this.initialStateNode.items),this.initialStateNode);const c=[];let h=0;for(;a.size!=h;){h=a.size;for(let e of a.values())if(!c[e.id]){c[e.id]=!0;for(let t of e.items)t.nonTerminal===o&&1===t.matchPoint&&e.edges.push({tocken:r,next:{id:-1,items:[],edges:[]}});for(let t of n){let n=[];for(let r of e.items)r.derivation.length!==r.matchPoint&&r.derivation[r.matchPoint]===t&&n.push({nonTerminal:r.nonTerminal,derivation:r.derivation,matchPoint:r.matchPoint+1});if(!n.length)continue;N(n,l,this.lexer);const r=y(n);a.has(r)||a.set(r,{id:a.size,items:n,edges:[]}),e.edges.push({tocken:t,next:a.get(r)}),yield}for(let t of i){let n=[];for(let r of e.items)r.derivation.length!==r.matchPoint&&r.derivation[r.matchPoint]===t[0]&&n.push({nonTerminal:r.nonTerminal,derivation:r.derivation,matchPoint:r.matchPoint+1});if(!n.length)continue;N(n,l,this.lexer);const r=y(n);a.has(r)||a.set(r,{id:a.size,items:n,edges:[]}),e.edges.push({tocken:t[0],next:a.get(r)}),yield}}}}predictInput(e,t){if(!this.lexer)throw new Error("[generatePredictTable] must call generateState before generatePredictTable");let i=[];for(e=e.replaceAll(/\s/g,""),i.push({stack:[0],symbols:[],input:[...this.lexer.splitDerivation(e),r]});;){const e=i[i.length-1],r=JSON.parse(JSON.stringify(e)),o=t[e.stack[e.stack.length-1]];let s=!1,l=o.action.get(e.input[0]);if(l.length>1)throw new Error(`move collision ${l}`);if(!l.length){if(1!==o.action.get(n)?.length)throw new Error(`move is empty ${l}`);l=o.action.get(n),s=!0}let a=l[0];if("acc"===a){e.move="接受";break}if(a.startsWith("S"))e.move=`移入${e.input[0]}`,s?r.symbols.push(n):r.symbols.push(r.input.shift()),r.stack.push(Number(a.slice(1)));else{e.move=`根据${a}归约`;const n=a.slice(2,-1).replaceAll(/\s/g,""),i=n.split("=>")[0],o=this.lexer.splitDerivation(n.split("=>")[1]);for(let e=0;e<o.length;e++)r.stack.pop(),r.symbols.pop();r.symbols.push(i);const s=t[e.stack[r.stack.length-1]];r.stack.push(s.goto.get(i)[0])}i.push(r)}return i}generateLR0PredictTable(){if(!this.initialStateNode||!this.allStateNodesMap||!this.lexer)throw new Error("[generatePredictTable] must call generateState before generatePredictTable");const e=[];for(let t of this.allStateNodesMap.values()){let n={id:t.id,action:new Map,goto:new Map};for(let e of this.lexer.nonTerminals)n.goto.set(e,[]);for(let e of this.lexer.terminals)n.action.set(e[0],[]);n.action.set(r,[]);for(let e of t.edges)e.tocken!==r?this.lexer.isTerminal(e.tocken)?n.action.get(e.tocken).push(`S${e.next.id}`):n.goto.get(e.tocken).push(e.next.id):n.action.get(e.tocken).push("acc");for(let e of t.items)if(e.matchPoint===e.derivation.length)for(let t of this.lexer.terminals)n.action.get(t[0]).push(`r(${e.nonTerminal} => ${e.derivation.join(" ")})`);e.push(n)}return e.sort(((e,t)=>e.id-t.id)),e}generateSLR1PredictTable(){if(!(this.initialStateNode&&this.allStateNodesMap&&this.lexer&&this.grammers))throw new Error("[generatePredictTable] must call generateState before generatePredictTable");const e=c(this.lexer,this.grammers),t=[];for(let n of this.allStateNodesMap.values()){let i={id:n.id,action:new Map,goto:new Map};for(let e of this.lexer.nonTerminals)i.goto.set(e,[]);for(let e of this.lexer.terminals)i.action.set(e[0],[]);i.action.set(r,[]);for(let e of n.edges)e.tocken!==r?this.lexer.isTerminal(e.tocken)?i.action.get(e.tocken).push(`S${e.next.id}`):i.goto.get(e.tocken).push(e.next.id):i.action.get(e.tocken).push("acc");for(let t of n.items)if(t.matchPoint===t.derivation.length){let n=[];for(let r of e)if(r.tocken===t.nonTerminal){n=[...r.terminals.values()];break}for(let e of n)i.action.get(e[0]).push(`r(${t.nonTerminal} => ${t.derivation.join(" ")})`)}t.push(i)}return t.sort(((e,t)=>e.id-t.id)),t}get stateGraph(){const e=[],t=n=>{if(e[n.id])return e[n.id];const r={};e[n.id]=r,r.id=n.id,r.items=n.items.map((e=>A(e))),r.edges=[];for(let e of n.edges)r.edges.push({tocken:e.tocken,next:t(e.next)});return r};return t(this.initialStateNode)}}function y(e){e=e.sort(((e,t)=>e<t?-1:1));let t="";for(let n of e)t+=` ${A(n)}`;return t}function A(e){let t=`${e.nonTerminal} => `;for(let n=0;n<e.derivation.length;n++)n===e.matchPoint&&(n||(t+=" "),t+="· "),n===e.derivation.length-1?t+=`${e.derivation[n]}`:t+=`${e.derivation[n]} `;return t}function N(e,t,n){for(let r=0;r<e.length;r++){const i=e[r],o=i.derivation[i.matchPoint];if(n.isTerminal(o))continue;t.get(o)?.forEach((t=>{let n=!1;for(let r of e)if(r.nonTerminal===o&&0===r.matchPoint){if(r.derivation.length!==t.length)continue;let e=!0;for(let n=0;n<t.length;n++)if(r.derivation[n]!==t[n]){e=!1;break}if(e){n=!0;break}}n||e.push({nonTerminal:o,matchPoint:0,derivation:t})}))}}export{g as LL1Parser,E as LRParser,m as Lexer,v as checkNeedClearRightRecursion,S as checkNeedliftUpCommonTocken,T as checkNeedunionGrammers,x as clearRightRecursion,d as getTockFromSimpleGrammers,w as liftUpCommonTocken,k as unionGrammers};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
