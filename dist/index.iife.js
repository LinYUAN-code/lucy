var lucy=function(e){"use strict";function t(e,t){return t.map((e=>e.replaceAll(/\s/g,""))).map((t=>{const n=t.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),r=n[1].split("|").filter((e=>e&&"|"!==e)).map((t=>e.splitDerivation(t)));return{nonTerminal:n[0],derivations:r}}))}function n(e){switch(e){case"+":case"*":case"(":case")":return`\\${e}`;default:return e}}const r="ε",i="$";var o;!function(e){e[e.Normal=0]="Normal",e[e.Warnning=1]="Warnning",e[e.Error=2]="Error",e[e.None=3]="None"}(o||(o={}));let s=o.Normal;s=o.Error;var l=new class{logLevel;logChannel;constructor(e=o.Normal,t=console){this.logLevel=e,this.logChannel=t}log(...e){this.logLevel<=o.Normal&&this.logChannel.log("[normal]",...e)}warn(...e){this.logLevel<=o.Warnning&&this.logChannel.warn("[warn]",...e)}error(...e){this.logLevel<=o.Error&&this.logChannel.error("[error]",...e)}logTo(e){this.logChannel=e}}(s);function a(e,n){l.log("[generateFirstSet start]");const i=t(e,n);l.log("[grammers after transferString2Grammers]",i);const o=new Array(...i.map((e=>({tocken:e.nonTerminal,terminals:new Set})))),s=new Map;i.forEach((e=>{s.set(e.nonTerminal,e.derivations)})),o.push(...e.terminals.map((e=>({tocken:e[0],terminals:new Set([e[0]]),isTerminal:!0})))),o.forEach((e=>{if(!e.isTerminal)for(let t of s.get(e.tocken))1!==t.length||t[0]!==r||e.terminals.has(r)||e.terminals.add(r)}));const a=new Map;for(let e of o)a.set(e.tocken,e);for(;;){let t=!1;if(o.forEach((n=>{if(!n.isTerminal)for(let i of s.get(n.tocken))for(let o=0;o<i.length;o++){const s=i[o];if(e.isTerminal(s)){if(n.terminals.has(s)||(l.log(s),t=!0,n.terminals.add(s)),s!==r)break}else{const e=a.get(s);if(e.terminals.forEach((e=>{e!==r&&(n.terminals.has(e)||(t=!0,n.terminals.add(e)))})),!e.terminals.has(r))break}o===i.length-1&&n.terminals.add(r)}})),!t)break}return o.filter((e=>!e.isTerminal)).sort(((e,t)=>e.tocken<t.tocken?-1:1)).map((e=>(e.terminals=new Set(Array.from(e.terminals).sort(((e,t)=>e<t?-1:1))),e)))}function c(e,t,n){const i=new Set;for(let o=0;o<t.length;o++){const s=t[o];if(e.isTerminal(s)){if(s!==r){i.add(s);break}}else if(n.get(s)?.terminals.forEach((e=>{i.add(e)})),!n.get(s).terminals.has(r))break;o===t.length-1&&i.add(r)}return{tocken:t.join(""),terminals:i}}function m(e,n,o){l.log("[generateFllowSet start]"),o=o?Array.from(o):a(e,n);const s=t(e,n);l.log("[grammers after transferString2Grammers]",s);const c=new Array(...s.map((e=>({tocken:e.nonTerminal,terminals:new Set([i])})))),m=new Map;s.forEach((e=>{m.set(e.nonTerminal,e.derivations)})),c.push(...e.terminals.map((e=>({tocken:e[0],terminals:new Set([i]),isTerminal:!0}))));const h=new Map;for(let e of c)h.set(e.tocken,e);o.push(...e.terminals.map((e=>({tocken:e[0],terminals:new Set([e[0]]),isTerminal:!0}))));const f=new Map;for(let e of o)f.set(e.tocken,e);for(;;){let e=!1;if(s.forEach((t=>{for(let n of t.derivations)for(let t=n.length-2;t>=0;t--){const i=h.get(n[t]);for(let o=t+1;o<n.length;o++){const t=f.get(n[o]).terminals;for(let n of t)n!==r&&(i?.terminals.has(n)||(e=!0,i?.terminals.add(n)));if(!t.has(r))break}}})),s.forEach((t=>{const n=h.get(t.nonTerminal);for(let i of t.derivations)for(let t=i.length-1;t>=0;t--){const o=i[t],s=h.get(o);for(let t of n.terminals)t!==r&&(s?.terminals.has(t)||(e=!0,s?.terminals.add(t)));if(!f.get(o).terminals.has(r))break}})),!e)break}return c.filter((e=>!e.isTerminal)).sort(((e,t)=>e.tocken<t.tocken?-1:1)).map((e=>(e.terminals=new Set(Array.from(e.terminals).sort(((e,t)=>e<t?-1:1))),e)))}class h{nonTerminals;terminals;currentLine=0;currentColumn=0;source="";constructor(e,t){this.nonTerminals=[...t],this.terminals=[...e]}setSource(e){this.source=e,this.currentLine=0,this.currentColumn=0}remainString(){return this.source.slice(this.currentColumn)}next(){if(this.currentColumn>=this.source.length)return{tocken:i,origin:i};for(let e of this.terminals){const t=this.source.slice(this.currentColumn).match(e[1]);if(t)return{tocken:e[0],origin:t[0]}}throw new Error(`[lexer next]: match next Terminal error \n sourecInput: ${this.source}\n remainString: ${this.source.slice(this.currentColumn)}`)}pop(){try{const e=this.next();return e.tocken!==i&&(this.currentColumn+=e.origin.length),e}catch(e){throw e}}nextNotEmptyTerminal(){for(;;){const e=this.next();if("whiteSpace"!==e.tocken)return e;this.currentColumn+=e.origin.length}}nextNotEmpty(e){const t=this.currentColumn;for(let t=0;t<e-1;t++)this.popNotEmptyTerminal();const n=this.nextNotEmptyTerminal();return this.currentColumn=t,n}popNotEmptyTerminal(){const e=this.nextNotEmptyTerminal();return e.tocken!==i&&(this.currentColumn+=e.origin.length),e}isTerminal(e){let t=!0;return this.nonTerminals.some((n=>n===e&&(t=!1,!0))),t}splitDerivation(e){const t=[];let r=0;const i=e;for(;e.length;){for(let n of this.nonTerminals){const r=e.match(new RegExp("^"+n));if(r){t.push(n),e=e.slice(r[0].length);break}}for(let r of this.terminals){const i=e.match(new RegExp("^"+n(r[0])));if(i){t.push(r[0]),e=e.slice(i[0].length);break}}if(r++,r>5e4)throw new Error(`[splitDerivation] error: excute over MAX_EXCUTE str: ${i}  remaining str: ${e} `)}return t}getNewNonTerminal(e){let t=e;for(;;)if(t+="'",-1===this.nonTerminals.indexOf(t))return this.nonTerminals.unshift(t),t}}function f(e,n,i,o){const s=t(e,n),a=[],m=new Map;e.nonTerminals.forEach((e=>{const t={nonTerminal:e,terminal2Derivation:new Map};m.set(e,t),a.push(t)}));const h=new Map,f=new Map;for(let e of o)f.set(e.tocken,e);for(let e of i)h.set(e.tocken,e);return s.forEach((t=>{for(let n of t.derivations){const i=c(e,n,h),o=m.get(t.nonTerminal);l.log(i);let s=new Map;for(let e of i.terminals){if(e===r)continue;let i=o?.terminal2Derivation.get(e);s.set(e,!0),i||(i={nonTerminal:t.nonTerminal,derivations:[]},o?.terminal2Derivation.set(e,i)),i.derivations.push(n)}if(i.terminals.has(r))for(let e of f.get(t.nonTerminal).terminals){if(s.has(e))continue;let r=o?.terminal2Derivation.get(e);r||(r={nonTerminal:t.nonTerminal,derivations:[]},o?.terminal2Derivation.set(e,r)),r.derivations.push(n)}}})),a}function g(e,t){for(let n of e.terminals){const e=n[0];t.forEach((t=>{const n=t.terminal2Derivation.get(e);if(n&&n.derivations.length>1)return!1}))}return!0}const p=/^[A-Z]'*/,u=/[a-z|\u0391-\u03C9]/;function d(e){const t=new Set,n=new Set;return e.forEach((e=>{const r=e.replaceAll(/\s/g,"").split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),i=r[0];t.add(i),r[1].split("|").filter((e=>e&&"|"!==e)).forEach((e=>{for(;e.length;){let r=null;if(r=e.match(p),r)t.add(r[0]),e=e.slice(r[0].length);else{if(r=e.match(u),!r)throw new Error(`[getTockFromSimpleGrammers error] cant recognize the character remaining: ${e}`);n.add(JSON.stringify([r[0],"^"+r[0]])),e=e.slice(r[0].length)}}}))})),{nonTerminals:Array.from(t).sort(((e,t)=>t.length-e.length)),terminals:Array.from(n).map((e=>{const t=JSON.parse(e);return t[1]=new RegExp(t[1]),t}))}}function T(e){e=e.sort(((e,t)=>e<t?-1:1));let t="";for(let n of e)t+=` ${k(n)}`;return t}function k(e){let t=`${e.nonTerminal} => `;for(let n=0;n<e.derivation.length;n++)n===e.matchPoint&&(n||(t+=" "),t+="· "),n===e.derivation.length-1?t+=`${e.derivation[n]}`:t+=`${e.derivation[n]} `;return t}function w(e,t,n){for(let r=0;r<e.length;r++){const i=e[r],o=i.derivation[i.matchPoint];if(n.isTerminal(o))continue;t.get(o)?.forEach((t=>{let n=!1;for(let r of e)if(r.nonTerminal===o&&0===r.matchPoint){if(r.derivation.length!==t.length)continue;let e=!0;for(let n=0;n<t.length;n++)if(r.derivation[n]!==t[n]){e=!1;break}if(e){n=!0;break}}n||e.push({nonTerminal:o,matchPoint:0,derivation:t})}))}}return e.LL1Parser=class{lexer;textGrammers;constructor(e,t,n){this.lexer=new h(e,t),this.textGrammers=n}getFirstSet(){return a(this.lexer,this.textGrammers)}getFollowSet(e){return e||(e=this.getFirstSet()),m(this.lexer,this.textGrammers,e)}getPredictTable(e,t){return e||(e=this.getFirstSet()),t||(t=this.getFollowSet(e)),f(this.lexer,this.textGrammers,e,t)}getPredictProcess(e,t,n){if(n||(n=f(this.lexer,this.textGrammers,this.getFirstSet(),this.getFollowSet())),!this.lexer.nonTerminals.some((e=>t===e)))throw new Error("1");return function(e,t,n,o){let s=n.replaceAll(/\s/g,"");const a=[];let c=1;const m={id:0,text:o,check:!1},h=[m];let f={parseStack:[i,o],remainingInput:n,parseAction:""};e.setSource(s);const g=new Map;t.forEach((e=>{g.set(e.nonTerminal,e)}));try{for(;;){const t=f.parseStack[f.parseStack.length-1];if(e.isTerminal(t)){const n=e.next();if(t!==n.tocken)throw new Error(`[predict error] terminal match error tocken: ${t} stack: ${f.parseStack} remainingInput: ${e.remainString()}`);{if(f.parseAction=`match ${n.tocken} ${n.origin}`,a.push(f),f=JSON.parse(JSON.stringify(f)),e.pop(),f.parseAction="",f.remainingInput=e.remainString(),f.parseStack.pop(),0===f.parseStack.length)break;const t=h.pop();t.children||(t.children=[]),t.children.push({id:c++,text:n.origin,check:!1})}continue}const n=e.next(),i=g.get(t).terminal2Derivation.get(n.tocken);if(1!==i?.derivations?.length)throw new Error(`[predict error] parse input fail \n terminal: ${n} \n  remainingInput: ${e.remainString()} \n grammer: ${i} `);f.parseAction=`Predict ${i.nonTerminal} => ${i.derivations[0].join(" ")}`,l.log("[predict State]",f),a.push(f),f=JSON.parse(JSON.stringify(f)),f.parseStack.pop();const o=h.pop(),s=i.derivations[0].filter((e=>e!==r));o.children||(o.children=[]);for(let e of s)o.children.push({id:c++,text:e,check:!1});h.push(...[...o.children].reverse()),f.parseStack.push(...s.reverse()),f.parseAction="",f.remainingInput=e.remainString()}}catch(e){f.parseAction=e.toString(),a.push(f)}return a.astNode=m,a}(this.lexer,n,e,t)}checkPredickTableIsValid(e){return g(this.lexer,e)}checkIsLL0(){return g(this.lexer,this.getPredictTable())}getFirstSetProgressive(){return function*(e,n){yield["1. 如果X式一个终结符号，那么FIRST(X) = X ","2. 如果 X => ε 是一个产生式，那么将e加人到 FIRST（X)中。","3. A => B0B1B2B3\n            i = 0\n            FIRST(Bi) - EmptyCharacter 加入到 FIRST(A)中\n            如果FIRST(B1)不含有EmptyCharacter退出循环\n            若B0 - B3均含有EmptyCharacter 将EmptyCharacter加入到FIRST(A)中\n        ","4. 去除所有终结符号的表项"],l.log("[generateFirstSet start]");const i=t(e,n);l.log("[grammers after transferString2Grammers]",i);const o=new Array(...i.map((e=>({tocken:e.nonTerminal,terminals:new Set})))),s=new Map;i.forEach((e=>{s.set(e.nonTerminal,e.derivations)})),o.push(...e.terminals.map((e=>({tocken:e[0],terminals:new Set([e[0]]),isTerminal:!0})))),yield{ruleIndex:0,result:o},o.forEach((e=>{if(!e.isTerminal)for(let t of s.get(e.tocken))1!==t.length||t[0]!==r||e.terminals.has(r)||e.terminals.add(r)})),yield{ruleIndex:1,result:o};const a=new Map;for(let e of o)a.set(e.tocken,e);for(;;){let t=!1;if(o.forEach((n=>{if(!n.isTerminal)for(let i of s.get(n.tocken))for(let o=0;o<i.length;o++){const s=i[o];if(e.isTerminal(s)){if(n.terminals.has(s)||(l.log(s),t=!0,n.terminals.add(s)),s!==r)break}else{const e=a.get(s);if(e.terminals.forEach((e=>{e!==r&&(n.terminals.has(e)||(t=!0,n.terminals.add(e)))})),!e.terminals.has(r))break}o===i.length-1&&n.terminals.add(r)}})),!t)break;yield{ruleIndex:2,result:o}}yield{ruleIndex:3,result:o.filter((e=>!e.isTerminal)).sort(((e,t)=>e.tocken<t.tocken?-1:1)).map((e=>(e.terminals=new Set(Array.from(e.terminals).sort(((e,t)=>e<t?-1:1))),e)))}}(this.lexer,this.textGrammers)}getFollowSetProgressive(e){return e||(e=this.getFirstSet()),function*(e,n,o){yield["1. 将$放到FOLLOW(S)中","2. 如果存在一个产生式A => aBb ， 那么FIRST(b) 中除ε 之外的所有符号都在FOLLOW(B)中。attention: A => aBCd 那么把first(Cd)加入到Follow(B)中去","3.如果存在一个产生式 A => aB ， 或存在产生式 A => aBb 且FIRST(b) 包含 ε ，那么FOLLOW(A)中的所有符号都在FOLLOW(B)中。","4. 去除所有终结符号的表项"],l.log("[generateFllowSet start]"),o=o?Array.from(o):a(e,n);const s=t(e,n);l.log("[grammers after transferString2Grammers]",s);const c=new Array(...s.map((e=>({tocken:e.nonTerminal,terminals:new Set([i])})))),m=new Map;s.forEach((e=>{m.set(e.nonTerminal,e.derivations)})),c.push(...e.terminals.map((e=>({tocken:e[0],terminals:new Set([i]),isTerminal:!0})))),yield{ruleIndex:0,result:c};const h=new Map;for(let e of c)h.set(e.tocken,e);o.push(...e.terminals.map((e=>({tocken:e[0],terminals:new Set([e[0]]),isTerminal:!0}))));const f=new Map;for(let e of o)f.set(e.tocken,e);for(;;){let e=!1;if(s.forEach((t=>{for(let n of t.derivations)for(let t=n.length-2;t>=0;t--){const i=h.get(n[t]);for(let o=t+1;o<n.length;o++){const t=f.get(n[o]).terminals;for(let n of t)n!==r&&(i?.terminals.has(n)||(e=!0,i?.terminals.add(n)));if(!t.has(r))break}}})),e&&(yield{ruleIndex:1,result:c},e=!1),s.forEach((t=>{const n=h.get(t.nonTerminal);for(let i of t.derivations)for(let t=i.length-1;t>=0;t--){const o=i[t],s=h.get(o);for(let t of n.terminals)t!==r&&(s?.terminals.has(t)||(e=!0,s?.terminals.add(t)));if(!f.get(o).terminals.has(r))break}})),e&&(yield{ruleIndex:2,result:c}),!e)break}yield{ruleIndex:3,result:c.filter((e=>!e.isTerminal)).sort(((e,t)=>e.tocken<t.tocken?-1:1)).map((e=>(e.terminals=new Set(Array.from(e.terminals).sort(((e,t)=>e<t?-1:1))),e)))}}(this.lexer,this.textGrammers,e)}getPredictTableProgressive(e,n){return e||(e=this.getFirstSet()),n||(n=this.getFollowSet(e)),function*(e,n,i,o){yield["1. 对 First(u) 中的所有终结符 a （不含 ε ），置 M[A, a] = A -> u","2. 若 First(u) 含 ε ，则对 Follow(A) 中的所有符号 a （可含 $ ），置 M[A, a] = A -> u"];const s=t(e,n),a=[],m=new Map;e.nonTerminals.forEach((e=>{const t={nonTerminal:e,terminal2Derivation:new Map};m.set(e,t),a.push(t)}));const h=new Map,f=new Map;for(let e of o)f.set(e.tocken,e);for(let e of i)h.set(e.tocken,e);for(let t of s)for(let n of t.derivations){const i=c(e,n,h),o=m.get(t.nonTerminal);l.log(i);for(let e of i.terminals){if(e===r)continue;let i=o?.terminal2Derivation.get(e);i||(i={nonTerminal:t.nonTerminal,derivations:[]},o?.terminal2Derivation.set(e,i)),i.derivations.push(n),yield{ruleIndex:0,result:a}}if(i.terminals.has(r))for(let e of f.get(t.nonTerminal).terminals){let r=o?.terminal2Derivation.get(e);r||(r={nonTerminal:t.nonTerminal,derivations:[]},o?.terminal2Derivation.set(e,r)),r.derivations.push(n),yield{ruleIndex:1,result:a}}}}(this.lexer,this.textGrammers,e,n)}},e.LRParser=class{initialStateNode;allStateNodesMap;lexer;grammers;constructor(){this.initialStateNode=null}generateState(e,t,n,r){if(!n||!r){const t=d(e);n=t.nonTerminals,r=t.terminals}const o="Augument_S";l.log("[nonTerminals]",n),l.log("[terminals]",r),this.grammers=e,this.lexer=new h(r,n);const s=new Map;for(let t of e){t=t.replaceAll(/\s/g,"");const e=t.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),n=e[0],r=e[1].split("|").filter((e=>e)).map((e=>this.lexer.splitDerivation(e)));s.set(n,r)}l.log(s),this.initialStateNode={id:0,items:[{nonTerminal:o,derivation:[t],matchPoint:0}],edges:[]},w(this.initialStateNode.items,s,this.lexer);const a=new Map;this.allStateNodesMap=a,a.set(T(this.initialStateNode.items),this.initialStateNode);const c=[];let m=0;for(;a.size!=m;){m=a.size;for(let e of a.values())if(!c[e.id]){c[e.id]=!0;for(let t of e.items)t.nonTerminal===o&&1===t.matchPoint&&e.edges.push({tocken:i,next:{id:-1,items:[],edges:[]}});for(let t of n){let n=[];for(let r of e.items)r.derivation.length!==r.matchPoint&&r.derivation[r.matchPoint]===t&&n.push({nonTerminal:r.nonTerminal,derivation:r.derivation,matchPoint:r.matchPoint+1});if(!n.length)continue;w(n,s,this.lexer);const r=T(n);a.has(r)||a.set(r,{id:a.size,items:n,edges:[]}),e.edges.push({tocken:t,next:a.get(r)})}for(let t of r){let n=[];for(let r of e.items)r.derivation.length!==r.matchPoint&&r.derivation[r.matchPoint]===t[0]&&n.push({nonTerminal:r.nonTerminal,derivation:r.derivation,matchPoint:r.matchPoint+1});if(!n.length)continue;w(n,s,this.lexer);const r=T(n);a.has(r)||a.set(r,{id:a.size,items:n,edges:[]}),e.edges.push({tocken:t[0],next:a.get(r)})}}}}*generateStateProgressive(e,t,n,r){if(!n||!r){const t=d(e);n=t.nonTerminals,r=t.terminals}const o="Augument_S";l.log("[nonTerminals]",n),l.log("[terminals]",r),this.grammers=e,this.lexer=new h(r,n);const s=new Map;for(let t of e){t=t.replaceAll(/\s/g,"");const e=t.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),n=e[0],r=e[1].split("|").filter((e=>e)).map((e=>this.lexer.splitDerivation(e)));s.set(n,r)}l.log(s),this.initialStateNode={id:0,items:[{nonTerminal:o,derivation:[t],matchPoint:0}],edges:[]},w(this.initialStateNode.items,s,this.lexer),yield;const a=new Map;this.allStateNodesMap=a,a.set(T(this.initialStateNode.items),this.initialStateNode);const c=[];let m=0;for(;a.size!=m;){m=a.size;for(let e of a.values())if(!c[e.id]){c[e.id]=!0;for(let t of e.items)t.nonTerminal===o&&1===t.matchPoint&&e.edges.push({tocken:i,next:{id:-1,items:[],edges:[]}});for(let t of n){let n=[];for(let r of e.items)r.derivation.length!==r.matchPoint&&r.derivation[r.matchPoint]===t&&n.push({nonTerminal:r.nonTerminal,derivation:r.derivation,matchPoint:r.matchPoint+1});if(!n.length)continue;w(n,s,this.lexer);const r=T(n);a.has(r)||a.set(r,{id:a.size,items:n,edges:[]}),e.edges.push({tocken:t,next:a.get(r)}),yield}for(let t of r){let n=[];for(let r of e.items)r.derivation.length!==r.matchPoint&&r.derivation[r.matchPoint]===t[0]&&n.push({nonTerminal:r.nonTerminal,derivation:r.derivation,matchPoint:r.matchPoint+1});if(!n.length)continue;w(n,s,this.lexer);const r=T(n);a.has(r)||a.set(r,{id:a.size,items:n,edges:[]}),e.edges.push({tocken:t[0],next:a.get(r)}),yield}}}}predictInput(e,t){if(!this.lexer)throw new Error("[generatePredictTable] must call generateState before generatePredictTable");let n=[];for(e=e.replaceAll(/\s/g,""),n.push({stack:[0],symbols:[],input:[...this.lexer.splitDerivation(e),i]});;){const e=n[n.length-1],r=JSON.parse(JSON.stringify(e)),i=t[e.stack[e.stack.length-1]].action.get(e.input[0]);if(i.length>1)throw new Error(`move collision ${i}`);if(!i.length)throw new Error(`move is empty ${i}`);let o=i[0];if("acc"===o){e.move="接受";break}if(o.startsWith("S"))e.move=`移入${e.input[0]}`,r.symbols.push(r.input.shift()),r.stack.push(Number(o.slice(1)));else{e.move=`根据${o}归约`;const n=o.slice(2,-1).replaceAll(/\s/g,""),i=n.split("=>")[0],s=this.lexer.splitDerivation(n.split("=>")[1]);for(let e=0;e<s.length;e++)r.stack.pop(),r.symbols.pop();r.symbols.push(i);const l=t[e.stack[r.stack.length-1]];r.stack.push(l.goto.get(i)[0])}n.push(r)}return n}generateLR0PredictTable(){if(!this.initialStateNode||!this.allStateNodesMap||!this.lexer)throw new Error("[generatePredictTable] must call generateState before generatePredictTable");const e=[];for(let t of this.allStateNodesMap.values()){let n={id:t.id,action:new Map,goto:new Map};for(let e of this.lexer.nonTerminals)n.goto.set(e,[]);for(let e of this.lexer.terminals)n.action.set(e[0],[]);n.action.set(i,[]);for(let e of t.edges)e.tocken!==i?this.lexer.isTerminal(e.tocken)?n.action.get(e.tocken).push(`S${e.next.id}`):n.goto.get(e.tocken).push(e.next.id):n.action.get(e.tocken).push("acc");for(let e of t.items)if(e.matchPoint===e.derivation.length)for(let t of this.lexer.terminals)n.action.get(t[0]).push(`r(${e.nonTerminal} => ${e.derivation.join(" ")})`);e.push(n)}return e.sort(((e,t)=>e.id-t.id)),e}generateSLR1PredictTable(){if(!(this.initialStateNode&&this.allStateNodesMap&&this.lexer&&this.grammers))throw new Error("[generatePredictTable] must call generateState before generatePredictTable");const e=m(this.lexer,this.grammers),t=[];for(let n of this.allStateNodesMap.values()){let r={id:n.id,action:new Map,goto:new Map};for(let e of this.lexer.nonTerminals)r.goto.set(e,[]);for(let e of this.lexer.terminals)r.action.set(e[0],[]);r.action.set(i,[]);for(let e of n.edges)e.tocken!==i?this.lexer.isTerminal(e.tocken)?r.action.get(e.tocken).push(`S${e.next.id}`):r.goto.get(e.tocken).push(e.next.id):r.action.get(e.tocken).push("acc");for(let t of n.items)if(t.matchPoint===t.derivation.length){let n=[];for(let r of e)if(r.tocken===t.nonTerminal){n=[...r.terminals.values()];break}for(let e of n)r.action.get(e[0]).push(`r(${t.nonTerminal} => ${t.derivation.join(" ")})`)}t.push(r)}return t.sort(((e,t)=>e.id-t.id)),t}get stateGraph(){const e=[],t=n=>{if(e[n.id])return e[n.id];const r={};e[n.id]=r,r.id=n.id,r.items=n.items.map((e=>k(e))),r.edges=[];for(let e of n.edges)r.edges.push({tocken:e.tocken,next:t(e.next)});return r};return t(this.initialStateNode)}},e.Lexer=h,e.checkNeedClearRightRecursion=function(e,t,n){if(!t||!n){const r=d(e);t=r.nonTerminals,n=r.terminals}l.log("[nonTerminals]",t),l.log("[terminals]",n);let r=new h(n,t);const i=new Map;for(let t of e){t=t.replaceAll(/\s/g,"");const e=t.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),n=e[0],o=e[1].split("|").filter((e=>e)).map((e=>r.splitDerivation(e)));i.set(n,o)}l.log("[nonTerminals2DerivationMap]",i);for(let e=0;e<t.length;e++){const n=i.get(t[e]);for(let r=n.length-1;r>=0;r--){if(n[r][0]===t[e])return!0}}return!1},e.checkNeedliftUpCommonTocken=function(e,t,n){let r=e;if(!t||!n){const r=d(e);t=r.nonTerminals,n=r.terminals}let i=new h(n,t);for(let e of r){e=e.replaceAll(/\s/g,"");const t=e.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e))[1].split("|").filter((e=>e)).map((e=>(l.log("[debug]",r),i.splitDerivation(e)))),n=new Map;t.forEach((e=>{let t=n.get(e[0]);t?t.push(e.slice(1)):t=[e.slice(1)],n.set(e[0],t)}));for(let e of n.keys())if(1!==n.get(e)?.length)return!0}return!1},e.checkNeedunionGrammers=function(e){let t=new Map;for(let n of e){n=n.replaceAll(/\s/g,"");const e=n.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),r=e[0],i=e[1];if(t.has(r))return!0;t.set(r,[i])}return!1},e.clearRightRecursion=function(e,t,n){const i=[];if(!t||!n){const r=d(e);t=r.nonTerminals,n=r.terminals}l.log("[nonTerminals]",t),l.log("[terminals]",n);let o=new h(n,t);const s=new Map;for(let t of e){t=t.replaceAll(/\s/g,"");const e=t.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),n=e[0],r=e[1].split("|").filter((e=>e)).map((e=>o.splitDerivation(e)));s.set(n,r)}l.log("[nonTerminals2DerivationMap]",s);for(let e=0;e<t.length;e++){const n=s.get(t[e]);for(let r=0;r<e;r++){const e=s.get(t[r]);for(let i=n.length-1;i>=0;i--){const o=n[i];if(o[0]===t[r]){l.log(o,t[r]);for(let t of e)l.log("[-]",t),n?.push([...t,...o.slice(1)]);n?.splice(i,1)}}}const i=[];for(let r=n.length-1;r>=0;r--){n[r][0]===t[e]&&i.push(r)}if(i.length){const l=o.getNewNonTerminal(t[e]),a=[],c=[];for(let e=n.length-1;e>=0;e--)-1===i.indexOf(e)&&a.push([...n[e][0]===r?n[e].slice(1):n[e],l]);for(let e of i)c.push([...n[e].slice(1),l]);c.push([r]),s.set(t[e],[...a,...i.length?[]:n]),s.set(l,c)}l.log("[nonTerminals2DerivationMap in process]",s,n)}for(let e of s.keys()){const t=s.get(e).map((e=>e.join(" "))).join(" | ");i.push(`${e} => ${t}`)}return i},e.getTockFromSimpleGrammers=d,e.liftUpCommonTocken=function(e,t,n){let r=e;if(!t||!n){const r=d(e);t=r.nonTerminals,n=r.terminals}let i=new h(n,t);for(;;){let e=[];const t=r.map((t=>{const n=(t=t.replaceAll(/\s/g,"")).split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),o=n[0],s=n[1].split("|").filter((e=>e)).map((e=>(l.log("[debug]",r),i.splitDerivation(e)))),a=[],c=new Map;s.forEach((e=>{let t=c.get(e[0]);t?t.push(e.slice(1)):t=[e.slice(1)],c.set(e[0],t)}));for(let t of c.keys()){if(1===c.get(t)?.length){a.push(t+c.get(t)[0].join(""));continue}const n=c.get(t),r=i.getNewNonTerminal(o);a.push(t+r),e.push(r+" => "+n?.map((e=>e.join(" "))).join(" | "))}return o+" => "+a.join(" | ")}));l.log("[pre]",t,e);const n=[...t,...e];if(l.log("[com]",r,n),r.length===n.length)break;r=n}return r},e.unionGrammers=function(e,t,n){let r=new Map;const i=[];if(!t||!n){const r=d(e);t=r.nonTerminals,n=r.terminals}let o=new h(n,t);e.forEach((e=>{const t=(e=e.replaceAll(/\s/g,"")).split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),n=t[0],s=t[1].split("|").filter((e=>e)).map((e=>(l.log("[debug]",i),o.splitDerivation(e))));if(r.has(n)){const e=r.get(n);s.forEach((t=>{const n=t.join(" ");-1===e?.indexOf(n)&&e.push(n)}))}else r.set(n,s.map((e=>e.join(" "))))}));for(let e of r.keys()){const t=[...new Set(r.get(e))];i.push(`${e} => ${t.join("|")}`.split("|").join(" | "))}return l.log(i),i},e}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguaWlmZS5qcyIsInNvdXJjZXMiOlsiLi4vc3JjL3V0aWxzL2luZGV4LnRzIiwiLi4vc3JjL3V0aWxzL2NvbnN0LnRzIiwiLi4vc3JjL3V0aWxzL2xvZy50cyIsIi4uL3NyYy9maXJzdFNldC50cyIsIi4uL3NyYy9mb2xsb3dTZXQudHMiLCIuLi9zcmMvbGV4ZXIudHMiLCIuLi9zcmMvTEwxL3ByZWRpY3RUYWJsZS50cyIsIi4uL3NyYy9zaW1wbGVHcmFtbWVySGVscGVyLnRzIiwiLi4vc3JjL0xSMC9MUlN0YXRlLnRzIiwiLi4vc3JjL0xMMS9wYXJzZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IExleGVyIGZyb20gXCJAL2xleGVyXCI7XHJcbmltcG9ydCB7IEdyYW1tZXJzIH0gZnJvbSBcIkAvdHlwZXMvdHlwZVwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZmVyU3RyaW5nMkdyYW1tZXJzKGxleGVyOiBMZXhlciwgZ3JhbW1lcnM6IEFycmF5PHN0cmluZz4pOiBHcmFtbWVycyB7XHJcbiAgICByZXR1cm4gZ3JhbW1lcnMubWFwKGdyYW1tZXIgPT4ge1xyXG4gICAgICAgIHJldHVybiBncmFtbWVyLnJlcGxhY2VBbGwoL1xccy9nLCBcIlwiKTtcclxuICAgIH0pLm1hcChncmFtbWVyID0+IHtcclxuICAgICAgICBjb25zdCBhcnIgPSBncmFtbWVyLnNwbGl0KC8oPT4pfCgtPikvKS5maWx0ZXIodiA9PiB2ICE9PSBcIj0+XCIgJiYgdiAhPT0gXCItPlwiICYmIHYpO1xyXG4gICAgICAgIGNvbnN0IGRlcml2YXRpb25zID0gYXJyWzFdLnNwbGl0KFwifFwiKS5maWx0ZXIodiA9PiB2ICYmIHYgIT09IFwifFwiKS5tYXAoZGVyaXZhdGlvbiA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBsZXhlci5zcGxpdERlcml2YXRpb24oZGVyaXZhdGlvbik7XHJcbiAgICAgICAgfSlcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBub25UZXJtaW5hbDogYXJyWzBdLFxyXG4gICAgICAgICAgICBkZXJpdmF0aW9uczogZGVyaXZhdGlvbnMsXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNTZXRJbmNsdWRlcyhhOiBTZXQ8dW5rbm93bj4sIGI6IFNldDx1bmtub3duPik6IGJvb2xlYW4ge1xyXG4gICAgZm9yIChsZXQgaXRlbSBvZiBiLmtleXMoKSkge1xyXG4gICAgICAgIGlmICghYS5oYXMoaXRlbSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2FmZVJlZ0NoYXJhY3RlcihjaGFyOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgc3dpdGNoIChjaGFyKSB7XHJcbiAgICBjYXNlIFwiK1wiOlxyXG4gICAgY2FzZSBcIipcIjpcclxuICAgIGNhc2UgXCIoXCI6XHJcbiAgICBjYXNlIFwiKVwiOlxyXG4gICAgICAgIHJldHVybiBgXFxcXCR7Y2hhcn1gO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm4gY2hhcjtcclxuICAgIH1cclxufSIsIlxuXG5leHBvcnQgY29uc3QgRW1wdHlDaGFyYWN0ZXIgPSBcIs61XCI7XG5leHBvcnQgY29uc3QgRW5kaW5nQ2hhcmFjdGVyID0gXCIkXCI7IiwiLypTVEFSVC5PTkxZVEVTVCovXHJcbmltcG9ydCBjb2xvcnMgZnJvbSBcImNvbG9yc1wiXHJcbi8qRU5ELk9OTFlURVNUKi9cclxuXHJcbmVudW0gTG9nTGV2ZWwge1xyXG4gICAgTm9ybWFsLFxyXG4gICAgV2Fybm5pbmcsXHJcbiAgICBFcnJvcixcclxuICAgIE5vbmVcclxufVxyXG5pbnRlcmZhY2UgTG9nQ2hhbm5lbCB7XHJcbiAgICBsb2coLi4uZGF0YTogYW55W10pOiB2b2lkO1xyXG4gICAgd2FybiguLi5kYXRhOiBhbnlbXSk6IHZvaWQ7XHJcbiAgICBlcnJvciguLi5kYXRhOiBhbnlbXSk6IHZvaWQ7XHJcblxyXG59XHJcblxyXG5jbGFzcyBMb2dnZXIge1xyXG4gICAgcHVibGljIGxvZ0xldmVsOiBMb2dMZXZlbDtcclxuICAgIHB1YmxpYyBsb2dDaGFubmVsOiBMb2dDaGFubmVsO1xyXG4gICAgY29uc3RydWN0b3IobG9nTGV2ZWw6IExvZ0xldmVsID0gTG9nTGV2ZWwuTm9ybWFsLCBsb2dDaGFubmVsOiBMb2dDaGFubmVsID0gY29uc29sZSkge1xyXG4gICAgICAgIHRoaXMubG9nTGV2ZWwgPSBsb2dMZXZlbDtcclxuICAgICAgICB0aGlzLmxvZ0NoYW5uZWwgPSBsb2dDaGFubmVsO1xyXG4gICAgfVxyXG4gICAgbG9nKC4uLmluZm86IGFueVtdKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubG9nTGV2ZWwgPD0gTG9nTGV2ZWwuTm9ybWFsKSB7XHJcbiAgICAgICAgICAgIC8qU1RBUlQuT05MWVRFU1QqL1xyXG4gICAgICAgICAgICBjb2xvcnMuZW5hYmxlKCk7XHJcbiAgICAgICAgICAgIC8qRU5ELk9OTFlURVNUKi9cclxuICAgICAgICAgICAgdGhpcy5sb2dDaGFubmVsLmxvZyhcIltub3JtYWxdXCIvKlNUQVJULk9OTFlURVNUKi8ucmFpbmJvdy8qRU5ELk9OTFlURVNUKi8sIC4uLmluZm8pO1xyXG4gICAgICAgICAgICAvKlNUQVJULk9OTFlURVNUKi9cclxuICAgICAgICAgICAgY29sb3JzLmRpc2FibGUoKTtcclxuICAgICAgICAgICAgLypFTkQuT05MWVRFU1QqL1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHdhcm4oLi4uaW5mbzogYW55W10pIHtcclxuICAgICAgICBpZiAodGhpcy5sb2dMZXZlbCA8PSBMb2dMZXZlbC5XYXJubmluZykge1xyXG4gICAgICAgICAgICAvKlNUQVJULk9OTFlURVNUKi9cclxuICAgICAgICAgICAgY29sb3JzLmVuYWJsZSgpO1xyXG4gICAgICAgICAgICAvKkVORC5PTkxZVEVTVCovXHJcbiAgICAgICAgICAgIHRoaXMubG9nQ2hhbm5lbC53YXJuKFwiW3dhcm5dXCIvKlNUQVJULk9OTFlURVNUKi8ueWVsbG93LypFTkQuT05MWVRFU1QqLywgLi4uaW5mbyk7XHJcbiAgICAgICAgICAgIC8qU1RBUlQuT05MWVRFU1QqL1xyXG4gICAgICAgICAgICBjb2xvcnMuZGlzYWJsZSgpO1xyXG4gICAgICAgICAgICAvKkVORC5PTkxZVEVTVCovXHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVycm9yKC4uLmluZm86IGFueVtdKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubG9nTGV2ZWwgPD0gTG9nTGV2ZWwuRXJyb3IpIHtcclxuICAgICAgICAgICAgLypTVEFSVC5PTkxZVEVTVCovXHJcbiAgICAgICAgICAgIGNvbG9ycy5lbmFibGUoKTtcclxuICAgICAgICAgICAgLypFTkQuT05MWVRFU1QqL1xyXG4gICAgICAgICAgICB0aGlzLmxvZ0NoYW5uZWwuZXJyb3IoXCJbZXJyb3JdXCIvKlNUQVJULk9OTFlURVNUKi8ucmVkLypFTkQuT05MWVRFU1QqLywgLi4uaW5mbyk7XHJcbiAgICAgICAgICAgIC8qU1RBUlQuT05MWVRFU1QqL1xyXG4gICAgICAgICAgICBjb2xvcnMuZGlzYWJsZSgpO1xyXG4gICAgICAgICAgICAvKkVORC5PTkxZVEVTVCovXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbG9nVG8obG9nQ2hhbm5lbDogTG9nQ2hhbm5lbCkge1xyXG4gICAgICAgIHRoaXMubG9nQ2hhbm5lbCA9IGxvZ0NoYW5uZWw7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIE51bGxMb2dDaGFubmVsIHtcclxuICAgIHB1YmxpYyBsb2coLi4uZGF0YTogYW55W10pOiB2b2lkIHsgfVxyXG4gICAgcHVibGljIHdhcm4oLi4uZGF0YTogYW55W10pOiB2b2lkIHsgfVxyXG4gICAgcHVibGljIGVycm9yKC4uLmRhdGE6IGFueVtdKTogdm9pZCB7IH1cclxufVxyXG5leHBvcnQgY29uc3QgbnVsbExvZ0NoYW5uZWwgPSBuZXcgTnVsbExvZ0NoYW5uZWwoKTtcclxuXHJcbmxldCBsb2dMZXZlbF9pbml0ID0gTG9nTGV2ZWwuTm9ybWFsXHJcbnZhciBfX2Vudl9fID0gXCJcIjtcclxuc3dpdGNoIChfX2Vudl9fKSB7XHJcbmNhc2UgXCJwcm9kXCI6XHJcbiAgICBsb2dMZXZlbF9pbml0ID0gTG9nTGV2ZWwuRXJyb3JcclxufVxyXG5leHBvcnQgZGVmYXVsdCBuZXcgTG9nZ2VyKGxvZ0xldmVsX2luaXQpXHJcbiIsImltcG9ydCBMZXhlciBmcm9tIFwiLi9sZXhlclwiO1xuaW1wb3J0IHsgR3JhbW1lclNldCwgR3JhbW1lclNldExpbmUsIE5vblRlcm1pbmFsLCBQcm9jZXNzLCBSdWxlLCBUZXJtaW5hbCB9IGZyb20gXCIuL3R5cGVzL3R5cGVcIjtcbmltcG9ydCB7IHRyYW5zZmVyU3RyaW5nMkdyYW1tZXJzIH0gZnJvbSBcIi4vdXRpbHNcIlxuaW1wb3J0IHsgRW1wdHlDaGFyYWN0ZXIgfSBmcm9tIFwiLi91dGlscy9jb25zdFwiO1xuaW1wb3J0IGxvZyBmcm9tIFwiLi91dGlscy9sb2dcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2VuZXJhdGVGaXJzdFNldChsZXhlcjogTGV4ZXIsIGluR3JhbW1lcnM6IEFycmF5PHN0cmluZz4pOiBHcmFtbWVyU2V0IHtcbiAgICBsb2cubG9nKFwiW2dlbmVyYXRlRmlyc3RTZXQgc3RhcnRdXCIpO1xuICAgIGNvbnN0IGdyYW1tZXJzID0gdHJhbnNmZXJTdHJpbmcyR3JhbW1lcnMobGV4ZXIsIGluR3JhbW1lcnMpO1xuICAgIGxvZy5sb2coXCJbZ3JhbW1lcnMgYWZ0ZXIgdHJhbnNmZXJTdHJpbmcyR3JhbW1lcnNdXCIsIGdyYW1tZXJzKTtcbiAgICBjb25zdCBmaXJzdFNldDogR3JhbW1lclNldCA9IG5ldyBBcnJheSguLi5ncmFtbWVycy5tYXAoZ3JhbW1lciA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b2NrZW46IGdyYW1tZXIubm9uVGVybWluYWwsXG4gICAgICAgICAgICB0ZXJtaW5hbHM6IG5ldyBTZXQ8VGVybWluYWw+KCksXG4gICAgICAgIH1cbiAgICB9KSk7XG4gICAgY29uc3QgZ3JhbW1lck1hcCA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmdbXVtdPigpO1xuICAgIGdyYW1tZXJzLmZvckVhY2goZ3JhbW1lciA9PiB7XG4gICAgICAgIGdyYW1tZXJNYXAuc2V0KGdyYW1tZXIubm9uVGVybWluYWwsIGdyYW1tZXIuZGVyaXZhdGlvbnMpO1xuICAgIH0pXG4gICAgLyogXG4gICAgICAgIOWmguaenFjlvI/kuIDkuKrnu4jnu5PnrKblj7fvvIzpgqPkuYhGSVJTVChYKSA9IFggXG4gICAgKi9cbiAgICBmaXJzdFNldC5wdXNoKC4uLmxleGVyLnRlcm1pbmFscy5tYXAodGVybWluYWwgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdG9ja2VuOiB0ZXJtaW5hbFswXSxcbiAgICAgICAgICAgIHRlcm1pbmFsczogbmV3IFNldChbdGVybWluYWxbMF1dKSxcbiAgICAgICAgICAgIGlzVGVybWluYWw6IHRydWVcbiAgICAgICAgfVxuICAgIH0pKVxuICAgIC8qIFxuICAgICAgICDlpoLmnpwgWCA9PiDOtSDmmK/kuIDkuKrkuqfnlJ/lvI/vvIzpgqPkuYjlsIZl5Yqg5Lq65YiwIEZJUlNU77yIWCnkuK3jgIJcbiAgICAqL1xuICAgIGZpcnN0U2V0LmZvckVhY2goc2V0TGluZSA9PiB7XG4gICAgICAgIGlmIChzZXRMaW5lLmlzVGVybWluYWwpIHJldHVybjtcbiAgICAgICAgZm9yIChsZXQgZGVyaXZhdGlvbiBvZiBncmFtbWVyTWFwLmdldChzZXRMaW5lLnRvY2tlbikhKSB7XG4gICAgICAgICAgICBpZiAoZGVyaXZhdGlvbi5sZW5ndGggPT09IDEgJiYgZGVyaXZhdGlvblswXSA9PT0gRW1wdHlDaGFyYWN0ZXIgJiYgIXNldExpbmUudGVybWluYWxzLmhhcyhFbXB0eUNoYXJhY3RlcikpIHtcbiAgICAgICAgICAgICAgICBzZXRMaW5lLnRlcm1pbmFscy5hZGQoRW1wdHlDaGFyYWN0ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSlcbiAgICBjb25zdCBmaXJzdFNldE1hcCA9IG5ldyBNYXA8c3RyaW5nLCBHcmFtbWVyU2V0TGluZT4oKTtcbiAgICBmb3IgKGxldCBzZXRMaW5lIG9mIGZpcnN0U2V0KSB7XG4gICAgICAgIGZpcnN0U2V0TWFwLnNldChzZXRMaW5lLnRvY2tlbiwgc2V0TGluZSk7XG4gICAgfVxuICAgIC8vIOW+queOr+S4i+mdouatpemqpCDnm7TliLDmsqHmnInlj5jljJbkuLrmraJcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBsZXQgaGFzQ2hhbmdlID0gZmFsc2U7XG4gICAgICAgIC8qIFxuICAgICAgICAgICAgQSA9PiBCMEIxQjJCM1xuICAgICAgICAgICAgaSA9IDBcbiAgICAgICAgICAgIEZJUlNUKEJpKSAtIEVtcHR5Q2hhcmFjdGVyIOWKoOWFpeWIsCBGSVJTVChBKeS4rVxuICAgICAgICAgICAg5aaC5p6cRklSU1QoQjEp5LiN5ZCr5pyJRW1wdHlDaGFyYWN0ZXLpgIDlh7rlvqrnjq9cbiAgICAgICAgICAgIFxuICAgICAgICAgICAg6IulQjAtQjPlnYflkKvmnIlFbXB0eUNoYXJhY3RlciDlsIZFbXB0eUNoYXJhY3RlcuWKoOWFpeWIsEZJUlNUKEEp5LitXG4gICAgICAgICovXG4gICAgICAgIGZpcnN0U2V0LmZvckVhY2goc2V0TGluZSA9PiB7XG4gICAgICAgICAgICBpZiAoc2V0TGluZS5pc1Rlcm1pbmFsKSByZXR1cm47XG4gICAgICAgICAgICBmb3IgKGxldCBkZXJpdmF0aW9uIG9mIGdyYW1tZXJNYXAuZ2V0KHNldExpbmUudG9ja2VuKSEpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRlcml2YXRpb24ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdG9ja2VuID0gZGVyaXZhdGlvbltpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxleGVyLmlzVGVybWluYWwodG9ja2VuKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzZXRMaW5lLnRlcm1pbmFscy5oYXModG9ja2VuKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZy5sb2codG9ja2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNDaGFuZ2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldExpbmUudGVybWluYWxzLmFkZCh0b2NrZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRvY2tlbiAhPT0gRW1wdHlDaGFyYWN0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHRTZXRMaW5lID0gZmlyc3RTZXRNYXAuZ2V0KHRvY2tlbikhO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFNldExpbmUudGVybWluYWxzLmZvckVhY2godGVybWluYWwgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXJtaW5hbCAhPT0gRW1wdHlDaGFyYWN0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzZXRMaW5lLnRlcm1pbmFscy5oYXModGVybWluYWwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNDaGFuZ2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0TGluZS50ZXJtaW5hbHMuYWRkKHRlcm1pbmFsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5leHRTZXRMaW5lLnRlcm1pbmFscy5oYXMoRW1wdHlDaGFyYWN0ZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IGRlcml2YXRpb24ubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0TGluZS50ZXJtaW5hbHMuYWRkKEVtcHR5Q2hhcmFjdGVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgaWYgKCFoYXNDaGFuZ2UpIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gZmlyc3RTZXQuZmlsdGVyKHYgPT4gIXYuaXNUZXJtaW5hbCkuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICBpZiAoYS50b2NrZW4gPCBiLnRvY2tlbikge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICB9KS5tYXAoc2V0TGluZSA9PiB7XG4gICAgICAgIHNldExpbmUudGVybWluYWxzID0gbmV3IFNldChBcnJheS5mcm9tKHNldExpbmUudGVybWluYWxzKS5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICBpZiAoYSA8IGIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSlcbiAgICAgICAgcmV0dXJuIHNldExpbmU7XG4gICAgfSk7XG59XG5cblxuXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZXJpdmF0aW9uRmlyc3RTZXQobGV4ZXI6IExleGVyLCBkZXJpdmF0aW9uOiBzdHJpbmdbXSwgZmlyc3RTZXRNYXA6IE1hcDxOb25UZXJtaW5hbCwgR3JhbW1lclNldExpbmU+KTogR3JhbW1lclNldExpbmUge1xuICAgIGNvbnN0IHRlcm1pbmFscyA9IG5ldyBTZXQ8VGVybWluYWw+KCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZXJpdmF0aW9uLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHRvY2tlbiA9IGRlcml2YXRpb25baV07XG4gICAgICAgIGlmIChsZXhlci5pc1Rlcm1pbmFsKHRvY2tlbikpIHtcbiAgICAgICAgICAgIGlmICh0b2NrZW4gIT09IEVtcHR5Q2hhcmFjdGVyKSB7XG4gICAgICAgICAgICAgICAgdGVybWluYWxzLmFkZCh0b2NrZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZmlyc3RTZXRNYXAuZ2V0KHRvY2tlbik/LnRlcm1pbmFscy5mb3JFYWNoKHRlcm1pbmFsID0+IHtcbiAgICAgICAgICAgICAgICB0ZXJtaW5hbHMuYWRkKHRlcm1pbmFsKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBpZiAoIWZpcnN0U2V0TWFwLmdldCh0b2NrZW4pIS50ZXJtaW5hbHMuaGFzKEVtcHR5Q2hhcmFjdGVyKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpID09PSBkZXJpdmF0aW9uLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIHRlcm1pbmFscy5hZGQoRW1wdHlDaGFyYWN0ZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHRvY2tlbjogZGVyaXZhdGlvbi5qb2luKFwiXCIpLFxuICAgICAgICB0ZXJtaW5hbHMsXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24qIGdlbmVyYXRlRmlyc3RTZXRQcm9ncmVzc2l2ZShsZXhlcjogTGV4ZXIsIGluR3JhbW1lcnM6IEFycmF5PHN0cmluZz4pOiBJdGVyYWJsZUl0ZXJhdG9yPFJ1bGUgfCBQcm9jZXNzPEdyYW1tZXJTZXQ+PiB7XG4gICAgeWllbGQgW1xuICAgICAgICBcIjEuIOWmguaenFjlvI/kuIDkuKrnu4jnu5PnrKblj7fvvIzpgqPkuYhGSVJTVChYKSA9IFggXCIsXG4gICAgICAgIFwiMi4g5aaC5p6cIFggPT4gzrUg5piv5LiA5Liq5Lqn55Sf5byP77yM6YKj5LmI5bCGZeWKoOS6uuWIsCBGSVJTVO+8iFgp5Lit44CCXCIsXG4gICAgICAgIGAzLiBBID0+IEIwQjFCMkIzXG4gICAgICAgICAgICBpID0gMFxuICAgICAgICAgICAgRklSU1QoQmkpIC0gRW1wdHlDaGFyYWN0ZXIg5Yqg5YWl5YiwIEZJUlNUKEEp5LitXG4gICAgICAgICAgICDlpoLmnpxGSVJTVChCMSnkuI3lkKvmnIlFbXB0eUNoYXJhY3RlcumAgOWHuuW+queOr1xuICAgICAgICAgICAg6IulQjAgLSBCM+Wdh+WQq+aciUVtcHR5Q2hhcmFjdGVyIOWwhkVtcHR5Q2hhcmFjdGVy5Yqg5YWl5YiwRklSU1QoQSnkuK1cbiAgICAgICAgYCxcbiAgICAgICAgXCI0LiDljrvpmaTmiYDmnInnu4jnu5PnrKblj7fnmoTooajpoblcIixcbiAgICBdXG4gICAgbG9nLmxvZyhcIltnZW5lcmF0ZUZpcnN0U2V0IHN0YXJ0XVwiKTtcbiAgICBjb25zdCBncmFtbWVycyA9IHRyYW5zZmVyU3RyaW5nMkdyYW1tZXJzKGxleGVyLCBpbkdyYW1tZXJzKTtcbiAgICBsb2cubG9nKFwiW2dyYW1tZXJzIGFmdGVyIHRyYW5zZmVyU3RyaW5nMkdyYW1tZXJzXVwiLCBncmFtbWVycyk7XG4gICAgY29uc3QgZmlyc3RTZXQ6IEdyYW1tZXJTZXQgPSBuZXcgQXJyYXkoLi4uZ3JhbW1lcnMubWFwKGdyYW1tZXIgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdG9ja2VuOiBncmFtbWVyLm5vblRlcm1pbmFsLFxuICAgICAgICAgICAgdGVybWluYWxzOiBuZXcgU2V0PFRlcm1pbmFsPigpLFxuICAgICAgICB9XG4gICAgfSkpO1xuICAgIGNvbnN0IGdyYW1tZXJNYXAgPSBuZXcgTWFwPHN0cmluZywgc3RyaW5nW11bXT4oKTtcbiAgICBncmFtbWVycy5mb3JFYWNoKGdyYW1tZXIgPT4ge1xuICAgICAgICBncmFtbWVyTWFwLnNldChncmFtbWVyLm5vblRlcm1pbmFsLCBncmFtbWVyLmRlcml2YXRpb25zKTtcbiAgICB9KVxuICAgIC8qIFxuICAgICAgICDlpoLmnpxY5byP5LiA5Liq57uI57uT56ym5Y+377yM6YKj5LmIRklSU1QoWCkgPSBYIFxuICAgICovXG4gICAgZmlyc3RTZXQucHVzaCguLi5sZXhlci50ZXJtaW5hbHMubWFwKHRlcm1pbmFsID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRvY2tlbjogdGVybWluYWxbMF0sXG4gICAgICAgICAgICB0ZXJtaW5hbHM6IG5ldyBTZXQoW3Rlcm1pbmFsWzBdXSksXG4gICAgICAgICAgICBpc1Rlcm1pbmFsOiB0cnVlXG4gICAgICAgIH1cbiAgICB9KSlcbiAgICB5aWVsZCB7XG4gICAgICAgIHJ1bGVJbmRleDogMCxcbiAgICAgICAgcmVzdWx0OiBmaXJzdFNldFxuICAgIH07XG4gICAgLyogXG4gICAgICAgIOWmguaenCBYID0+IM61IOaYr+S4gOS4quS6p+eUn+W8j++8jOmCo+S5iOWwhmXliqDkurrliLAgRklSU1TvvIhYKeS4reOAglxuICAgICovXG4gICAgZmlyc3RTZXQuZm9yRWFjaChzZXRMaW5lID0+IHtcbiAgICAgICAgaWYgKHNldExpbmUuaXNUZXJtaW5hbCkgcmV0dXJuO1xuICAgICAgICBmb3IgKGxldCBkZXJpdmF0aW9uIG9mIGdyYW1tZXJNYXAuZ2V0KHNldExpbmUudG9ja2VuKSEpIHtcbiAgICAgICAgICAgIGlmIChkZXJpdmF0aW9uLmxlbmd0aCA9PT0gMSAmJiBkZXJpdmF0aW9uWzBdID09PSBFbXB0eUNoYXJhY3RlciAmJiAhc2V0TGluZS50ZXJtaW5hbHMuaGFzKEVtcHR5Q2hhcmFjdGVyKSkge1xuICAgICAgICAgICAgICAgIHNldExpbmUudGVybWluYWxzLmFkZChFbXB0eUNoYXJhY3Rlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KVxuICAgIHlpZWxkIHtcbiAgICAgICAgcnVsZUluZGV4OiAxLFxuICAgICAgICByZXN1bHQ6IGZpcnN0U2V0XG4gICAgfTtcbiAgICBjb25zdCBmaXJzdFNldE1hcCA9IG5ldyBNYXA8c3RyaW5nLCBHcmFtbWVyU2V0TGluZT4oKTtcbiAgICBmb3IgKGxldCBzZXRMaW5lIG9mIGZpcnN0U2V0KSB7XG4gICAgICAgIGZpcnN0U2V0TWFwLnNldChzZXRMaW5lLnRvY2tlbiwgc2V0TGluZSk7XG4gICAgfVxuICAgIC8vIOW+queOr+S4i+mdouatpemqpCDnm7TliLDmsqHmnInlj5jljJbkuLrmraJcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBsZXQgaGFzQ2hhbmdlID0gZmFsc2U7XG4gICAgICAgIC8qIFxuICAgICAgICAgICAgQSA9PiBCMEIxQjJCM1xuICAgICAgICAgICAgaSA9IDBcbiAgICAgICAgICAgIEZJUlNUKEJpKSAtIEVtcHR5Q2hhcmFjdGVyIOWKoOWFpeWIsCBGSVJTVChBKeS4rVxuICAgICAgICAgICAg5aaC5p6cRklSU1QoQjEp5LiN5ZCr5pyJRW1wdHlDaGFyYWN0ZXLpgIDlh7rlvqrnjq9cbiAgICAgICAgICAgIFxuICAgICAgICAgICAg6IulQjAtQjPlnYflkKvmnIlFbXB0eUNoYXJhY3RlciDlsIZFbXB0eUNoYXJhY3RlcuWKoOWFpeWIsEZJUlNUKEEp5LitXG4gICAgICAgICovXG4gICAgICAgIGZpcnN0U2V0LmZvckVhY2goc2V0TGluZSA9PiB7XG4gICAgICAgICAgICBpZiAoc2V0TGluZS5pc1Rlcm1pbmFsKSByZXR1cm47XG4gICAgICAgICAgICBmb3IgKGxldCBkZXJpdmF0aW9uIG9mIGdyYW1tZXJNYXAuZ2V0KHNldExpbmUudG9ja2VuKSEpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRlcml2YXRpb24ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdG9ja2VuID0gZGVyaXZhdGlvbltpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxleGVyLmlzVGVybWluYWwodG9ja2VuKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzZXRMaW5lLnRlcm1pbmFscy5oYXModG9ja2VuKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZy5sb2codG9ja2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNDaGFuZ2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldExpbmUudGVybWluYWxzLmFkZCh0b2NrZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRvY2tlbiAhPT0gRW1wdHlDaGFyYWN0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHRTZXRMaW5lID0gZmlyc3RTZXRNYXAuZ2V0KHRvY2tlbikhO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFNldExpbmUudGVybWluYWxzLmZvckVhY2godGVybWluYWwgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXJtaW5hbCAhPT0gRW1wdHlDaGFyYWN0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzZXRMaW5lLnRlcm1pbmFscy5oYXModGVybWluYWwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNDaGFuZ2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0TGluZS50ZXJtaW5hbHMuYWRkKHRlcm1pbmFsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5leHRTZXRMaW5lLnRlcm1pbmFscy5oYXMoRW1wdHlDaGFyYWN0ZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IGRlcml2YXRpb24ubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0TGluZS50ZXJtaW5hbHMuYWRkKEVtcHR5Q2hhcmFjdGVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgaWYgKCFoYXNDaGFuZ2UpIGJyZWFrO1xuICAgICAgICB5aWVsZCB7XG4gICAgICAgICAgICBydWxlSW5kZXg6IDIsXG4gICAgICAgICAgICByZXN1bHQ6IGZpcnN0U2V0XG4gICAgICAgIH07XG4gICAgfVxuICAgIHlpZWxkIHtcbiAgICAgICAgcnVsZUluZGV4OiAzLFxuICAgICAgICByZXN1bHQ6IGZpcnN0U2V0LmZpbHRlcih2ID0+ICF2LmlzVGVybWluYWwpLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgICAgIGlmIChhLnRvY2tlbiA8IGIudG9ja2VuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkubWFwKHNldExpbmUgPT4ge1xuICAgICAgICAgICAgc2V0TGluZS50ZXJtaW5hbHMgPSBuZXcgU2V0KEFycmF5LmZyb20oc2V0TGluZS50ZXJtaW5hbHMpLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoYSA8IGIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgcmV0dXJuIHNldExpbmU7XG4gICAgICAgIH0pXG4gICAgfVxufSIsImltcG9ydCBnZW5lcmF0ZUZpcnN0U2V0IGZyb20gXCIuL2ZpcnN0U2V0XCI7XG5pbXBvcnQgTGV4ZXIgZnJvbSBcIi4vbGV4ZXJcIjtcbmltcG9ydCB7IEdyYW1tZXJTZXQsIEdyYW1tZXJTZXRMaW5lLCBQcm9jZXNzLCBSdWxlLCBUZXJtaW5hbCB9IGZyb20gXCIuL3R5cGVzL3R5cGVcIjtcbmltcG9ydCB7IHRyYW5zZmVyU3RyaW5nMkdyYW1tZXJzIH0gZnJvbSBcIi4vdXRpbHNcIjtcbmltcG9ydCB7IEVtcHR5Q2hhcmFjdGVyLCBFbmRpbmdDaGFyYWN0ZXIgfSBmcm9tIFwiLi91dGlscy9jb25zdFwiO1xuaW1wb3J0IGxvZyBmcm9tIFwiLi91dGlscy9sb2dcIjtcblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZW5lcmF0ZUZsbG93U2V0KGxleGVyOiBMZXhlciwgaW5HcmFtbWVyczogQXJyYXk8c3RyaW5nPiwgZmlyc3RTZXQ/OiBHcmFtbWVyU2V0KTogR3JhbW1lclNldCB7XG4gICAgbG9nLmxvZyhcIltnZW5lcmF0ZUZsbG93U2V0IHN0YXJ0XVwiKTtcbiAgICBpZiAoIWZpcnN0U2V0KSB7XG4gICAgICAgIGZpcnN0U2V0ID0gZ2VuZXJhdGVGaXJzdFNldChsZXhlciwgaW5HcmFtbWVycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZmlyc3RTZXQgPSBBcnJheS5mcm9tKGZpcnN0U2V0KTtcbiAgICB9XG4gICAgY29uc3QgZ3JhbW1lcnMgPSB0cmFuc2ZlclN0cmluZzJHcmFtbWVycyhsZXhlciwgaW5HcmFtbWVycyk7XG4gICAgbG9nLmxvZyhcIltncmFtbWVycyBhZnRlciB0cmFuc2ZlclN0cmluZzJHcmFtbWVyc11cIiwgZ3JhbW1lcnMpO1xuICAgIC8qXG4gICAgICAgIDEuIOWwhiTmlL7liLBGT0xMT1coUynkuK1cbiAgICAqL1xuICAgIGNvbnN0IGZvbGxvd1NldDogR3JhbW1lclNldCA9IG5ldyBBcnJheSguLi5ncmFtbWVycy5tYXAoZ3JhbW1lciA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b2NrZW46IGdyYW1tZXIubm9uVGVybWluYWwsXG4gICAgICAgICAgICB0ZXJtaW5hbHM6IG5ldyBTZXQ8VGVybWluYWw+KFtFbmRpbmdDaGFyYWN0ZXJdKSxcbiAgICAgICAgfVxuICAgIH0pKTtcbiAgICBjb25zdCBncmFtbWVyTWFwID0gbmV3IE1hcDxzdHJpbmcsIHN0cmluZ1tdW10+KCk7XG4gICAgZ3JhbW1lcnMuZm9yRWFjaChncmFtbWVyID0+IHtcbiAgICAgICAgZ3JhbW1lck1hcC5zZXQoZ3JhbW1lci5ub25UZXJtaW5hbCwgZ3JhbW1lci5kZXJpdmF0aW9ucyk7XG4gICAgfSlcbiAgICBmb2xsb3dTZXQucHVzaCguLi5sZXhlci50ZXJtaW5hbHMubWFwKHRlcm1pbmFsID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRvY2tlbjogdGVybWluYWxbMF0sXG4gICAgICAgICAgICB0ZXJtaW5hbHM6IG5ldyBTZXQoW0VuZGluZ0NoYXJhY3Rlcl0pLFxuICAgICAgICAgICAgaXNUZXJtaW5hbDogdHJ1ZVxuICAgICAgICB9XG4gICAgfSkpXG5cbiAgICBjb25zdCBmb2xsb3dTZXRNYXAgPSBuZXcgTWFwPHN0cmluZywgR3JhbW1lclNldExpbmU+KCk7XG4gICAgZm9yIChsZXQgc2V0TGluZSBvZiBmb2xsb3dTZXQpIHtcbiAgICAgICAgZm9sbG93U2V0TWFwLnNldChzZXRMaW5lLnRvY2tlbiwgc2V0TGluZSk7XG4gICAgfVxuXG4gICAgZmlyc3RTZXQucHVzaCguLi5sZXhlci50ZXJtaW5hbHMubWFwKHRlcm1pbmFsID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRvY2tlbjogdGVybWluYWxbMF0sXG4gICAgICAgICAgICB0ZXJtaW5hbHM6IG5ldyBTZXQoW3Rlcm1pbmFsWzBdXSksXG4gICAgICAgICAgICBpc1Rlcm1pbmFsOiB0cnVlXG4gICAgICAgIH1cbiAgICB9KSlcbiAgICBjb25zdCBmaXJzdFNldE1hcCA9IG5ldyBNYXA8c3RyaW5nLCBHcmFtbWVyU2V0TGluZT4oKTtcbiAgICBmb3IgKGxldCBzZXRMaW5lIG9mIGZpcnN0U2V0KSB7XG4gICAgICAgIGZpcnN0U2V0TWFwLnNldChzZXRMaW5lLnRvY2tlbiwgc2V0TGluZSk7XG4gICAgfVxuICAgIC8vIOW+queOr+S4i+mdouatpemqpCDnm7TliLDmsqHmnInlj5jljJbkuLrmraJcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBsZXQgaGFzQ2hhbmdlID0gZmFsc2U7XG4gICAgICAgIC8qIFxuICAgICAgICAgICAgMi7lpoLmnpzlrZjlnKjkuIDkuKrkuqfnlJ/lvI9BID0+IGFCYiDvvIwg6YKj5LmIRklSU1QoYikg5Lit6ZmkzrUg5LmL5aSW55qE5omA5pyJ56ym5Y+36YO95ZyoRk9MTE9XKEIp5Lit44CCXG4gICAgICAgICAgICBhdHRlbnRpb246IEEgPT4gYUJDZCDpgqPkuYjmiopmaXJzdChDZCnliqDlhaXliLBGb2xsb3coQinkuK3ljrtcbiAgICAgICAgKi9cbiAgICAgICAgZ3JhbW1lcnMuZm9yRWFjaChncmFtbWVyID0+IHtcbiAgICAgICAgICAgIGZvciAobGV0IGRlcml2YXRpb24gb2YgZ3JhbW1lci5kZXJpdmF0aW9ucykge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBkZXJpdmF0aW9uLmxlbmd0aCAtIDI7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNldExpbmUgPSBmb2xsb3dTZXRNYXAuZ2V0KGRlcml2YXRpb25baV0pO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gaSArIDE7IGogPCBkZXJpdmF0aW9uLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXJtaW5hbHMgPSBmaXJzdFNldE1hcC5nZXQoZGVyaXZhdGlvbltqXSkhLnRlcm1pbmFscztcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHRlcm1pbmFsIG9mIHRlcm1pbmFscykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXJtaW5hbCA9PT0gRW1wdHlDaGFyYWN0ZXIpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZXRMaW5lPy50ZXJtaW5hbHMuaGFzKHRlcm1pbmFsKSkgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzQ2hhbmdlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRMaW5lPy50ZXJtaW5hbHMuYWRkKHRlcm1pbmFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGVybWluYWxzLmhhcyhFbXB0eUNoYXJhY3RlcikpIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgLypcbiAgICAgICAgICAgIDMu5aaC5p6c5a2Y5Zyo5LiA5Liq5Lqn55Sf5byPIEEgPT4gYUIg77yMIOaIluWtmOWcqOS6p+eUn+W8jyBBID0+IGFCYiDkuJRGSVJTVChiKSDljIXlkKsgzrUg77yM6YKj5LmIRk9MTE9XKEEp5Lit55qE5omA5pyJ56ym5Y+36YO95ZyoRk9MTE9XKEIp5Lit44CCXG4gICAgICAgICovXG4gICAgICAgIGdyYW1tZXJzLmZvckVhY2goZ3JhbW1lciA9PiB7XG4gICAgICAgICAgICBjb25zdCBwU2V0TGluZSA9IGZvbGxvd1NldE1hcC5nZXQoZ3JhbW1lci5ub25UZXJtaW5hbCk7XG4gICAgICAgICAgICBmb3IgKGxldCBkZXJpdmF0aW9uIG9mIGdyYW1tZXIuZGVyaXZhdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gZGVyaXZhdGlvbi5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0b2NrZW4gPSBkZXJpdmF0aW9uW2ldO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZXRMaW5lID0gZm9sbG93U2V0TWFwLmdldCh0b2NrZW4pO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCB0ZXJtaW5hbCBvZiBwU2V0TGluZSEudGVybWluYWxzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVybWluYWwgPT09IEVtcHR5Q2hhcmFjdGVyKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZXRMaW5lPy50ZXJtaW5hbHMuaGFzKHRlcm1pbmFsKSkgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNDaGFuZ2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0TGluZT8udGVybWluYWxzLmFkZCh0ZXJtaW5hbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmaXJzdFNldE1hcC5nZXQodG9ja2VuKSEudGVybWluYWxzLmhhcyhFbXB0eUNoYXJhY3RlcikpIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgaWYgKCFoYXNDaGFuZ2UpIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gZm9sbG93U2V0LmZpbHRlcih2ID0+ICF2LmlzVGVybWluYWwpLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgaWYgKGEudG9ja2VuIDwgYi50b2NrZW4pIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgfSkubWFwKHNldExpbmUgPT4ge1xuICAgICAgICBzZXRMaW5lLnRlcm1pbmFscyA9IG5ldyBTZXQoQXJyYXkuZnJvbShzZXRMaW5lLnRlcm1pbmFscykuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgaWYgKGEgPCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpXG4gICAgICAgIHJldHVybiBzZXRMaW5lO1xuICAgIH0pO1xufVxuXG5cblxuZXhwb3J0IGZ1bmN0aW9uKiBnZW5lcmF0ZUZsbG93U2V0UHJvZ3Jlc3NpdmUobGV4ZXI6IExleGVyLCBpbkdyYW1tZXJzOiBBcnJheTxzdHJpbmc+LCBmaXJzdFNldD86IEdyYW1tZXJTZXQpOiBJdGVyYWJsZUl0ZXJhdG9yPFJ1bGUgfCBQcm9jZXNzPEdyYW1tZXJTZXQ+PiB7XG4gICAgeWllbGQgW1xuICAgICAgICBcIjEuIOWwhiTmlL7liLBGT0xMT1coUynkuK1cIixcbiAgICAgICAgXCIyLiDlpoLmnpzlrZjlnKjkuIDkuKrkuqfnlJ/lvI9BID0+IGFCYiDvvIwg6YKj5LmIRklSU1QoYikg5Lit6ZmkzrUg5LmL5aSW55qE5omA5pyJ56ym5Y+36YO95ZyoRk9MTE9XKEIp5Lit44CCYXR0ZW50aW9uOiBBID0+IGFCQ2Qg6YKj5LmI5oqKZmlyc3QoQ2Qp5Yqg5YWl5YiwRm9sbG93KEIp5Lit5Y67XCIsXG4gICAgICAgIFwiMy7lpoLmnpzlrZjlnKjkuIDkuKrkuqfnlJ/lvI8gQSA9PiBhQiDvvIwg5oiW5a2Y5Zyo5Lqn55Sf5byPIEEgPT4gYUJiIOS4lEZJUlNUKGIpIOWMheWQqyDOtSDvvIzpgqPkuYhGT0xMT1coQSnkuK3nmoTmiYDmnInnrKblj7fpg73lnKhGT0xMT1coQinkuK3jgIJcIixcbiAgICAgICAgXCI0LiDljrvpmaTmiYDmnInnu4jnu5PnrKblj7fnmoTooajpoblcIixcbiAgICBdXG4gICAgbG9nLmxvZyhcIltnZW5lcmF0ZUZsbG93U2V0IHN0YXJ0XVwiKTtcbiAgICBpZiAoIWZpcnN0U2V0KSB7XG4gICAgICAgIGZpcnN0U2V0ID0gZ2VuZXJhdGVGaXJzdFNldChsZXhlciwgaW5HcmFtbWVycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZmlyc3RTZXQgPSBBcnJheS5mcm9tKGZpcnN0U2V0KTtcbiAgICB9XG4gICAgY29uc3QgZ3JhbW1lcnMgPSB0cmFuc2ZlclN0cmluZzJHcmFtbWVycyhsZXhlciwgaW5HcmFtbWVycyk7XG4gICAgbG9nLmxvZyhcIltncmFtbWVycyBhZnRlciB0cmFuc2ZlclN0cmluZzJHcmFtbWVyc11cIiwgZ3JhbW1lcnMpO1xuICAgIC8qXG4gICAgICAgIDEuIOWwhiTmlL7liLBGT0xMT1coUynkuK1cbiAgICAqL1xuICAgIGNvbnN0IGZvbGxvd1NldDogR3JhbW1lclNldCA9IG5ldyBBcnJheSguLi5ncmFtbWVycy5tYXAoZ3JhbW1lciA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b2NrZW46IGdyYW1tZXIubm9uVGVybWluYWwsXG4gICAgICAgICAgICB0ZXJtaW5hbHM6IG5ldyBTZXQ8VGVybWluYWw+KFtFbmRpbmdDaGFyYWN0ZXJdKSxcbiAgICAgICAgfVxuICAgIH0pKTtcbiAgICBjb25zdCBncmFtbWVyTWFwID0gbmV3IE1hcDxzdHJpbmcsIHN0cmluZ1tdW10+KCk7XG4gICAgZ3JhbW1lcnMuZm9yRWFjaChncmFtbWVyID0+IHtcbiAgICAgICAgZ3JhbW1lck1hcC5zZXQoZ3JhbW1lci5ub25UZXJtaW5hbCwgZ3JhbW1lci5kZXJpdmF0aW9ucyk7XG4gICAgfSlcbiAgICBmb2xsb3dTZXQucHVzaCguLi5sZXhlci50ZXJtaW5hbHMubWFwKHRlcm1pbmFsID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRvY2tlbjogdGVybWluYWxbMF0sXG4gICAgICAgICAgICB0ZXJtaW5hbHM6IG5ldyBTZXQoW0VuZGluZ0NoYXJhY3Rlcl0pLFxuICAgICAgICAgICAgaXNUZXJtaW5hbDogdHJ1ZVxuICAgICAgICB9XG4gICAgfSkpXG4gICAgeWllbGQge1xuICAgICAgICBydWxlSW5kZXg6IDAsXG4gICAgICAgIHJlc3VsdDogZm9sbG93U2V0XG4gICAgfVxuXG4gICAgY29uc3QgZm9sbG93U2V0TWFwID0gbmV3IE1hcDxzdHJpbmcsIEdyYW1tZXJTZXRMaW5lPigpO1xuICAgIGZvciAobGV0IHNldExpbmUgb2YgZm9sbG93U2V0KSB7XG4gICAgICAgIGZvbGxvd1NldE1hcC5zZXQoc2V0TGluZS50b2NrZW4sIHNldExpbmUpO1xuICAgIH1cblxuICAgIGZpcnN0U2V0LnB1c2goLi4ubGV4ZXIudGVybWluYWxzLm1hcCh0ZXJtaW5hbCA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b2NrZW46IHRlcm1pbmFsWzBdLFxuICAgICAgICAgICAgdGVybWluYWxzOiBuZXcgU2V0KFt0ZXJtaW5hbFswXV0pLFxuICAgICAgICAgICAgaXNUZXJtaW5hbDogdHJ1ZVxuICAgICAgICB9XG4gICAgfSkpXG4gICAgY29uc3QgZmlyc3RTZXRNYXAgPSBuZXcgTWFwPHN0cmluZywgR3JhbW1lclNldExpbmU+KCk7XG4gICAgZm9yIChsZXQgc2V0TGluZSBvZiBmaXJzdFNldCkge1xuICAgICAgICBmaXJzdFNldE1hcC5zZXQoc2V0TGluZS50b2NrZW4sIHNldExpbmUpO1xuICAgIH1cbiAgICAvLyDlvqrnjq/kuIvpnaLmraXpqqQg55u05Yiw5rKh5pyJ5Y+Y5YyW5Li65q2iXG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgbGV0IGhhc0NoYW5nZSA9IGZhbHNlO1xuICAgICAgICAvKiBcbiAgICAgICAgICAgIDIu5aaC5p6c5a2Y5Zyo5LiA5Liq5Lqn55Sf5byPQSA9PiBhQmIg77yMIOmCo+S5iEZJUlNUKGIpIOS4remZpM61IOS5i+WklueahOaJgOacieespuWPt+mDveWcqEZPTExPVyhCKeS4reOAglxuICAgICAgICAgICAgYXR0ZW50aW9uOiBBID0+IGFCQ2Qg6YKj5LmI5oqKZmlyc3QoQ2Qp5Yqg5YWl5YiwRm9sbG93KEIp5Lit5Y67XG4gICAgICAgICovXG4gICAgICAgIGdyYW1tZXJzLmZvckVhY2goZ3JhbW1lciA9PiB7XG4gICAgICAgICAgICBmb3IgKGxldCBkZXJpdmF0aW9uIG9mIGdyYW1tZXIuZGVyaXZhdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gZGVyaXZhdGlvbi5sZW5ndGggLSAyOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZXRMaW5lID0gZm9sbG93U2V0TWFwLmdldChkZXJpdmF0aW9uW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IGkgKyAxOyBqIDwgZGVyaXZhdGlvbi5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVybWluYWxzID0gZmlyc3RTZXRNYXAuZ2V0KGRlcml2YXRpb25bal0pIS50ZXJtaW5hbHM7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCB0ZXJtaW5hbCBvZiB0ZXJtaW5hbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVybWluYWwgPT09IEVtcHR5Q2hhcmFjdGVyKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2V0TGluZT8udGVybWluYWxzLmhhcyh0ZXJtaW5hbCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0NoYW5nZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0TGluZT8udGVybWluYWxzLmFkZCh0ZXJtaW5hbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRlcm1pbmFscy5oYXMoRW1wdHlDaGFyYWN0ZXIpKSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICBpZiAoaGFzQ2hhbmdlKSB7XG4gICAgICAgICAgICB5aWVsZCB7XG4gICAgICAgICAgICAgICAgcnVsZUluZGV4OiAxLFxuICAgICAgICAgICAgICAgIHJlc3VsdDogZm9sbG93U2V0XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoYXNDaGFuZ2UgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qXG4gICAgICAgICAgICAzLuWmguaenOWtmOWcqOS4gOS4quS6p+eUn+W8jyBBID0+IGFCIO+8jCDmiJblrZjlnKjkuqfnlJ/lvI8gQSA9PiBhQmIg5LiURklSU1QoYikg5YyF5ZCrIM61IO+8jOmCo+S5iEZPTExPVyhBKeS4reeahOaJgOacieespuWPt+mDveWcqEZPTExPVyhCKeS4reOAglxuICAgICAgICAqL1xuICAgICAgICBncmFtbWVycy5mb3JFYWNoKGdyYW1tZXIgPT4ge1xuICAgICAgICAgICAgY29uc3QgcFNldExpbmUgPSBmb2xsb3dTZXRNYXAuZ2V0KGdyYW1tZXIubm9uVGVybWluYWwpO1xuICAgICAgICAgICAgZm9yIChsZXQgZGVyaXZhdGlvbiBvZiBncmFtbWVyLmRlcml2YXRpb25zKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IGRlcml2YXRpb24ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdG9ja2VuID0gZGVyaXZhdGlvbltpXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2V0TGluZSA9IGZvbGxvd1NldE1hcC5nZXQodG9ja2VuKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgdGVybWluYWwgb2YgcFNldExpbmUhLnRlcm1pbmFscykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlcm1pbmFsID09PSBFbXB0eUNoYXJhY3RlcikgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2V0TGluZT8udGVybWluYWxzLmhhcyh0ZXJtaW5hbCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFzQ2hhbmdlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldExpbmU/LnRlcm1pbmFscy5hZGQodGVybWluYWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghZmlyc3RTZXRNYXAuZ2V0KHRvY2tlbikhLnRlcm1pbmFscy5oYXMoRW1wdHlDaGFyYWN0ZXIpKSBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIGlmIChoYXNDaGFuZ2UpIHtcbiAgICAgICAgICAgIHlpZWxkIHtcbiAgICAgICAgICAgICAgICBydWxlSW5kZXg6IDIsXG4gICAgICAgICAgICAgICAgcmVzdWx0OiBmb2xsb3dTZXRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWhhc0NoYW5nZSkgYnJlYWs7XG4gICAgfVxuICAgIHlpZWxkIHtcbiAgICAgICAgcnVsZUluZGV4OiAzLFxuICAgICAgICByZXN1bHQ6IGZvbGxvd1NldC5maWx0ZXIodiA9PiAhdi5pc1Rlcm1pbmFsKS5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICBpZiAoYS50b2NrZW4gPCBiLnRvY2tlbikge1xuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLm1hcChzZXRMaW5lID0+IHtcbiAgICAgICAgICAgIHNldExpbmUudGVybWluYWxzID0gbmV3IFNldChBcnJheS5mcm9tKHNldExpbmUudGVybWluYWxzKS5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGEgPCBiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSlcbiAgICAgICAgICAgIHJldHVybiBzZXRMaW5lO1xuICAgICAgICB9KVxuICAgIH1cbn1cbiIsImltcG9ydCB7IE5vblRlcm1pbmFsLCBUZXJtaW5hbCwgVG9ja2VuIH0gZnJvbSBcIi4vdHlwZXMvdHlwZVwiO1xuaW1wb3J0IHsgc2FmZVJlZ0NoYXJhY3RlciB9IGZyb20gXCIuL3V0aWxzXCI7XG5pbXBvcnQgeyBFbXB0eUNoYXJhY3RlciwgRW5kaW5nQ2hhcmFjdGVyIH0gZnJvbSBcIi4vdXRpbHMvY29uc3RcIjtcbmltcG9ydCBsb2cgZnJvbSBcIi4vdXRpbHMvbG9nXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExleGVyIHtcbiAgICBwdWJsaWMgbm9uVGVybWluYWxzOiBBcnJheTxzdHJpbmc+O1xuICAgIHB1YmxpYyB0ZXJtaW5hbHM6IEFycmF5PFtzdHJpbmcsIFJlZ0V4cF0+O1xuICAgIGN1cnJlbnRMaW5lOiBudW1iZXIgPSAwO1xuICAgIGN1cnJlbnRDb2x1bW46IG51bWJlciA9IDA7XG4gICAgc291cmNlOiBzdHJpbmcgPSBcIlwiO1xuICAgIGNvbnN0cnVjdG9yKHRlcm1pbmFsczogQXJyYXk8W3N0cmluZywgUmVnRXhwXT4sIG5vblRlcm1pbmFsczogQXJyYXk8c3RyaW5nPikge1xuICAgIC8vIOi+k+WFpeaJgOacieeahOe7iOe7k+espuWPt+mbhuWQiFxuICAgICAgICB0aGlzLm5vblRlcm1pbmFscyA9IFsuLi5ub25UZXJtaW5hbHNdO1xuICAgICAgICB0aGlzLnRlcm1pbmFscyA9IFsuLi50ZXJtaW5hbHNdO1xuICAgIH1cbiAgICBwdWJsaWMgc2V0U291cmNlKHNvdXJjZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICB0aGlzLmN1cnJlbnRMaW5lID0gMDtcbiAgICAgICAgdGhpcy5jdXJyZW50Q29sdW1uID0gMDtcbiAgICB9XG4gICAgcHVibGljIHJlbWFpblN0cmluZygpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2Uuc2xpY2UodGhpcy5jdXJyZW50Q29sdW1uKTtcbiAgICB9XG4gICAgcHVibGljIG5leHQoKTogVG9ja2VuIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudENvbHVtbiA+PSB0aGlzLnNvdXJjZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdG9ja2VuOiBFbmRpbmdDaGFyYWN0ZXIsXG4gICAgICAgICAgICAgICAgb3JpZ2luOiBFbmRpbmdDaGFyYWN0ZXJcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgdGVybWluYWwgb2YgdGhpcy50ZXJtaW5hbHMpIHtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoUmVzdWx0ID0gdGhpcy5zb3VyY2Uuc2xpY2UodGhpcy5jdXJyZW50Q29sdW1uKS5tYXRjaCh0ZXJtaW5hbFsxXSk7XG4gICAgICAgICAgICBpZiAobWF0Y2hSZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB0b2NrZW46IHRlcm1pbmFsWzBdLFxuICAgICAgICAgICAgICAgICAgICBvcmlnaW46IG1hdGNoUmVzdWx0WzBdXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgW2xleGVyIG5leHRdOiBtYXRjaCBuZXh0IFRlcm1pbmFsIGVycm9yIFxcbiBzb3VyZWNJbnB1dDogJHt0aGlzLnNvdXJjZX1cXG4gcmVtYWluU3RyaW5nOiAke3RoaXMuc291cmNlLnNsaWNlKHRoaXMuY3VycmVudENvbHVtbil9YCk7XG4gICAgfVxuICAgIHB1YmxpYyBwb3AoKTogVG9ja2VuIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHRvY2tlbjogVG9ja2VuID0gdGhpcy5uZXh0KCk7XG4gICAgICAgICAgICBpZiAodG9ja2VuLnRvY2tlbiAhPT0gRW5kaW5nQ2hhcmFjdGVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50Q29sdW1uICs9IHRvY2tlbi5vcmlnaW4ubGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRvY2tlbjtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwdWJsaWMgbmV4dE5vdEVtcHR5VGVybWluYWwoKTogVG9ja2VuIHtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHRvY2tlbiA9IHRoaXMubmV4dCgpO1xuICAgICAgICAgICAgaWYgKHRvY2tlbi50b2NrZW4gIT09IFwid2hpdGVTcGFjZVwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRvY2tlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY3VycmVudENvbHVtbiArPSB0b2NrZW4ub3JpZ2luLmxlbmd0aDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwdWJsaWMgbmV4dE5vdEVtcHR5KHN0ZXA6IG51bWJlcik6IFRvY2tlbiB7XG4gICAgICAgIGNvbnN0IGJhY2sgPSB0aGlzLmN1cnJlbnRDb2x1bW47XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RlcCAtIDE7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5wb3BOb3RFbXB0eVRlcm1pbmFsKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdG9ja2VuID0gdGhpcy5uZXh0Tm90RW1wdHlUZXJtaW5hbCgpO1xuICAgICAgICB0aGlzLmN1cnJlbnRDb2x1bW4gPSBiYWNrO1xuICAgICAgICByZXR1cm4gdG9ja2VuO1xuICAgIH1cbiAgICBwdWJsaWMgcG9wTm90RW1wdHlUZXJtaW5hbCgpOiBUb2NrZW4ge1xuICAgICAgICBjb25zdCB0b2NrZW4gPSB0aGlzLm5leHROb3RFbXB0eVRlcm1pbmFsKCk7XG4gICAgICAgIGlmICh0b2NrZW4udG9ja2VuICE9PSBFbmRpbmdDaGFyYWN0ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudENvbHVtbiArPSB0b2NrZW4ub3JpZ2luLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9ja2VuO1xuICAgIH1cbiAgICBwdWJsaWMgaXNUZXJtaW5hbChzdHI6IHN0cmluZykge1xuICAgICAgICBsZXQgaXNUZXJtaW5hbCA9IHRydWU7XG4gICAgICAgIHRoaXMubm9uVGVybWluYWxzLnNvbWUodiA9PiB7XG4gICAgICAgICAgICBpZiAodiA9PT0gc3RyKSB7XG4gICAgICAgICAgICAgICAgaXNUZXJtaW5hbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gaXNUZXJtaW5hbDtcbiAgICB9XG4gICAgLy8g5YiH5Ymy5o6o5a+85byPXG4gICAgcHVibGljIHNwbGl0RGVyaXZhdGlvbihzdHI6IHN0cmluZyk6IEFycmF5PE5vblRlcm1pbmFsIHwgVGVybWluYWw+IHtcbiAgICAgICAgY29uc3QgdGVybWluYWxzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICBsZXQgY291bnRUaW1lID0gMDtcbiAgICAgICAgY29uc3QgTUFYX0VYQ1VURSA9IDUwMDAwO1xuICAgICAgICBjb25zdCBpblN0ciA9IHN0cjtcbiAgICAgICAgd2hpbGUgKHN0ci5sZW5ndGgpIHtcbiAgICAgICAgICAgIGZvciAobGV0IG5vblRlcm1pbmFsIG9mIHRoaXMubm9uVGVybWluYWxzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWF0Y2hSZXN1bHQgPSBzdHIubWF0Y2gobmV3IFJlZ0V4cChcIl5cIiArIG5vblRlcm1pbmFsKSlcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hSZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGVybWluYWxzLnB1c2gobm9uVGVybWluYWwpO1xuICAgICAgICAgICAgICAgICAgICBzdHIgPSBzdHIuc2xpY2UobWF0Y2hSZXN1bHRbMF0ubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgdGVybWluYWwgb2YgdGhpcy50ZXJtaW5hbHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXRjaFJlc3VsdCA9IHN0ci5tYXRjaChuZXcgUmVnRXhwKFwiXlwiICsgc2FmZVJlZ0NoYXJhY3Rlcih0ZXJtaW5hbFswXSkpKVxuICAgICAgICAgICAgICAgIGlmIChtYXRjaFJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICB0ZXJtaW5hbHMucHVzaCh0ZXJtaW5hbFswXSk7XG4gICAgICAgICAgICAgICAgICAgIHN0ciA9IHN0ci5zbGljZShtYXRjaFJlc3VsdFswXS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb3VudFRpbWUrKztcbiAgICAgICAgICAgIGlmIChjb3VudFRpbWUgPiBNQVhfRVhDVVRFKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBbc3BsaXREZXJpdmF0aW9uXSBlcnJvcjogZXhjdXRlIG92ZXIgTUFYX0VYQ1VURSBzdHI6ICR7aW5TdHJ9ICByZW1haW5pbmcgc3RyOiAke3N0cn0gYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRlcm1pbmFscztcbiAgICB9XG4gICAgLypcbiAgICDnlJ/miJDmj5Dlhazlm6DlrZAg5Lul5Y+KIOa2iOmZpOW3pumAkuW9kuS9v+eUqOeahOmdnue7iOe7k+esplxuICAqL1xuICAgIHB1YmxpYyBnZXROZXdOb25UZXJtaW5hbChub25UZXJtaW5hbDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IHRtcCA9IG5vblRlcm1pbmFsO1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgdG1wICs9IFwiJ1wiO1xuICAgICAgICAgICAgaWYgKHRoaXMubm9uVGVybWluYWxzLmluZGV4T2YodG1wKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5vblRlcm1pbmFscy51bnNoaWZ0KHRtcCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRtcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0iLCJpbXBvcnQgeyBnZXREZXJpdmF0aW9uRmlyc3RTZXQgfSBmcm9tIFwiQC9maXJzdFNldFwiO1xyXG5pbXBvcnQgTGV4ZXIgZnJvbSBcIkAvbGV4ZXJcIjtcclxuaW1wb3J0IHsgQXN0Tm9kZSwgR3JhbW1lciwgR3JhbW1lclNldCwgR3JhbW1lclNldExpbmUsIE5vblRlcm1pbmFsLCBQcmVkaWN0TGluZSwgUHJlZGljdFByb2Nlc3NMaW5lLCBQcmVkaWN0VGFibGUsIFByb2Nlc3MsIFJ1bGUsIFRlcm1pbmFsIH0gZnJvbSBcIkAvdHlwZXMvdHlwZVwiO1xyXG5pbXBvcnQgeyB0cmFuc2ZlclN0cmluZzJHcmFtbWVycyB9IGZyb20gXCJAL3V0aWxzXCI7XHJcbmltcG9ydCB7IEVtcHR5Q2hhcmFjdGVyLCBFbmRpbmdDaGFyYWN0ZXIgfSBmcm9tIFwiQC91dGlscy9jb25zdFwiO1xyXG5pbXBvcnQgbG9nIGZyb20gXCJAL3V0aWxzL2xvZ1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2VuZXJhdG9yUHJlZGljdFRhYmxlKFxyXG4gICAgbGV4ZXI6IExleGVyLFxyXG4gICAgaW5HcmFtbWVyczogQXJyYXk8c3RyaW5nPixcclxuICAgIGZpcnN0U2V0OiBHcmFtbWVyU2V0LFxyXG4gICAgZm9sbG93U2V0OiBHcmFtbWVyU2V0LFxyXG4pOiBQcmVkaWN0VGFibGUge1xyXG4gICAgLypcclxuICAgIOWvueivreazleS4reeahOavj+adoeS6p+eUn+W8j++8miBBIC0+IHUg77yaXHJcbiAgICAgICgxKeWvuSBGaXJzdCh1KSDkuK3nmoTmiYDmnInnu4jnu5PnrKYgYSDvvIjkuI3lkKsgzrUg77yJ77yM572uIE1bQSwgYV0gPSDigJxBIC0+IHXigJ0g77ybXHJcbiAgICAgICgyKeiLpSBGaXJzdCh1KSDlkKsgzrUg77yM5YiZ5a+5IEZvbGxvdyhBKSDkuK3nmoTmiYDmnInnrKblj7cgYSDvvIjlj6/lkKsgJCDvvInvvIznva4gTVtBLCBhXSA9IOKAnEEgLT4gdeKAnSBcclxuICAqL1xyXG4gICAgY29uc3QgZ3JhbW1lcnMgPSB0cmFuc2ZlclN0cmluZzJHcmFtbWVycyhsZXhlciwgaW5HcmFtbWVycyk7XHJcbiAgICBjb25zdCBwcmVkaWN0VGFibGU6IFByZWRpY3RUYWJsZSA9IFtdO1xyXG4gICAgY29uc3Qgbm9uVGVybWluYWwyVGFibGVSb3dNYXAgPSBuZXcgTWFwPE5vblRlcm1pbmFsLCBQcmVkaWN0TGluZT4oKTtcclxuICAgIGxleGVyLm5vblRlcm1pbmFscy5mb3JFYWNoKG5vblRlcm1pbmFsID0+IHtcclxuICAgICAgICBjb25zdCB0YWJsZUxpbmUgPSB7XHJcbiAgICAgICAgICAgIG5vblRlcm1pbmFsOiBub25UZXJtaW5hbCxcclxuICAgICAgICAgICAgdGVybWluYWwyRGVyaXZhdGlvbjogbmV3IE1hcDxUZXJtaW5hbCwgR3JhbW1lcj4oKSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIG5vblRlcm1pbmFsMlRhYmxlUm93TWFwLnNldChub25UZXJtaW5hbCwgdGFibGVMaW5lKTtcclxuICAgICAgICBwcmVkaWN0VGFibGUucHVzaCh0YWJsZUxpbmUpO1xyXG4gICAgfSlcclxuICAgIGNvbnN0IG5vblRlcm1pbmFsMkZpcnN0U2V0TWFwID0gbmV3IE1hcDxOb25UZXJtaW5hbCwgR3JhbW1lclNldExpbmU+KCk7XHJcbiAgICBjb25zdCBub25UZXJtaW5hbDJGb2xsb3dTZXRMaW5lID0gbmV3IE1hcDxOb25UZXJtaW5hbCwgR3JhbW1lclNldExpbmU+KCk7XHJcbiAgICBmb3IgKGxldCBzZXRMaW5lIG9mIGZvbGxvd1NldCkge1xyXG4gICAgICAgIG5vblRlcm1pbmFsMkZvbGxvd1NldExpbmUuc2V0KHNldExpbmUudG9ja2VuLCBzZXRMaW5lKTtcclxuICAgIH1cclxuICAgIGZvciAobGV0IHNldExpbmUgb2YgZmlyc3RTZXQpIHtcclxuICAgICAgICBub25UZXJtaW5hbDJGaXJzdFNldE1hcC5zZXQoc2V0TGluZS50b2NrZW4sIHNldExpbmUpO1xyXG4gICAgfVxyXG4gICAgZ3JhbW1lcnMuZm9yRWFjaChncmFtbWVyID0+IHtcclxuICAgICAgICBmb3IgKGxldCBkZXJpdmF0aW9uIG9mIGdyYW1tZXIuZGVyaXZhdGlvbnMpIHtcclxuICAgICAgICAgICAgY29uc3QgZGVyaXZhdGlvbkZpcnN0U2V0ID0gZ2V0RGVyaXZhdGlvbkZpcnN0U2V0KGxleGVyLCBkZXJpdmF0aW9uLCBub25UZXJtaW5hbDJGaXJzdFNldE1hcCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhYmxlTGluZSA9IG5vblRlcm1pbmFsMlRhYmxlUm93TWFwLmdldChncmFtbWVyLm5vblRlcm1pbmFsKTtcclxuICAgICAgICAgICAgbG9nLmxvZyhkZXJpdmF0aW9uRmlyc3RTZXQpO1xyXG4gICAgICAgICAgICAvLyAoMSnlr7kgRmlyc3QodSkg5Lit55qE5omA5pyJ57uI57uT56ymIGEg77yI5LiN5ZCrIM61IO+8ie+8jOe9riBNW0EsIGFdID0g4oCcQSAtPiB14oCdIO+8m1xyXG4gICAgICAgICAgICBsZXQgaGFzU2V0OiBNYXA8c3RyaW5nLGJvb2xlYW4+ID0gbmV3IE1hcCgpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCB0ZXJtaW5hbCBvZiBkZXJpdmF0aW9uRmlyc3RTZXQudGVybWluYWxzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGVybWluYWwgPT09IEVtcHR5Q2hhcmFjdGVyKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGxldCBjZWxsR3JhbW1lcjogR3JhbW1lciB8IHVuZGVmaW5lZCA9IHRhYmxlTGluZT8udGVybWluYWwyRGVyaXZhdGlvbi5nZXQodGVybWluYWwpO1xyXG4gICAgICAgICAgICAgICAgaGFzU2V0LnNldCh0ZXJtaW5hbCx0cnVlKTtcclxuICAgICAgICAgICAgICAgIGlmICghY2VsbEdyYW1tZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsR3JhbW1lciA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9uVGVybWluYWw6IGdyYW1tZXIubm9uVGVybWluYWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlcml2YXRpb25zOiBbXVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgdGFibGVMaW5lPy50ZXJtaW5hbDJEZXJpdmF0aW9uLnNldCh0ZXJtaW5hbCwgY2VsbEdyYW1tZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2VsbEdyYW1tZXIuZGVyaXZhdGlvbnMucHVzaChkZXJpdmF0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyAoMinoi6UgRmlyc3QodSkg5ZCrIM61IO+8jOWImeWvuSBGb2xsb3coQSkg5Lit55qE5omA5pyJ56ym5Y+3IGEg77yI5Y+v5ZCrICQg77yJ77yM572uIE1bQSwgYV0gPSDigJxBIC0+IHXigJ0gXHJcbiAgICAgICAgICAgIGlmIChkZXJpdmF0aW9uRmlyc3RTZXQudGVybWluYWxzLmhhcyhFbXB0eUNoYXJhY3RlcikpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHRlcm1pbmFsIG9mIG5vblRlcm1pbmFsMkZvbGxvd1NldExpbmUuZ2V0KGdyYW1tZXIubm9uVGVybWluYWwpIS50ZXJtaW5hbHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihoYXNTZXQuaGFzKHRlcm1pbmFsKSljb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY2VsbEdyYW1tZXI6IEdyYW1tZXIgfCB1bmRlZmluZWQgPSB0YWJsZUxpbmU/LnRlcm1pbmFsMkRlcml2YXRpb24uZ2V0KHRlcm1pbmFsKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWNlbGxHcmFtbWVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxHcmFtbWVyID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9uVGVybWluYWw6IGdyYW1tZXIubm9uVGVybWluYWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXJpdmF0aW9uczogW11cclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVMaW5lPy50ZXJtaW5hbDJEZXJpdmF0aW9uLnNldCh0ZXJtaW5hbCwgY2VsbEdyYW1tZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjZWxsR3JhbW1lci5kZXJpdmF0aW9ucy5wdXNoKGRlcml2YXRpb24pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgIHJldHVybiBwcmVkaWN0VGFibGU7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tQcmVkaWNrVGFibGVJc1ZhbGlkKGxleGVyOiBMZXhlciwgdGFibGU6IFByZWRpY3RUYWJsZSk6IGJvb2xlYW4ge1xyXG4gICAgLy8g5q+P5LiAQ2VsbOacgOWkmuWPquiDveacieS4gOS4quaOqOWvvOW8jyBcclxuICAgIGZvciAobGV0IHRlcm1pbmFsIG9mIGxleGVyLnRlcm1pbmFscykge1xyXG4gICAgICAgIGNvbnN0IHRvY2tlbiA9IHRlcm1pbmFsWzBdO1xyXG4gICAgICAgIHRhYmxlLmZvckVhY2godGFibGVMaW5lID0+IHtcclxuICAgICAgICAgICAgY29uc3QgdDJkID0gdGFibGVMaW5lLnRlcm1pbmFsMkRlcml2YXRpb24uZ2V0KHRvY2tlbik7XHJcbiAgICAgICAgICAgIGlmICh0MmQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0MmQuZGVyaXZhdGlvbnMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHByZWRpY3QobGV4ZXI6IExleGVyLCB0YWJsZTogUHJlZGljdFRhYmxlLCBfaW5wdXQ6IHN0cmluZywgcGFyc2VTdGFydE5vblRlcm1pbmFsOiBOb25UZXJtaW5hbCk6IEFycmF5PFByZWRpY3RQcm9jZXNzTGluZT4ge1xyXG4gICAgbGV0IGlucHV0ID0gX2lucHV0LnJlcGxhY2VBbGwoL1xccy9nLCBcIlwiKTtcclxuICAgIGNvbnN0IHByZWRpY3RQcm9jZXNzOiBBcnJheTxQcmVkaWN0UHJvY2Vzc0xpbmU+ID0gW107XHJcbiAgICBsZXQgYXN0SWR4ID0gMTtcclxuICAgIGNvbnN0IGFzdE5vZGU6IEFzdE5vZGUgPSB7XHJcbiAgICAgICAgaWQ6IDAsXHJcbiAgICAgICAgdGV4dDogcGFyc2VTdGFydE5vblRlcm1pbmFsLFxyXG4gICAgICAgIGNoZWNrOiBmYWxzZSxcclxuICAgIH07XHJcbiAgICBjb25zdCBhc3RTdGFjayA9IFthc3ROb2RlXTtcclxuICAgIGxldCBjdXJyZW50U3RhdGU6IFByZWRpY3RQcm9jZXNzTGluZSA9IHtcclxuICAgICAgICBwYXJzZVN0YWNrOiBbRW5kaW5nQ2hhcmFjdGVyLCBwYXJzZVN0YXJ0Tm9uVGVybWluYWxdLFxyXG4gICAgICAgIHJlbWFpbmluZ0lucHV0OiBfaW5wdXQsXHJcbiAgICAgICAgcGFyc2VBY3Rpb246IFwiXCIsXHJcbiAgICB9XHJcbiAgICBsZXhlci5zZXRTb3VyY2UoaW5wdXQpO1xyXG4gICAgY29uc3Qgbm9uVGVybWluYWwyVGFibGVSb3dNYXAgPSBuZXcgTWFwPE5vblRlcm1pbmFsLCBQcmVkaWN0TGluZT4oKTtcclxuICAgIHRhYmxlLmZvckVhY2godGFibGVMaW5lID0+IHtcclxuICAgICAgICBub25UZXJtaW5hbDJUYWJsZVJvd01hcC5zZXQodGFibGVMaW5lLm5vblRlcm1pbmFsLCB0YWJsZUxpbmUpO1xyXG4gICAgfSlcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICAgICAgLy8g5Y+W5Ye65qCI6aG25YWD57SgXHJcbiAgICAgICAgICAgIGNvbnN0IHRvY2tlbiA9IGN1cnJlbnRTdGF0ZS5wYXJzZVN0YWNrW2N1cnJlbnRTdGF0ZS5wYXJzZVN0YWNrLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICBpZiAobGV4ZXIuaXNUZXJtaW5hbCh0b2NrZW4pKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZXJtaW5hbCA9IGxleGVyLm5leHQoKTtcclxuICAgICAgICAgICAgICAgIGlmICh0b2NrZW4gPT09IHRlcm1pbmFsLnRvY2tlbikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG1hdGNoIHN1Y2Nlc3NcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U3RhdGUucGFyc2VBY3Rpb24gPSBgbWF0Y2ggJHt0ZXJtaW5hbC50b2NrZW59ICR7dGVybWluYWwub3JpZ2lufWBcclxuICAgICAgICAgICAgICAgICAgICBwcmVkaWN0UHJvY2Vzcy5wdXNoKGN1cnJlbnRTdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFN0YXRlID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShjdXJyZW50U3RhdGUpKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXhlci5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U3RhdGUucGFyc2VBY3Rpb24gPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTdGF0ZS5yZW1haW5pbmdJbnB1dCA9IGxleGVyLnJlbWFpblN0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTdGF0ZS5wYXJzZVN0YWNrLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50U3RhdGUucGFyc2VTdGFjay5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFzdE5vZGUgPSBhc3RTdGFjay5wb3AoKSE7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIWFzdE5vZGUuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXN0Tm9kZS5jaGlsZHJlbiA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBhc3ROb2RlLmNoaWxkcmVuLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogYXN0SWR4KyssXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHRlcm1pbmFsLm9yaWdpbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2s6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgW3ByZWRpY3QgZXJyb3JdIHRlcm1pbmFsIG1hdGNoIGVycm9yIHRvY2tlbjogJHt0b2NrZW59IHN0YWNrOiAke2N1cnJlbnRTdGF0ZS5wYXJzZVN0YWNrfSByZW1haW5pbmdJbnB1dDogJHtsZXhlci5yZW1haW5TdHJpbmcoKX1gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnN0IHRlcm1pbmFsID0gbGV4ZXIubmV4dCgpO1xyXG4gICAgICAgICAgICBjb25zdCB0YWJsZUxpbmU6IFByZWRpY3RMaW5lID0gbm9uVGVybWluYWwyVGFibGVSb3dNYXAuZ2V0KHRvY2tlbikhO1xyXG4gICAgICAgICAgICBjb25zdCBncmFtbWVyOiBHcmFtbWVyID0gdGFibGVMaW5lIS50ZXJtaW5hbDJEZXJpdmF0aW9uLmdldCh0ZXJtaW5hbC50b2NrZW4pO1xyXG4gICAgICAgICAgICBpZiAoZ3JhbW1lcj8uZGVyaXZhdGlvbnM/Lmxlbmd0aCAhPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBbcHJlZGljdCBlcnJvcl0gcGFyc2UgaW5wdXQgZmFpbCBcXG4gdGVybWluYWw6ICR7dGVybWluYWx9IFxcbiAgcmVtYWluaW5nSW5wdXQ6ICR7bGV4ZXIucmVtYWluU3RyaW5nKCl9IFxcbiBncmFtbWVyOiAke2dyYW1tZXJ9IGApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGN1cnJlbnRTdGF0ZS5wYXJzZUFjdGlvbiA9IGBQcmVkaWN0ICR7Z3JhbW1lci5ub25UZXJtaW5hbH0gPT4gJHtncmFtbWVyLmRlcml2YXRpb25zWzBdLmpvaW4oXCIgXCIpfWA7XHJcbiAgICAgICAgICAgIGxvZy5sb2coXCJbcHJlZGljdCBTdGF0ZV1cIiwgY3VycmVudFN0YXRlKTtcclxuICAgICAgICAgICAgcHJlZGljdFByb2Nlc3MucHVzaChjdXJyZW50U3RhdGUpO1xyXG4gICAgICAgICAgICBjdXJyZW50U3RhdGUgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGN1cnJlbnRTdGF0ZSkpO1xyXG4gICAgICAgICAgICBjdXJyZW50U3RhdGUucGFyc2VTdGFjay5wb3AoKTtcclxuICAgICAgICAgICAgY29uc3QgYXN0Tm9kZSA9IGFzdFN0YWNrLnBvcCgpITtcclxuICAgICAgICAgICAgY29uc3QgZGVyaXZhdGlvbiA9IGdyYW1tZXIuZGVyaXZhdGlvbnNbMF0uZmlsdGVyKGNoYXIgPT4gY2hhciAhPT0gRW1wdHlDaGFyYWN0ZXIpO1xyXG4gICAgICAgICAgICBpZighYXN0Tm9kZS5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgYXN0Tm9kZS5jaGlsZHJlbiA9IFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvcihsZXQgdG9ja2VuIG9mIGRlcml2YXRpb24pIHtcclxuICAgICAgICAgICAgICAgIGFzdE5vZGUuY2hpbGRyZW4ucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGFzdElkeCsrLFxyXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IHRvY2tlbixcclxuICAgICAgICAgICAgICAgICAgICBjaGVjazogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFzdFN0YWNrLnB1c2goLi4uWy4uLmFzdE5vZGUuY2hpbGRyZW5dLnJldmVyc2UoKSk7XHJcbiAgICAgICAgICAgIGN1cnJlbnRTdGF0ZS5wYXJzZVN0YWNrLnB1c2goLi4uZGVyaXZhdGlvbi5yZXZlcnNlKCkpO1xyXG4gICAgICAgICAgICBjdXJyZW50U3RhdGUucGFyc2VBY3Rpb24gPSBcIlwiO1xyXG4gICAgICAgICAgICBjdXJyZW50U3RhdGUucmVtYWluaW5nSW5wdXQgPSBsZXhlci5yZW1haW5TdHJpbmcoKTtcclxuICAgICAgICB9XHJcbiAgICB9IGNhdGNoKGU6IGFueSkge1xyXG4gICAgICAgIGN1cnJlbnRTdGF0ZS5wYXJzZUFjdGlvbiA9IGUudG9TdHJpbmcoKTtcclxuICAgICAgICBwcmVkaWN0UHJvY2Vzcy5wdXNoKGN1cnJlbnRTdGF0ZSk7XHJcbiAgICB9XHJcbiAgICAocHJlZGljdFByb2Nlc3MgYXMgYW55KS5hc3ROb2RlID0gYXN0Tm9kZVxyXG4gICAgcmV0dXJuIHByZWRpY3RQcm9jZXNzO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uKiBnZW5lcmF0ZVByZWRpY3RUYWJsZVByb2dyZXNzaXZlKFxyXG4gICAgbGV4ZXI6IExleGVyLFxyXG4gICAgaW5HcmFtbWVyczogQXJyYXk8c3RyaW5nPixcclxuICAgIGZpcnN0U2V0OiBHcmFtbWVyU2V0LFxyXG4gICAgZm9sbG93U2V0OiBHcmFtbWVyU2V0LFxyXG4pOiBJdGVyYWJsZUl0ZXJhdG9yPFJ1bGUgfCBQcm9jZXNzPFByZWRpY3RUYWJsZT4+IHtcclxuICAgIC8qXHJcbiAgICDlr7nor63ms5XkuK3nmoTmr4/mnaHkuqfnlJ/lvI/vvJogQSAtPiB1IO+8mlxyXG4gICAgICAoMSnlr7kgRmlyc3QodSkg5Lit55qE5omA5pyJ57uI57uT56ymIGEg77yI5LiN5ZCrIM61IO+8ie+8jOe9riBNW0EsIGFdID0gQSAtPiB1XHJcbiAgICAgICgyKeiLpSBGaXJzdCh1KSDlkKsgzrUg77yM5YiZ5a+5IEZvbGxvdyhBKSDkuK3nmoTmiYDmnInnrKblj7cgYSDvvIjlj6/lkKsgJCDvvInvvIznva4gTVtBLCBhXSA9IEEgLT4gdVxyXG4gICovXHJcbiAgICB5aWVsZCBbXHJcbiAgICAgICAgXCIxLiDlr7kgRmlyc3QodSkg5Lit55qE5omA5pyJ57uI57uT56ymIGEg77yI5LiN5ZCrIM61IO+8ie+8jOe9riBNW0EsIGFdID0gQSAtPiB1XCIsXHJcbiAgICAgICAgXCIyLiDoi6UgRmlyc3QodSkg5ZCrIM61IO+8jOWImeWvuSBGb2xsb3coQSkg5Lit55qE5omA5pyJ56ym5Y+3IGEg77yI5Y+v5ZCrICQg77yJ77yM572uIE1bQSwgYV0gPSBBIC0+IHVcIlxyXG4gICAgXVxyXG4gICAgY29uc3QgZ3JhbW1lcnMgPSB0cmFuc2ZlclN0cmluZzJHcmFtbWVycyhsZXhlciwgaW5HcmFtbWVycyk7XHJcbiAgICBjb25zdCBwcmVkaWN0VGFibGU6IFByZWRpY3RUYWJsZSA9IFtdO1xyXG4gICAgY29uc3Qgbm9uVGVybWluYWwyVGFibGVSb3dNYXAgPSBuZXcgTWFwPE5vblRlcm1pbmFsLCBQcmVkaWN0TGluZT4oKTtcclxuICAgIGxleGVyLm5vblRlcm1pbmFscy5mb3JFYWNoKG5vblRlcm1pbmFsID0+IHtcclxuICAgICAgICBjb25zdCB0YWJsZUxpbmUgPSB7XHJcbiAgICAgICAgICAgIG5vblRlcm1pbmFsOiBub25UZXJtaW5hbCxcclxuICAgICAgICAgICAgdGVybWluYWwyRGVyaXZhdGlvbjogbmV3IE1hcDxUZXJtaW5hbCwgR3JhbW1lcj4oKSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIG5vblRlcm1pbmFsMlRhYmxlUm93TWFwLnNldChub25UZXJtaW5hbCwgdGFibGVMaW5lKTtcclxuICAgICAgICBwcmVkaWN0VGFibGUucHVzaCh0YWJsZUxpbmUpO1xyXG4gICAgfSlcclxuICAgIGNvbnN0IG5vblRlcm1pbmFsMkZpcnN0U2V0TWFwID0gbmV3IE1hcDxOb25UZXJtaW5hbCwgR3JhbW1lclNldExpbmU+KCk7XHJcbiAgICBjb25zdCBub25UZXJtaW5hbDJGb2xsb3dTZXRMaW5lID0gbmV3IE1hcDxOb25UZXJtaW5hbCwgR3JhbW1lclNldExpbmU+KCk7XHJcbiAgICBmb3IgKGxldCBzZXRMaW5lIG9mIGZvbGxvd1NldCkge1xyXG4gICAgICAgIG5vblRlcm1pbmFsMkZvbGxvd1NldExpbmUuc2V0KHNldExpbmUudG9ja2VuLCBzZXRMaW5lKTtcclxuICAgIH1cclxuICAgIGZvciAobGV0IHNldExpbmUgb2YgZmlyc3RTZXQpIHtcclxuICAgICAgICBub25UZXJtaW5hbDJGaXJzdFNldE1hcC5zZXQoc2V0TGluZS50b2NrZW4sIHNldExpbmUpO1xyXG4gICAgfVxyXG4gICAgZm9yIChsZXQgZ3JhbW1lciBvZiBncmFtbWVycykge1xyXG4gICAgICAgIGZvciAobGV0IGRlcml2YXRpb24gb2YgZ3JhbW1lci5kZXJpdmF0aW9ucykge1xyXG4gICAgICAgICAgICBjb25zdCBkZXJpdmF0aW9uRmlyc3RTZXQgPSBnZXREZXJpdmF0aW9uRmlyc3RTZXQobGV4ZXIsIGRlcml2YXRpb24sIG5vblRlcm1pbmFsMkZpcnN0U2V0TWFwKTtcclxuICAgICAgICAgICAgY29uc3QgdGFibGVMaW5lID0gbm9uVGVybWluYWwyVGFibGVSb3dNYXAuZ2V0KGdyYW1tZXIubm9uVGVybWluYWwpO1xyXG4gICAgICAgICAgICBsb2cubG9nKGRlcml2YXRpb25GaXJzdFNldCk7XHJcbiAgICAgICAgICAgIC8vICgxKeWvuSBGaXJzdCh1KSDkuK3nmoTmiYDmnInnu4jnu5PnrKYgYSDvvIjkuI3lkKsgzrUg77yJ77yM572uIE1bQSwgYV0gPSDigJxBIC0+IHXigJ0g77ybXHJcbiAgICAgICAgICAgIGZvciAobGV0IHRlcm1pbmFsIG9mIGRlcml2YXRpb25GaXJzdFNldC50ZXJtaW5hbHMpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0ZXJtaW5hbCA9PT0gRW1wdHlDaGFyYWN0ZXIpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgbGV0IGNlbGxHcmFtbWVyOiBHcmFtbWVyIHwgdW5kZWZpbmVkID0gdGFibGVMaW5lPy50ZXJtaW5hbDJEZXJpdmF0aW9uLmdldCh0ZXJtaW5hbCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNlbGxHcmFtbWVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbEdyYW1tZXIgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vblRlcm1pbmFsOiBncmFtbWVyLm5vblRlcm1pbmFsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXJpdmF0aW9uczogW11cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlTGluZT8udGVybWluYWwyRGVyaXZhdGlvbi5zZXQodGVybWluYWwsIGNlbGxHcmFtbWVyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNlbGxHcmFtbWVyLmRlcml2YXRpb25zLnB1c2goZGVyaXZhdGlvbik7XHJcbiAgICAgICAgICAgICAgICB5aWVsZCB7XHJcbiAgICAgICAgICAgICAgICAgICAgcnVsZUluZGV4OiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdDogcHJlZGljdFRhYmxlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gKDIp6IulIEZpcnN0KHUpIOWQqyDOtSDvvIzliJnlr7kgRm9sbG93KEEpIOS4reeahOaJgOacieespuWPtyBhIO+8iOWPr+WQqyAkIO+8ie+8jOe9riBNW0EsIGFdID0g4oCcQSAtPiB14oCdIFxyXG4gICAgICAgICAgICBpZiAoZGVyaXZhdGlvbkZpcnN0U2V0LnRlcm1pbmFscy5oYXMoRW1wdHlDaGFyYWN0ZXIpKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCB0ZXJtaW5hbCBvZiBub25UZXJtaW5hbDJGb2xsb3dTZXRMaW5lLmdldChncmFtbWVyLm5vblRlcm1pbmFsKSEudGVybWluYWxzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNlbGxHcmFtbWVyOiBHcmFtbWVyIHwgdW5kZWZpbmVkID0gdGFibGVMaW5lPy50ZXJtaW5hbDJEZXJpdmF0aW9uLmdldCh0ZXJtaW5hbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjZWxsR3JhbW1lcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsR3JhbW1lciA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vblRlcm1pbmFsOiBncmFtbWVyLm5vblRlcm1pbmFsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVyaXZhdGlvbnM6IFtdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlTGluZT8udGVybWluYWwyRGVyaXZhdGlvbi5zZXQodGVybWluYWwsIGNlbGxHcmFtbWVyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbEdyYW1tZXIuZGVyaXZhdGlvbnMucHVzaChkZXJpdmF0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB5aWVsZCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGVJbmRleDogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBwcmVkaWN0VGFibGVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgTGV4ZXIgZnJvbSBcIi4vbGV4ZXJcIjtcbmltcG9ydCB7IE5vblRlcm1pbmFsLCBUZXJtaW5hbCB9IGZyb20gXCIuL3R5cGVzL3R5cGVcIjtcbmltcG9ydCB7IEVtcHR5Q2hhcmFjdGVyIH0gZnJvbSBcIi4vdXRpbHMvY29uc3RcIjtcbmltcG9ydCBsb2cgZnJvbSBcIi4vdXRpbHMvbG9nXCI7XG5cbi8qXG4gICAg5aaC5p6c55So5oi36L6T5YWl55qE5piv5Lmm5LiK6YKj56eN566A5Y2V5paH5rOV77yM6K+l5Ye95pWw6Ieq5Yqo6K+G5Yir5Ye657uI57uT56ym5ZKM6Z2e57uI57uT56ymXG4gICAg6Z2e57uI57uT56ymOiAvXltBLVpdJyogL1xuICAgIOe7iOe7k+espjogL1thLXp8XFx1MDM5MS1cXHUwM0M5XS8gICjlsI/lhpnlrZfmr43ku6Xlj4pHcmVlayBTeW1ib2xzKVxuICAgIGV4OiBodHRwczovL3VuaWNvZGUtdGFibGUuY29tL2VuL3NldHMvZ3JlZWstc3ltYm9scy9cbiAgICDmjqjlr7znrKblj7c6ID0+IC0+XG4qL1xuY29uc3Qgc2ltcGxlTm9uVGVybWluYWxSZWcgPSAvXltBLVpdJyovO1xuY29uc3Qgc2ltcGxlVGVybWluYWxSZWcgPSAvW2EtenxcXHUwMzkxLVxcdTAzQzldLztcbmV4cG9ydCBmdW5jdGlvbiBnZXRUb2NrRnJvbVNpbXBsZUdyYW1tZXJzKGluR3JhbW1lcnM6IEFycmF5PHN0cmluZz4pOiB7XG4gICAgbm9uVGVybWluYWxzOiBBcnJheTxzdHJpbmc+LFxuICAgIHRlcm1pbmFsczogQXJyYXk8W3N0cmluZywgUmVnRXhwXT4sXG59IHtcbiAgICBjb25zdCBub25UZXJtaW5hbHM6IFNldDxzdHJpbmc+ID0gbmV3IFNldCgpO1xuICAgIGNvbnN0IHRlcm1pbmFsczogU2V0PHN0cmluZz4gPSBuZXcgU2V0KCk7XG4gICAgaW5HcmFtbWVycy5mb3JFYWNoKGdyYW1tZXIgPT4ge1xuICAgICAgICBjb25zdCBhcnIgPSBncmFtbWVyLnJlcGxhY2VBbGwoL1xccy9nLCBcIlwiKS5zcGxpdCgvKD0+KXwoLT4pLykuZmlsdGVyKHYgPT4gdiAhPT0gXCI9PlwiICYmIHYgIT09IFwiLT5cIiAmJiB2KTtcbiAgICAgICAgY29uc3Qgbm9uVGVybWluYWwgPSBhcnJbMF07XG4gICAgICAgIG5vblRlcm1pbmFscy5hZGQobm9uVGVybWluYWwpO1xuICAgICAgICBhcnJbMV0uc3BsaXQoXCJ8XCIpLmZpbHRlcih2ID0+IHYgJiYgdiAhPT0gXCJ8XCIpLmZvckVhY2goZGVyaXZhdGlvbiA9PiB7XG4gICAgICAgICAgICB3aGlsZSAoZGVyaXZhdGlvbi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBsZXQgbWF0Y2hSZXN1bHQgPSBudWxsO1xuICAgICAgICAgICAgICAgIG1hdGNoUmVzdWx0ID0gZGVyaXZhdGlvbi5tYXRjaChzaW1wbGVOb25UZXJtaW5hbFJlZyk7XG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoUmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIG5vblRlcm1pbmFscy5hZGQobWF0Y2hSZXN1bHRbMF0pO1xuICAgICAgICAgICAgICAgICAgICBkZXJpdmF0aW9uID0gZGVyaXZhdGlvbi5zbGljZShtYXRjaFJlc3VsdFswXS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbWF0Y2hSZXN1bHQgPSBkZXJpdmF0aW9uLm1hdGNoKHNpbXBsZVRlcm1pbmFsUmVnKTtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hSZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGVybWluYWxzLmFkZChKU09OLnN0cmluZ2lmeShbbWF0Y2hSZXN1bHRbMF0sIFwiXlwiICsgbWF0Y2hSZXN1bHRbMF1dKSk7XG4gICAgICAgICAgICAgICAgICAgIGRlcml2YXRpb24gPSBkZXJpdmF0aW9uLnNsaWNlKG1hdGNoUmVzdWx0WzBdLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFtnZXRUb2NrRnJvbVNpbXBsZUdyYW1tZXJzIGVycm9yXSBjYW50IHJlY29nbml6ZSB0aGUgY2hhcmFjdGVyIHJlbWFpbmluZzogJHtkZXJpdmF0aW9ufWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH0pXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbm9uVGVybWluYWxzOiBBcnJheS5mcm9tKG5vblRlcm1pbmFscykuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgLy8g5YGa5LiA5Liq566A5Y2V5o6S5bqPIOmYsuatokIg5ZKMIEInIOWGsueqgVxuICAgICAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG4gICAgICAgIH0pLFxuICAgICAgICB0ZXJtaW5hbHM6IEFycmF5LmZyb20odGVybWluYWxzKS5tYXAoanNvbkRhdGEgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGVybWluYWwgPSBKU09OLnBhcnNlKGpzb25EYXRhKTtcbiAgICAgICAgICAgIHRlcm1pbmFsWzFdID0gbmV3IFJlZ0V4cCh0ZXJtaW5hbFsxXSk7XG4gICAgICAgICAgICByZXR1cm4gdGVybWluYWw7XG4gICAgICAgIH0pXG4gICAgfVxufVxuXG4vKlxuICAgIOajgOa1i+aWh+azleaYr+WQpumcgOimgeeugOWNleWQiOW5tuWOu+mHjVxuKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGVja05lZWR1bmlvbkdyYW1tZXJzKGdyYW1tZXJzOiBBcnJheTxzdHJpbmc+KTogYm9vbGVhbiB7XG4gICAgbGV0IHVuaW9uTWFwID0gbmV3IE1hcDxzdHJpbmcsIEFycmF5PHN0cmluZz4+KCk7XG4gICAgZm9yIChsZXQgZ3JhbW1lciBvZiBncmFtbWVycykge1xuICAgICAgICBncmFtbWVyID0gZ3JhbW1lci5yZXBsYWNlQWxsKC9cXHMvZywgXCJcIik7XG4gICAgICAgIGNvbnN0IGFyciA9IGdyYW1tZXIuc3BsaXQoLyg9Pil8KC0+KS8pLmZpbHRlcih2ID0+IHYgIT09IFwiPT5cIiAmJiB2ICE9PSBcIi0+XCIgJiYgdik7XG4gICAgICAgIGNvbnN0IG5vblRlcm1pbmFsID0gYXJyWzBdO1xuICAgICAgICBjb25zdCBkZXJpdmF0aW9uID0gYXJyWzFdO1xuICAgICAgICBpZiAodW5pb25NYXAuaGFzKG5vblRlcm1pbmFsKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1bmlvbk1hcC5zZXQobm9uVGVybWluYWwsIFtkZXJpdmF0aW9uXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLypcbiAgICBBIC0+IGFcbiAgICBBIC0+IGNcbiAgICA9PT0+XG4gICAgQSAtPiBhIHwgY1xuXG4gICAg5bm25LiU5Lya566A5Y2V5Y676YeNXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIHVuaW9uR3JhbW1lcnMoZ3JhbW1lcnM6IEFycmF5PHN0cmluZz4sIG5vblRlcm1pbmFscz86IEFycmF5PHN0cmluZz4sIHRlcm1pbmFscz86IEFycmF5PFtzdHJpbmcsIFJlZ0V4cF0+KTogQXJyYXk8c3RyaW5nPiB7XG4gICAgbGV0IHVuaW9uTWFwID0gbmV3IE1hcDxzdHJpbmcsIEFycmF5PHN0cmluZz4+KCk7XG4gICAgY29uc3QgcmVzdWx0OiBBcnJheTxzdHJpbmc+ID0gW107XG4gICAgaWYgKCFub25UZXJtaW5hbHMgfHwgIXRlcm1pbmFscykge1xuICAgICAgICBjb25zdCB0b2NrZW5BbmFSZXMgPSBnZXRUb2NrRnJvbVNpbXBsZUdyYW1tZXJzKGdyYW1tZXJzKTtcbiAgICAgICAgbm9uVGVybWluYWxzID0gdG9ja2VuQW5hUmVzLm5vblRlcm1pbmFscztcbiAgICAgICAgdGVybWluYWxzID0gdG9ja2VuQW5hUmVzLnRlcm1pbmFscztcbiAgICB9XG4gICAgbGV0IGxleGVyID0gbmV3IExleGVyKHRlcm1pbmFscywgbm9uVGVybWluYWxzKTtcbiAgICBncmFtbWVycy5mb3JFYWNoKGdyYW1tZXIgPT4ge1xuICAgICAgICBncmFtbWVyID0gZ3JhbW1lci5yZXBsYWNlQWxsKC9cXHMvZywgXCJcIik7XG4gICAgICAgIGNvbnN0IGFyciA9IGdyYW1tZXIuc3BsaXQoLyg9Pil8KC0+KS8pLmZpbHRlcih2ID0+IHYgIT09IFwiPT5cIiAmJiB2ICE9PSBcIi0+XCIgJiYgdik7XG4gICAgICAgIGNvbnN0IG5vblRlcm1pbmFsID0gYXJyWzBdO1xuICAgICAgICBjb25zdCBkZXJpdmF0aW9ucyA9IGFyclsxXS5zcGxpdChcInxcIikuZmlsdGVyKHYgPT4gdikubWFwKGRlcml2YXRpb24gPT4ge1xuICAgICAgICAgICAgbG9nLmxvZyhcIltkZWJ1Z11cIiwgcmVzdWx0KTtcbiAgICAgICAgICAgIHJldHVybiBsZXhlci5zcGxpdERlcml2YXRpb24oZGVyaXZhdGlvbik7XG4gICAgICAgIH0pXG5cbiAgICAgICAgaWYgKHVuaW9uTWFwLmhhcyhub25UZXJtaW5hbCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGFyciA9IHVuaW9uTWFwLmdldChub25UZXJtaW5hbCk7XG4gICAgICAgICAgICBkZXJpdmF0aW9ucy5mb3JFYWNoKGRlcml2YXRpb249PntcbiAgICAgICAgICAgICAgICBjb25zdCBkZXJpID0gZGVyaXZhdGlvbi5qb2luKFwiIFwiKTtcbiAgICAgICAgICAgICAgICBpZihhcnI/LmluZGV4T2YoZGVyaSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyci5wdXNoKGRlcmkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1bmlvbk1hcC5zZXQobm9uVGVybWluYWwsIGRlcml2YXRpb25zLm1hcChkZXJpdmF0aW9uPT57XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlcml2YXRpb24uam9pbihcIiBcIik7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICB9KVxuICAgIGZvciAobGV0IG5vblRlcm1pbmFsIG9mIHVuaW9uTWFwLmtleXMoKSkge1xuICAgICAgICBjb25zdCBkZXJpdmF0aW9ucyA9IFsuLi5uZXcgU2V0KHVuaW9uTWFwLmdldChub25UZXJtaW5hbCkhKV07XG4gICAgICAgIHJlc3VsdC5wdXNoKGAke25vblRlcm1pbmFsfSA9PiAke2Rlcml2YXRpb25zLmpvaW4oXCJ8XCIpfWAuc3BsaXQoXCJ8XCIpLmpvaW4oXCIgfCBcIikpO1xuICAgIH1cbiAgICBsb2cubG9nKHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLypcbiAgICDmo4DmtYvmmK/lkKbpnIDopoHov5vooYzmj5Dlt6blhazlhbHlm6DlrZBcbiovXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tOZWVkbGlmdFVwQ29tbW9uVG9ja2VuKGdyYW1tZXJzOiBBcnJheTxzdHJpbmc+LCBub25UZXJtaW5hbHM/OiBBcnJheTxzdHJpbmc+LCB0ZXJtaW5hbHM/OiBBcnJheTxbc3RyaW5nLCBSZWdFeHBdPik6IGJvb2xlYW4ge1xuICAgIGxldCByZXN1bHQ6IEFycmF5PHN0cmluZz4gPSBncmFtbWVycztcbiAgICBpZiAoIW5vblRlcm1pbmFscyB8fCAhdGVybWluYWxzKSB7XG4gICAgICAgIGNvbnN0IHRvY2tlbkFuYVJlcyA9IGdldFRvY2tGcm9tU2ltcGxlR3JhbW1lcnMoZ3JhbW1lcnMpO1xuICAgICAgICBub25UZXJtaW5hbHMgPSB0b2NrZW5BbmFSZXMubm9uVGVybWluYWxzO1xuICAgICAgICB0ZXJtaW5hbHMgPSB0b2NrZW5BbmFSZXMudGVybWluYWxzO1xuICAgIH1cbiAgICBsZXQgbGV4ZXIgPSBuZXcgTGV4ZXIodGVybWluYWxzLCBub25UZXJtaW5hbHMpO1xuICAgIGZvciAobGV0IGdyYW1tZXIgb2YgcmVzdWx0KSB7XG4gICAgICAgIGdyYW1tZXIgPSBncmFtbWVyLnJlcGxhY2VBbGwoL1xccy9nLCBcIlwiKTtcbiAgICAgICAgY29uc3QgYXJyID0gZ3JhbW1lci5zcGxpdCgvKD0+KXwoLT4pLykuZmlsdGVyKHYgPT4gdiAhPT0gXCI9PlwiICYmIHYgIT09IFwiLT5cIiAmJiB2KTtcbiAgICAgICAgY29uc3QgZGVyaXZhdGlvbnMgPSBhcnJbMV0uc3BsaXQoXCJ8XCIpLmZpbHRlcih2ID0+IHYpLm1hcChkZXJpdmF0aW9uID0+IHtcbiAgICAgICAgICAgIGxvZy5sb2coXCJbZGVidWddXCIsIHJlc3VsdCk7XG4gICAgICAgICAgICByZXR1cm4gbGV4ZXIuc3BsaXREZXJpdmF0aW9uKGRlcml2YXRpb24pO1xuICAgICAgICB9KVxuICAgICAgICBjb25zdCBmaXJzdFRvY2tlbjJEZXJpdmF0aW9uc01hcCA9IG5ldyBNYXA8Tm9uVGVybWluYWwgfCBUZXJtaW5hbCwgc3RyaW5nW11bXT4oKTtcbiAgICAgICAgZGVyaXZhdGlvbnMuZm9yRWFjaChkZXJpdmF0aW9uID0+IHtcbiAgICAgICAgICAgIGxldCBhcnIgPSBmaXJzdFRvY2tlbjJEZXJpdmF0aW9uc01hcC5nZXQoZGVyaXZhdGlvblswXSk7XG4gICAgICAgICAgICBpZiAoIWFycikge1xuICAgICAgICAgICAgICAgIGFyciA9IFtkZXJpdmF0aW9uLnNsaWNlKDEpXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXJyLnB1c2goZGVyaXZhdGlvbi5zbGljZSgxKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaXJzdFRvY2tlbjJEZXJpdmF0aW9uc01hcC5zZXQoZGVyaXZhdGlvblswXSwgYXJyKTtcbiAgICAgICAgfSlcbiAgICAgICAgZm9yIChsZXQgdG9ja2VuIG9mIGZpcnN0VG9ja2VuMkRlcml2YXRpb25zTWFwLmtleXMoKSkge1xuICAgICAgICAgICAgaWYgKGZpcnN0VG9ja2VuMkRlcml2YXRpb25zTWFwLmdldCh0b2NrZW4pPy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBsaWZ0VXBDb21tb25Ub2NrZW4oZ3JhbW1lcnM6IEFycmF5PHN0cmluZz4sIG5vblRlcm1pbmFscz86IEFycmF5PHN0cmluZz4sIHRlcm1pbmFscz86IEFycmF5PFtzdHJpbmcsIFJlZ0V4cF0+KTogQXJyYXk8c3RyaW5nPiB7XG4gICAgbGV0IHJlc3VsdDogQXJyYXk8c3RyaW5nPiA9IGdyYW1tZXJzO1xuICAgIGlmICghbm9uVGVybWluYWxzIHx8ICF0ZXJtaW5hbHMpIHtcbiAgICAgICAgY29uc3QgdG9ja2VuQW5hUmVzID0gZ2V0VG9ja0Zyb21TaW1wbGVHcmFtbWVycyhncmFtbWVycyk7XG4gICAgICAgIG5vblRlcm1pbmFscyA9IHRvY2tlbkFuYVJlcy5ub25UZXJtaW5hbHM7XG4gICAgICAgIHRlcm1pbmFscyA9IHRvY2tlbkFuYVJlcy50ZXJtaW5hbHM7XG4gICAgfVxuICAgIGxldCBsZXhlciA9IG5ldyBMZXhlcih0ZXJtaW5hbHMsIG5vblRlcm1pbmFscyk7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgbGV0IG5ld0FkZEdyYW1tZXJzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICBjb25zdCB0bXBSZXN1bHQgPSByZXN1bHQubWFwKGdyYW1tZXIgPT4ge1xuICAgICAgICAgICAgZ3JhbW1lciA9IGdyYW1tZXIucmVwbGFjZUFsbCgvXFxzL2csIFwiXCIpO1xuICAgICAgICAgICAgY29uc3QgYXJyID0gZ3JhbW1lci5zcGxpdCgvKD0+KXwoLT4pLykuZmlsdGVyKHYgPT4gdiAhPT0gXCI9PlwiICYmIHYgIT09IFwiLT5cIiAmJiB2KTtcbiAgICAgICAgICAgIGNvbnN0IG5vblRlcm1pbmFsID0gYXJyWzBdO1xuICAgICAgICAgICAgY29uc3QgZGVyaXZhdGlvbnMgPSBhcnJbMV0uc3BsaXQoXCJ8XCIpLmZpbHRlcih2ID0+IHYpLm1hcChkZXJpdmF0aW9uID0+IHtcbiAgICAgICAgICAgICAgICBsb2cubG9nKFwiW2RlYnVnXVwiLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBsZXhlci5zcGxpdERlcml2YXRpb24oZGVyaXZhdGlvbik7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgY29uc3QgbmV3RGVyaXZhdGlvbiA9IFtdO1xuICAgICAgICAgICAgY29uc3QgZmlyc3RUb2NrZW4yRGVyaXZhdGlvbnNNYXAgPSBuZXcgTWFwPE5vblRlcm1pbmFsIHwgVGVybWluYWwsIHN0cmluZ1tdW10+KCk7XG4gICAgICAgICAgICBkZXJpdmF0aW9ucy5mb3JFYWNoKGRlcml2YXRpb24gPT4ge1xuICAgICAgICAgICAgICAgIGxldCBhcnIgPSBmaXJzdFRvY2tlbjJEZXJpdmF0aW9uc01hcC5nZXQoZGVyaXZhdGlvblswXSk7XG4gICAgICAgICAgICAgICAgaWYgKCFhcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJyID0gW2Rlcml2YXRpb24uc2xpY2UoMSldO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFyci5wdXNoKGRlcml2YXRpb24uc2xpY2UoMSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaXJzdFRvY2tlbjJEZXJpdmF0aW9uc01hcC5zZXQoZGVyaXZhdGlvblswXSwgYXJyKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBmb3IgKGxldCB0b2NrZW4gb2YgZmlyc3RUb2NrZW4yRGVyaXZhdGlvbnNNYXAua2V5cygpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZpcnN0VG9ja2VuMkRlcml2YXRpb25zTWFwLmdldCh0b2NrZW4pPy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3RGVyaXZhdGlvbi5wdXNoKHRvY2tlbiArIGZpcnN0VG9ja2VuMkRlcml2YXRpb25zTWFwLmdldCh0b2NrZW4pIVswXS5qb2luKFwiXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGRlcml2YXRpb25zID0gZmlyc3RUb2NrZW4yRGVyaXZhdGlvbnNNYXAuZ2V0KHRvY2tlbik7XG4gICAgICAgICAgICAgICAgLy8g5Y+v5Lul5o+Q5Y+W5YWs5Zug5a2QXG4gICAgICAgICAgICAgICAgY29uc3QgbmV3VW5UZXJtaW5hbCA9IGxleGVyLmdldE5ld05vblRlcm1pbmFsKG5vblRlcm1pbmFsKTtcbiAgICAgICAgICAgICAgICBuZXdEZXJpdmF0aW9uLnB1c2godG9ja2VuICsgbmV3VW5UZXJtaW5hbCk7XG4gICAgICAgICAgICAgICAgbmV3QWRkR3JhbW1lcnMucHVzaChuZXdVblRlcm1pbmFsICsgXCIgPT4gXCIgKyBkZXJpdmF0aW9ucz8ubWFwKHYgPT4gdi5qb2luKFwiIFwiKSkuam9pbihcIiB8IFwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbm9uVGVybWluYWwgKyBcIiA9PiBcIiArIG5ld0Rlcml2YXRpb24uam9pbihcIiB8IFwiKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGxvZy5sb2coXCJbcHJlXVwiLCB0bXBSZXN1bHQsIG5ld0FkZEdyYW1tZXJzKTtcbiAgICAgICAgY29uc3QgbmV3UmVzdWx0ID0gWy4uLnRtcFJlc3VsdCwgLi4ubmV3QWRkR3JhbW1lcnNdO1xuICAgICAgICBsb2cubG9nKFwiW2NvbV1cIiwgcmVzdWx0LCBuZXdSZXN1bHQpO1xuICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCA9PT0gbmV3UmVzdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gbmV3UmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLypcbiAgICDmo4Dmn6XmmK/lkKbpnIDopoHmuIXmpZrlt6bpgJLlvZJcbiovXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tOZWVkQ2xlYXJSaWdodFJlY3Vyc2lvbihncmFtbWVyczogQXJyYXk8c3RyaW5nPiwgbm9uVGVybWluYWxzPzogQXJyYXk8c3RyaW5nPiwgdGVybWluYWxzPzogQXJyYXk8W3N0cmluZywgUmVnRXhwXT4pOiBib29sZWFuIHtcbiAgICBjb25zdCByZXN1bHQ6IEFycmF5PHN0cmluZz4gPSBbXTtcbiAgICBpZiAoIW5vblRlcm1pbmFscyB8fCAhdGVybWluYWxzKSB7XG4gICAgICAgIGNvbnN0IHRvY2tlbkFuYVJlcyA9IGdldFRvY2tGcm9tU2ltcGxlR3JhbW1lcnMoZ3JhbW1lcnMpO1xuICAgICAgICBub25UZXJtaW5hbHMgPSB0b2NrZW5BbmFSZXMubm9uVGVybWluYWxzO1xuICAgICAgICB0ZXJtaW5hbHMgPSB0b2NrZW5BbmFSZXMudGVybWluYWxzO1xuICAgIH1cbiAgICBsb2cubG9nKFwiW25vblRlcm1pbmFsc11cIiwgbm9uVGVybWluYWxzKTtcbiAgICBsb2cubG9nKFwiW3Rlcm1pbmFsc11cIiwgdGVybWluYWxzKTtcbiAgICBsZXQgbGV4ZXIgPSBuZXcgTGV4ZXIodGVybWluYWxzLCBub25UZXJtaW5hbHMpO1xuICAgIGNvbnN0IG5vblRlcm1pbmFsczJEZXJpdmF0aW9uTWFwID0gbmV3IE1hcDxOb25UZXJtaW5hbCwgc3RyaW5nW11bXT4oKTtcbiAgICBmb3IgKGxldCBncmFtbWVyIG9mIGdyYW1tZXJzKSB7XG4gICAgICAgIGdyYW1tZXIgPSBncmFtbWVyLnJlcGxhY2VBbGwoL1xccy9nLCBcIlwiKTtcbiAgICAgICAgY29uc3QgYXJyID0gZ3JhbW1lci5zcGxpdCgvKD0+KXwoLT4pLykuZmlsdGVyKHYgPT4gdiAhPT0gXCI9PlwiICYmIHYgIT09IFwiLT5cIiAmJiB2KTtcbiAgICAgICAgY29uc3Qgbm9uVGVybWluYWwgPSBhcnJbMF07XG4gICAgICAgIGNvbnN0IGRlcml2YXRpb25zID0gYXJyWzFdLnNwbGl0KFwifFwiKS5maWx0ZXIodiA9PiB2KS5tYXAoZGVyaXZhdGlvbiA9PiB7XG4gICAgICAgICAgICByZXR1cm4gbGV4ZXIuc3BsaXREZXJpdmF0aW9uKGRlcml2YXRpb24pO1xuICAgICAgICB9KTtcbiAgICAgICAgbm9uVGVybWluYWxzMkRlcml2YXRpb25NYXAuc2V0KG5vblRlcm1pbmFsLCBkZXJpdmF0aW9ucyk7XG4gICAgfVxuICAgIGxvZy5sb2coXCJbbm9uVGVybWluYWxzMkRlcml2YXRpb25NYXBdXCIsIG5vblRlcm1pbmFsczJEZXJpdmF0aW9uTWFwKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vblRlcm1pbmFscy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBnSSA9IG5vblRlcm1pbmFsczJEZXJpdmF0aW9uTWFwLmdldChub25UZXJtaW5hbHNbaV0pO1xuICAgICAgICAvLyDmtojpmaTlt6bpgJLlvZJcbiAgICAgICAgZm9yIChsZXQgaiA9IGdJIS5sZW5ndGggLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgICAgICAgY29uc3QgZ3JhbW1lciA9IGdJIVtqXTtcbiAgICAgICAgICAgIGlmIChncmFtbWVyWzBdID09PSBub25UZXJtaW5hbHNbaV0pIHtcbiAgICAgICAgICAgICAgICAvLyDlrZjlnKjlt6bpgJLlvZJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vKlxuICAgIOa2iOmZpOW3pumAkuW9klxuICAgIOebtOaOpeW3pumAkuW9ki3pl7TmjqXlt6bpgJLlvZJcbiAgICDopoHmsYLvvJog6L6T5YWl5paH5rOV5LiN5ZCr5pyJRW1wdHlDaGFyYXRlciDlkowg546vXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyUmlnaHRSZWN1cnNpb24oZ3JhbW1lcnM6IEFycmF5PHN0cmluZz4sIG5vblRlcm1pbmFscz86IEFycmF5PHN0cmluZz4sIHRlcm1pbmFscz86IEFycmF5PFtzdHJpbmcsIFJlZ0V4cF0+KTogQXJyYXk8c3RyaW5nPiB7XG4gICAgY29uc3QgcmVzdWx0OiBBcnJheTxzdHJpbmc+ID0gW107XG4gICAgaWYgKCFub25UZXJtaW5hbHMgfHwgIXRlcm1pbmFscykge1xuICAgICAgICBjb25zdCB0b2NrZW5BbmFSZXMgPSBnZXRUb2NrRnJvbVNpbXBsZUdyYW1tZXJzKGdyYW1tZXJzKTtcbiAgICAgICAgbm9uVGVybWluYWxzID0gdG9ja2VuQW5hUmVzLm5vblRlcm1pbmFscztcbiAgICAgICAgdGVybWluYWxzID0gdG9ja2VuQW5hUmVzLnRlcm1pbmFscztcbiAgICB9XG4gICAgbG9nLmxvZyhcIltub25UZXJtaW5hbHNdXCIsIG5vblRlcm1pbmFscyk7XG4gICAgbG9nLmxvZyhcIlt0ZXJtaW5hbHNdXCIsIHRlcm1pbmFscyk7XG4gICAgbGV0IGxleGVyID0gbmV3IExleGVyKHRlcm1pbmFscywgbm9uVGVybWluYWxzKTtcbiAgICBjb25zdCBub25UZXJtaW5hbHMyRGVyaXZhdGlvbk1hcCA9IG5ldyBNYXA8Tm9uVGVybWluYWwsIHN0cmluZ1tdW10+KCk7XG4gICAgZm9yIChsZXQgZ3JhbW1lciBvZiBncmFtbWVycykge1xuICAgICAgICBncmFtbWVyID0gZ3JhbW1lci5yZXBsYWNlQWxsKC9cXHMvZywgXCJcIik7XG4gICAgICAgIGNvbnN0IGFyciA9IGdyYW1tZXIuc3BsaXQoLyg9Pil8KC0+KS8pLmZpbHRlcih2ID0+IHYgIT09IFwiPT5cIiAmJiB2ICE9PSBcIi0+XCIgJiYgdik7XG4gICAgICAgIGNvbnN0IG5vblRlcm1pbmFsID0gYXJyWzBdO1xuICAgICAgICBjb25zdCBkZXJpdmF0aW9ucyA9IGFyclsxXS5zcGxpdChcInxcIikuZmlsdGVyKHYgPT4gdikubWFwKGRlcml2YXRpb24gPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGxleGVyLnNwbGl0RGVyaXZhdGlvbihkZXJpdmF0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgICAgIG5vblRlcm1pbmFsczJEZXJpdmF0aW9uTWFwLnNldChub25UZXJtaW5hbCwgZGVyaXZhdGlvbnMpO1xuICAgIH1cbiAgICBsb2cubG9nKFwiW25vblRlcm1pbmFsczJEZXJpdmF0aW9uTWFwXVwiLCBub25UZXJtaW5hbHMyRGVyaXZhdGlvbk1hcCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub25UZXJtaW5hbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgZ0kgPSBub25UZXJtaW5hbHMyRGVyaXZhdGlvbk1hcC5nZXQobm9uVGVybWluYWxzW2ldKTtcbiAgICAgICAgLy8g5pu/5o2i5Lqn55Sf5byPXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgaTsgaisrKSB7XG4gICAgICAgICAgICBjb25zdCBnSiA9IG5vblRlcm1pbmFsczJEZXJpdmF0aW9uTWFwLmdldChub25UZXJtaW5hbHNbal0pO1xuICAgICAgICAgICAgZm9yIChsZXQgayA9IGdJIS5sZW5ndGggLSAxOyBrID49IDA7IGstLSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGdyYW1tZXIgPSBnSSFba107XG4gICAgICAgICAgICAgICAgaWYgKGdyYW1tZXJbMF0gPT09IG5vblRlcm1pbmFsc1tqXSkge1xuICAgICAgICAgICAgICAgICAgICAvLyByZXBsYWNlXG4gICAgICAgICAgICAgICAgICAgIGxvZy5sb2coZ3JhbW1lciwgbm9uVGVybWluYWxzW2pdKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgamdyYW1tZXIgb2YgZ0ohKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2cubG9nKFwiWy1dXCIsIGpncmFtbWVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdJPy5wdXNoKFsuLi5qZ3JhbW1lciwgLi4uZ3JhbW1lci5zbGljZSgxKV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGdJPy5zcGxpY2UoaywgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5lZWRIYW5kbGVJbmRleDogbnVtYmVyW10gPSBbXTtcbiAgICAgICAgLy8g5raI6Zmk5bem6YCS5b2SXG4gICAgICAgIGZvciAobGV0IGogPSBnSSEubGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgICAgIGNvbnN0IGdyYW1tZXIgPSBnSSFbal07XG4gICAgICAgICAgICBpZiAoZ3JhbW1lclswXSA9PT0gbm9uVGVybWluYWxzW2ldKSB7XG4gICAgICAgICAgICAgICAgLy8g5a2Y5Zyo5bem6YCS5b2SXG4gICAgICAgICAgICAgICAgbmVlZEhhbmRsZUluZGV4LnB1c2goaik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5lZWRIYW5kbGVJbmRleC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld05vblRlcm1pbmFsVG9ja2VuID0gbGV4ZXIuZ2V0TmV3Tm9uVGVybWluYWwobm9uVGVybWluYWxzW2ldKTtcbiAgICAgICAgICAgIGNvbnN0IG5ld0dyYW1tZXJzOiBzdHJpbmdbXVtdID0gW107XG4gICAgICAgICAgICBjb25zdCBuZXdOb25UZXJtaW5hbEdyYW1tZXJzOiBzdHJpbmdbXVtdID0gW107XG5cbiAgICAgICAgICAgIGZvciAobGV0IGogPSBnSSEubGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgICAgICAgICBpZiAobmVlZEhhbmRsZUluZGV4LmluZGV4T2YoaikgIT09IC0xKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAvLyBFbXB0eUNoYXJhY3RlcuS9nOS4uummluS4quespuWPtyDmsqHmnInmhI/kuYlcbiAgICAgICAgICAgICAgICBuZXdHcmFtbWVycy5wdXNoKFsuLi4oZ0khW2pdWzBdID09PSBFbXB0eUNoYXJhY3RlciA/IGdJIVtqXS5zbGljZSgxKSA6IGdJIVtqXSksIG5ld05vblRlcm1pbmFsVG9ja2VuXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCBvZiBuZWVkSGFuZGxlSW5kZXgpIHtcbiAgICAgICAgICAgICAgICBuZXdOb25UZXJtaW5hbEdyYW1tZXJzLnB1c2goWy4uLmdJIVtpbmRleF0uc2xpY2UoMSksIG5ld05vblRlcm1pbmFsVG9ja2VuXSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld05vblRlcm1pbmFsR3JhbW1lcnMucHVzaChbRW1wdHlDaGFyYWN0ZXJdKTtcbiAgICAgICAgICAgIG5vblRlcm1pbmFsczJEZXJpdmF0aW9uTWFwLnNldChub25UZXJtaW5hbHNbaV0sIFsuLi5uZXdHcmFtbWVycywgLi4uKG5lZWRIYW5kbGVJbmRleC5sZW5ndGggPyBbXSA6IGdJISldKTtcbiAgICAgICAgICAgIG5vblRlcm1pbmFsczJEZXJpdmF0aW9uTWFwLnNldChuZXdOb25UZXJtaW5hbFRvY2tlbiwgbmV3Tm9uVGVybWluYWxHcmFtbWVycyk7XG4gICAgICAgIH1cbiAgICAgICAgbG9nLmxvZyhcIltub25UZXJtaW5hbHMyRGVyaXZhdGlvbk1hcCBpbiBwcm9jZXNzXVwiLCBub25UZXJtaW5hbHMyRGVyaXZhdGlvbk1hcCwgZ0kpO1xuICAgIH1cbiAgICBmb3IgKGxldCBub25UZXJtaW5hbCBvZiBub25UZXJtaW5hbHMyRGVyaXZhdGlvbk1hcC5rZXlzKCkpIHtcbiAgICAgICAgY29uc3QgZGVyaXZhdGlvbjogc3RyaW5nID0gbm9uVGVybWluYWxzMkRlcml2YXRpb25NYXAuZ2V0KG5vblRlcm1pbmFsKSEubWFwKGRlcml2YXRpb24gPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGRlcml2YXRpb24uam9pbihcIiBcIik7XG4gICAgICAgIH0pLmpvaW4oXCIgfCBcIik7XG4gICAgICAgIHJlc3VsdC5wdXNoKGAke25vblRlcm1pbmFsfSA9PiAke2Rlcml2YXRpb259YCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cblxuIiwiaW1wb3J0IGdlbmVyYXRlRmlyc3RTZXQgZnJvbSBcIkAvZmlyc3RTZXRcIjtcbmltcG9ydCBnZW5lcmF0ZUZsbG93U2V0IGZyb20gXCJAL2ZvbGxvd1NldFwiO1xuaW1wb3J0IExleGVyIGZyb20gXCJAL2xleGVyXCI7XG5pbXBvcnQgeyBnZXRUb2NrRnJvbVNpbXBsZUdyYW1tZXJzIH0gZnJvbSBcIkAvc2ltcGxlR3JhbW1lckhlbHBlclwiO1xuaW1wb3J0IHsgR3JhbW1lcnMsIExSUHJlZGljdExpbmUsIExSUHJlZGljdFJlc3VsdFRhYmxlLCBMUlByZWRpY3RUYWJsZUxpbmUsIExSUHJlZGljdFRhYmxlLCBMUlN0YXRlTm9kZSwgTFJTdGF0ZU5vZGVGb3JTaG93LCBMUlN0YXRlTm9kZUl0ZW0gfSBmcm9tIFwiQC90eXBlcy90eXBlXCI7XG5pbXBvcnQgeyBFbmRpbmdDaGFyYWN0ZXIgfSBmcm9tIFwiQC91dGlscy9jb25zdFwiO1xuaW1wb3J0IGxvZyBmcm9tIFwiQC91dGlscy9sb2dcIjtcblxuZXhwb3J0IGNsYXNzIExSUGFyc2VyICB7XG4gICAgaW5pdGlhbFN0YXRlTm9kZTogTFJTdGF0ZU5vZGUgfCBudWxsO1xuICAgIGFsbFN0YXRlTm9kZXNNYXA/OiBNYXA8c3RyaW5nLExSU3RhdGVOb2RlPjtcbiAgICBsZXhlcj86IExleGVyO1xuICAgIGdyYW1tZXJzPzogc3RyaW5nW107XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuaW5pdGlhbFN0YXRlTm9kZSA9IG51bGw7XG4gICAgfVxuICAgIGdlbmVyYXRlU3RhdGUoZ3JhbW1lcnM6IHN0cmluZ1tdLCBwYXJzZVN0YXJ0Tm9uVGVybWluYWw6IHN0cmluZyxub25UZXJtaW5hbHM/OiBBcnJheTxzdHJpbmc+LCB0ZXJtaW5hbHM/OiBBcnJheTxbc3RyaW5nLCBSZWdFeHBdPikge1xuICAgICAgICBpZiAoIW5vblRlcm1pbmFscyB8fCAhdGVybWluYWxzKSB7XG4gICAgICAgICAgICBjb25zdCB0b2NrZW5BbmFSZXMgPSBnZXRUb2NrRnJvbVNpbXBsZUdyYW1tZXJzKGdyYW1tZXJzKTtcbiAgICAgICAgICAgIG5vblRlcm1pbmFscyA9IHRvY2tlbkFuYVJlcy5ub25UZXJtaW5hbHM7XG4gICAgICAgICAgICB0ZXJtaW5hbHMgPSB0b2NrZW5BbmFSZXMudGVybWluYWxzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IEF1Z3VtZW50U3RhcnQgPSBcIkF1Z3VtZW50X1NcIjtcbiAgICAgICAgbG9nLmxvZyhcIltub25UZXJtaW5hbHNdXCIsIG5vblRlcm1pbmFscyk7XG4gICAgICAgIGxvZy5sb2coXCJbdGVybWluYWxzXVwiLCB0ZXJtaW5hbHMpO1xuICAgICAgICB0aGlzLmdyYW1tZXJzID0gZ3JhbW1lcnM7XG4gICAgICAgIHRoaXMubGV4ZXIgPSBuZXcgTGV4ZXIodGVybWluYWxzLCBub25UZXJtaW5hbHMpO1xuXG4gICAgICAgIGNvbnN0IG5vblRlcm1pbmFsczJEZXJpdmF0aW9uTWFwID0gbmV3IE1hcDxzdHJpbmcsc3RyaW5nW11bXT4oKTtcbiAgICAgICAgZm9yIChsZXQgZ3JhbW1lciBvZiBncmFtbWVycykge1xuICAgICAgICAgICAgZ3JhbW1lciA9IGdyYW1tZXIucmVwbGFjZUFsbCgvXFxzL2csIFwiXCIpO1xuICAgICAgICAgICAgY29uc3QgYXJyID0gZ3JhbW1lci5zcGxpdCgvKD0+KXwoLT4pLykuZmlsdGVyKHYgPT4gdiAhPT0gXCI9PlwiICYmIHYgIT09IFwiLT5cIiAmJiB2KTtcbiAgICAgICAgICAgIGNvbnN0IG5vblRlcm1pbmFsID0gYXJyWzBdO1xuICAgICAgICAgICAgY29uc3QgZGVyaXZhdGlvbnMgPSBhcnJbMV0uc3BsaXQoXCJ8XCIpLmZpbHRlcih2ID0+IHYpLm1hcChkZXJpdmF0aW9uID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sZXhlciEuc3BsaXREZXJpdmF0aW9uKGRlcml2YXRpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBub25UZXJtaW5hbHMyRGVyaXZhdGlvbk1hcC5zZXQobm9uVGVybWluYWwsIGRlcml2YXRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBsb2cubG9nKG5vblRlcm1pbmFsczJEZXJpdmF0aW9uTWFwKTtcblxuICAgICAgICB0aGlzLmluaXRpYWxTdGF0ZU5vZGUgPSB7XG4gICAgICAgICAgICBpZDogMCxcbiAgICAgICAgICAgIGl0ZW1zOiBbe1xuICAgICAgICAgICAgICAgIG5vblRlcm1pbmFsOiBBdWd1bWVudFN0YXJ0LFxuICAgICAgICAgICAgICAgIGRlcml2YXRpb246IFtwYXJzZVN0YXJ0Tm9uVGVybWluYWxdLFxuICAgICAgICAgICAgICAgIG1hdGNoUG9pbnQ6IDAsXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIGVkZ2VzOiBbXSxcbiAgICAgICAgfVxuICAgICAgICBleHBhbmRTdGF0ZUl0ZW1zKHRoaXMuaW5pdGlhbFN0YXRlTm9kZS5pdGVtcyxub25UZXJtaW5hbHMyRGVyaXZhdGlvbk1hcCx0aGlzLmxleGVyKTtcbiAgICAgICAgY29uc3QgYWxsU3RhdGVOb2Rlc01hcCA9IG5ldyBNYXA8c3RyaW5nLExSU3RhdGVOb2RlPigpO1xuICAgICAgICB0aGlzLmFsbFN0YXRlTm9kZXNNYXAgPSBhbGxTdGF0ZU5vZGVzTWFwO1xuICAgICAgICBhbGxTdGF0ZU5vZGVzTWFwLnNldChzdGF0ZUl0ZW1zVG9TdHJpbmcodGhpcy5pbml0aWFsU3RhdGVOb2RlLml0ZW1zKSx0aGlzLmluaXRpYWxTdGF0ZU5vZGUpO1xuICAgICAgICBjb25zdCB2aXM6IGJvb2xlYW5bXSA9IFtdO1xuICAgICAgICBsZXQgcHJlU2l6ZSA9IDA7XG4gICAgICAgIHdoaWxlKHRydWUpIHtcbiAgICAgICAgICAgIGlmKGFsbFN0YXRlTm9kZXNNYXAuc2l6ZSA9PSBwcmVTaXplKWJyZWFrO1xuICAgICAgICAgICAgcHJlU2l6ZSA9IGFsbFN0YXRlTm9kZXNNYXAuc2l6ZTtcbiAgICAgICAgICAgIGZvcihsZXQgc3RhdGUgb2YgYWxsU3RhdGVOb2Rlc01hcC52YWx1ZXMoKSkge1xuICAgICAgICAgICAgICAgIGlmKHZpc1tzdGF0ZS5pZF0pIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIHZpc1tzdGF0ZS5pZF0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIC8vIOWIpOaWreaYr+WQpuWPr+S7peWIsOaOpeWPl+eKtuaAgVxuICAgICAgICAgICAgICAgIGZvcihsZXQgaXRlbSBvZiBzdGF0ZS5pdGVtcykge1xuICAgICAgICAgICAgICAgICAgICBpZihpdGVtLm5vblRlcm1pbmFsID09PSBBdWd1bWVudFN0YXJ0ICYmIGl0ZW0ubWF0Y2hQb2ludCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuZWRnZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9ja2VuOiBFbmRpbmdDaGFyYWN0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogLTEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRnZXM6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yKGxldCBub25UZXJtaW5hbCBvZiBub25UZXJtaW5hbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1hdGNoSXRlbXM6IExSU3RhdGVOb2RlSXRlbVtdID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaXRlbSBvZiBzdGF0ZS5pdGVtcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXRlbS5kZXJpdmF0aW9uLmxlbmd0aCA9PT0gaXRlbS5tYXRjaFBvaW50KWNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXRlbS5kZXJpdmF0aW9uW2l0ZW0ubWF0Y2hQb2ludF0gPT09IG5vblRlcm1pbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hJdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9uVGVybWluYWw6IGl0ZW0ubm9uVGVybWluYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcml2YXRpb246IGl0ZW0uZGVyaXZhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hQb2ludDogaXRlbS5tYXRjaFBvaW50KzEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYoIW1hdGNoSXRlbXMubGVuZ3RoKWNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICBleHBhbmRTdGF0ZUl0ZW1zKG1hdGNoSXRlbXMsbm9uVGVybWluYWxzMkRlcml2YXRpb25NYXAsdGhpcy5sZXhlcik7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IHN0YXRlSXRlbXNUb1N0cmluZyhtYXRjaEl0ZW1zKTtcbiAgICAgICAgICAgICAgICAgICAgaWYoIWFsbFN0YXRlTm9kZXNNYXAuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbFN0YXRlTm9kZXNNYXAuc2V0KGtleSx7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGFsbFN0YXRlTm9kZXNNYXAuc2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogbWF0Y2hJdGVtcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGdlczogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmVkZ2VzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9ja2VuOiBub25UZXJtaW5hbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQ6IGFsbFN0YXRlTm9kZXNNYXAuZ2V0KGtleSkhLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yKGxldCB0ZXJtaW5hbCBvZiB0ZXJtaW5hbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1hdGNoSXRlbXM6IExSU3RhdGVOb2RlSXRlbVtdID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaXRlbSBvZiBzdGF0ZS5pdGVtcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXRlbS5kZXJpdmF0aW9uLmxlbmd0aCA9PT0gaXRlbS5tYXRjaFBvaW50KWNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXRlbS5kZXJpdmF0aW9uW2l0ZW0ubWF0Y2hQb2ludF0gPT09IHRlcm1pbmFsWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hJdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9uVGVybWluYWw6IGl0ZW0ubm9uVGVybWluYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcml2YXRpb246IGl0ZW0uZGVyaXZhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hQb2ludDogaXRlbS5tYXRjaFBvaW50KzEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYoIW1hdGNoSXRlbXMubGVuZ3RoKWNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICBleHBhbmRTdGF0ZUl0ZW1zKG1hdGNoSXRlbXMsbm9uVGVybWluYWxzMkRlcml2YXRpb25NYXAsdGhpcy5sZXhlcik7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IHN0YXRlSXRlbXNUb1N0cmluZyhtYXRjaEl0ZW1zKTtcbiAgICAgICAgICAgICAgICAgICAgaWYoIWFsbFN0YXRlTm9kZXNNYXAuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbFN0YXRlTm9kZXNNYXAuc2V0KGtleSx7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGFsbFN0YXRlTm9kZXNNYXAuc2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogbWF0Y2hJdGVtcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGdlczogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmVkZ2VzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9ja2VuOiB0ZXJtaW5hbFswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQ6IGFsbFN0YXRlTm9kZXNNYXAuZ2V0KGtleSkhLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgKmdlbmVyYXRlU3RhdGVQcm9ncmVzc2l2ZShncmFtbWVyczogc3RyaW5nW10sIHBhcnNlU3RhcnROb25UZXJtaW5hbDogc3RyaW5nLG5vblRlcm1pbmFscz86IEFycmF5PHN0cmluZz4sIHRlcm1pbmFscz86IEFycmF5PFtzdHJpbmcsIFJlZ0V4cF0+KTogSXRlcmFibGVJdGVyYXRvcjx1bmRlZmluZWQ+IHtcbiAgICAgICAgaWYgKCFub25UZXJtaW5hbHMgfHwgIXRlcm1pbmFscykge1xuICAgICAgICAgICAgY29uc3QgdG9ja2VuQW5hUmVzID0gZ2V0VG9ja0Zyb21TaW1wbGVHcmFtbWVycyhncmFtbWVycyk7XG4gICAgICAgICAgICBub25UZXJtaW5hbHMgPSB0b2NrZW5BbmFSZXMubm9uVGVybWluYWxzO1xuICAgICAgICAgICAgdGVybWluYWxzID0gdG9ja2VuQW5hUmVzLnRlcm1pbmFscztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBBdWd1bWVudFN0YXJ0ID0gXCJBdWd1bWVudF9TXCI7XG4gICAgICAgIGxvZy5sb2coXCJbbm9uVGVybWluYWxzXVwiLCBub25UZXJtaW5hbHMpO1xuICAgICAgICBsb2cubG9nKFwiW3Rlcm1pbmFsc11cIiwgdGVybWluYWxzKTtcbiAgICAgICAgdGhpcy5ncmFtbWVycyA9IGdyYW1tZXJzO1xuICAgICAgICB0aGlzLmxleGVyID0gbmV3IExleGVyKHRlcm1pbmFscywgbm9uVGVybWluYWxzKTtcblxuICAgICAgICBjb25zdCBub25UZXJtaW5hbHMyRGVyaXZhdGlvbk1hcCA9IG5ldyBNYXA8c3RyaW5nLHN0cmluZ1tdW10+KCk7XG4gICAgICAgIGZvciAobGV0IGdyYW1tZXIgb2YgZ3JhbW1lcnMpIHtcbiAgICAgICAgICAgIGdyYW1tZXIgPSBncmFtbWVyLnJlcGxhY2VBbGwoL1xccy9nLCBcIlwiKTtcbiAgICAgICAgICAgIGNvbnN0IGFyciA9IGdyYW1tZXIuc3BsaXQoLyg9Pil8KC0+KS8pLmZpbHRlcih2ID0+IHYgIT09IFwiPT5cIiAmJiB2ICE9PSBcIi0+XCIgJiYgdik7XG4gICAgICAgICAgICBjb25zdCBub25UZXJtaW5hbCA9IGFyclswXTtcbiAgICAgICAgICAgIGNvbnN0IGRlcml2YXRpb25zID0gYXJyWzFdLnNwbGl0KFwifFwiKS5maWx0ZXIodiA9PiB2KS5tYXAoZGVyaXZhdGlvbiA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGV4ZXIhLnNwbGl0RGVyaXZhdGlvbihkZXJpdmF0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbm9uVGVybWluYWxzMkRlcml2YXRpb25NYXAuc2V0KG5vblRlcm1pbmFsLCBkZXJpdmF0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgbG9nLmxvZyhub25UZXJtaW5hbHMyRGVyaXZhdGlvbk1hcCk7XG5cbiAgICAgICAgdGhpcy5pbml0aWFsU3RhdGVOb2RlID0ge1xuICAgICAgICAgICAgaWQ6IDAsXG4gICAgICAgICAgICBpdGVtczogW3tcbiAgICAgICAgICAgICAgICBub25UZXJtaW5hbDogQXVndW1lbnRTdGFydCxcbiAgICAgICAgICAgICAgICBkZXJpdmF0aW9uOiBbcGFyc2VTdGFydE5vblRlcm1pbmFsXSxcbiAgICAgICAgICAgICAgICBtYXRjaFBvaW50OiAwLFxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBlZGdlczogW10sXG4gICAgICAgIH1cbiAgICAgICAgZXhwYW5kU3RhdGVJdGVtcyh0aGlzLmluaXRpYWxTdGF0ZU5vZGUuaXRlbXMsbm9uVGVybWluYWxzMkRlcml2YXRpb25NYXAsdGhpcy5sZXhlcik7XG4gICAgICAgIHlpZWxkO1xuICAgICAgICBjb25zdCBhbGxTdGF0ZU5vZGVzTWFwID0gbmV3IE1hcDxzdHJpbmcsTFJTdGF0ZU5vZGU+KCk7XG4gICAgICAgIHRoaXMuYWxsU3RhdGVOb2Rlc01hcCA9IGFsbFN0YXRlTm9kZXNNYXA7XG4gICAgICAgIGFsbFN0YXRlTm9kZXNNYXAuc2V0KHN0YXRlSXRlbXNUb1N0cmluZyh0aGlzLmluaXRpYWxTdGF0ZU5vZGUuaXRlbXMpLHRoaXMuaW5pdGlhbFN0YXRlTm9kZSk7XG4gICAgICAgIGNvbnN0IHZpczogYm9vbGVhbltdID0gW107XG4gICAgICAgIGxldCBwcmVTaXplID0gMDtcbiAgICAgICAgd2hpbGUodHJ1ZSkge1xuICAgICAgICAgICAgaWYoYWxsU3RhdGVOb2Rlc01hcC5zaXplID09IHByZVNpemUpYnJlYWs7XG4gICAgICAgICAgICBwcmVTaXplID0gYWxsU3RhdGVOb2Rlc01hcC5zaXplO1xuICAgICAgICAgICAgZm9yKGxldCBzdGF0ZSBvZiBhbGxTdGF0ZU5vZGVzTWFwLnZhbHVlcygpKSB7XG4gICAgICAgICAgICAgICAgaWYodmlzW3N0YXRlLmlkXSkgY29udGludWU7XG4gICAgICAgICAgICAgICAgdmlzW3N0YXRlLmlkXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgLy8g5Yik5pat5piv5ZCm5Y+v5Lul5Yiw5o6l5Y+X54q25oCBXG4gICAgICAgICAgICAgICAgZm9yKGxldCBpdGVtIG9mIHN0YXRlLml0ZW1zKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKGl0ZW0ubm9uVGVybWluYWwgPT09IEF1Z3VtZW50U3RhcnQgJiYgaXRlbS5tYXRjaFBvaW50ID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5lZGdlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2NrZW46IEVuZGluZ0NoYXJhY3RlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAtMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGdlczogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IobGV0IG5vblRlcm1pbmFsIG9mIG5vblRlcm1pbmFscykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbWF0Y2hJdGVtczogTFJTdGF0ZU5vZGVJdGVtW10gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBpdGVtIG9mIHN0YXRlLml0ZW1zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihpdGVtLmRlcml2YXRpb24ubGVuZ3RoID09PSBpdGVtLm1hdGNoUG9pbnQpY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihpdGVtLmRlcml2YXRpb25baXRlbS5tYXRjaFBvaW50XSA9PT0gbm9uVGVybWluYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaEl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub25UZXJtaW5hbDogaXRlbS5ub25UZXJtaW5hbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVyaXZhdGlvbjogaXRlbS5kZXJpdmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFBvaW50OiBpdGVtLm1hdGNoUG9pbnQrMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZighbWF0Y2hJdGVtcy5sZW5ndGgpY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIGV4cGFuZFN0YXRlSXRlbXMobWF0Y2hJdGVtcyxub25UZXJtaW5hbHMyRGVyaXZhdGlvbk1hcCx0aGlzLmxleGVyKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gc3RhdGVJdGVtc1RvU3RyaW5nKG1hdGNoSXRlbXMpO1xuICAgICAgICAgICAgICAgICAgICBpZighYWxsU3RhdGVOb2Rlc01hcC5oYXMoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWxsU3RhdGVOb2Rlc01hcC5zZXQoa2V5LHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogYWxsU3RhdGVOb2Rlc01hcC5zaXplLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBtYXRjaEl0ZW1zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkZ2VzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuZWRnZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b2NrZW46IG5vblRlcm1pbmFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dDogYWxsU3RhdGVOb2Rlc01hcC5nZXQoa2V5KSEsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB5aWVsZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yKGxldCB0ZXJtaW5hbCBvZiB0ZXJtaW5hbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1hdGNoSXRlbXM6IExSU3RhdGVOb2RlSXRlbVtdID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaXRlbSBvZiBzdGF0ZS5pdGVtcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXRlbS5kZXJpdmF0aW9uLmxlbmd0aCA9PT0gaXRlbS5tYXRjaFBvaW50KWNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXRlbS5kZXJpdmF0aW9uW2l0ZW0ubWF0Y2hQb2ludF0gPT09IHRlcm1pbmFsWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hJdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9uVGVybWluYWw6IGl0ZW0ubm9uVGVybWluYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcml2YXRpb246IGl0ZW0uZGVyaXZhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hQb2ludDogaXRlbS5tYXRjaFBvaW50KzEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYoIW1hdGNoSXRlbXMubGVuZ3RoKWNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICBleHBhbmRTdGF0ZUl0ZW1zKG1hdGNoSXRlbXMsbm9uVGVybWluYWxzMkRlcml2YXRpb25NYXAsdGhpcy5sZXhlcik7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IHN0YXRlSXRlbXNUb1N0cmluZyhtYXRjaEl0ZW1zKTtcbiAgICAgICAgICAgICAgICAgICAgaWYoIWFsbFN0YXRlTm9kZXNNYXAuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbFN0YXRlTm9kZXNNYXAuc2V0KGtleSx7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGFsbFN0YXRlTm9kZXNNYXAuc2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogbWF0Y2hJdGVtcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGdlczogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmVkZ2VzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9ja2VuOiB0ZXJtaW5hbFswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQ6IGFsbFN0YXRlTm9kZXNNYXAuZ2V0KGtleSkhLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcHJlZGljdElucHV0KGlucHV0OiBzdHJpbmcscHJlZGljdFRhYmxlOiBMUlByZWRpY3RUYWJsZSk6IExSUHJlZGljdFJlc3VsdFRhYmxlIHtcbiAgICAgICAgaWYoIXRoaXMubGV4ZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIltnZW5lcmF0ZVByZWRpY3RUYWJsZV0gbXVzdCBjYWxsIGdlbmVyYXRlU3RhdGUgYmVmb3JlIGdlbmVyYXRlUHJlZGljdFRhYmxlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBhbnM6IExSUHJlZGljdFJlc3VsdFRhYmxlID0gW107XG4gICAgICAgIGlucHV0ID0gaW5wdXQucmVwbGFjZUFsbCgvXFxzL2csIFwiXCIpO1xuICAgICAgICBhbnMucHVzaCh7XG4gICAgICAgICAgICBzdGFjazogWzBdLFxuICAgICAgICAgICAgc3ltYm9sczogW10sXG4gICAgICAgICAgICBpbnB1dDogWy4uLnRoaXMubGV4ZXIuc3BsaXREZXJpdmF0aW9uKGlucHV0KSxFbmRpbmdDaGFyYWN0ZXJdLFxuICAgICAgICB9KVxuICAgICAgICB3aGlsZSh0cnVlKSB7XG4gICAgICAgICAgICBjb25zdCBzdGVwID0gYW5zW2Fucy5sZW5ndGgtMV07XG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShzdGVwKSkgYXMgTFJQcmVkaWN0TGluZTtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlSWQgPSBzdGVwLnN0YWNrW3N0ZXAuc3RhY2subGVuZ3RoIC0gMV07XG5cbiAgICAgICAgICAgIGNvbnN0IHByZWRpY3RMaW5lID0gcHJlZGljdFRhYmxlW3N0YXRlSWRdO1xuICAgICAgICAgICAgY29uc3QgbW92ZSA9IHByZWRpY3RMaW5lLmFjdGlvbi5nZXQoc3RlcC5pbnB1dFswXSkhO1xuICAgICAgICAgICAgaWYobW92ZS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBtb3ZlIGNvbGxpc2lvbiAke21vdmV9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZighbW92ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYG1vdmUgaXMgZW1wdHkgJHttb3ZlfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGNNb3ZlID0gbW92ZVswXSBhcyBzdHJpbmc7XG4gICAgICAgICAgICBpZihjTW92ZSA9PT0gXCJhY2NcIikge1xuICAgICAgICAgICAgICAgIHN0ZXAubW92ZSA9IFwi5o6l5Y+XXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihjTW92ZS5zdGFydHNXaXRoKFwiU1wiKSkge1xuICAgICAgICAgICAgICAgIC8vIHNoaWZ0XG4gICAgICAgICAgICAgICAgc3RlcC5tb3ZlID0gYOenu+WFpSR7c3RlcC5pbnB1dFswXX1gO1xuICAgICAgICAgICAgICAgIG5leHQuc3ltYm9scy5wdXNoKG5leHQuaW5wdXQuc2hpZnQoKSEpO1xuICAgICAgICAgICAgICAgIG5leHQuc3RhY2sucHVzaChOdW1iZXIoY01vdmUuc2xpY2UoMSkpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gcmVkdWNlXG4gICAgICAgICAgICAgICAgc3RlcC5tb3ZlID0gYOagueaNriR7Y01vdmV95b2S57qmYDtcbiAgICAgICAgICAgICAgICBjb25zdCBncmFtbWVyID0gY01vdmUuc2xpY2UoMiwtMSkucmVwbGFjZUFsbCgvXFxzL2csXCJcIik7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9uVGVybWluYWwgPSBncmFtbWVyLnNwbGl0KFwiPT5cIilbMF07XG4gICAgICAgICAgICAgICAgY29uc3QgZGVyaXZhdGlvbiA9IHRoaXMubGV4ZXIuc3BsaXREZXJpdmF0aW9uKGdyYW1tZXIuc3BsaXQoXCI9PlwiKVsxXSk7XG4gICAgICAgICAgICAgICAgZm9yKGxldCBpPTA7aTxkZXJpdmF0aW9uLmxlbmd0aDtpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dC5zdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgbmV4dC5zeW1ib2xzLnBvcCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuZXh0LnN5bWJvbHMucHVzaChub25UZXJtaW5hbCk7XG4gICAgICAgICAgICAgICAgLy8gZ290b1xuICAgICAgICAgICAgICAgIGNvbnN0IGxlZnRTdGF0ZUlkID0gc3RlcC5zdGFja1tuZXh0LnN0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGpQcmVkaWN0TGluZSA9IHByZWRpY3RUYWJsZVtsZWZ0U3RhdGVJZF07XG4gICAgICAgICAgICAgICAgbmV4dC5zdGFjay5wdXNoKGpQcmVkaWN0TGluZS5nb3RvLmdldChub25UZXJtaW5hbCkhWzBdIGFzIHVua25vd24gYXMgbnVtYmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFucy5wdXNoKG5leHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbnM7XG4gICAgfVxuICAgIGdlbmVyYXRlTFIwUHJlZGljdFRhYmxlKCkge1xuICAgICAgICBpZighdGhpcy5pbml0aWFsU3RhdGVOb2RlIHx8ICF0aGlzLmFsbFN0YXRlTm9kZXNNYXAgfHwgIXRoaXMubGV4ZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIltnZW5lcmF0ZVByZWRpY3RUYWJsZV0gbXVzdCBjYWxsIGdlbmVyYXRlU3RhdGUgYmVmb3JlIGdlbmVyYXRlUHJlZGljdFRhYmxlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByZWRpY3RUYWJsZTogTFJQcmVkaWN0VGFibGUgPSBbXTtcbiAgICAgICAgZm9yKGxldCBzdGF0ZU5vZGUgb2YgdGhpcy5hbGxTdGF0ZU5vZGVzTWFwLnZhbHVlcygpKSB7XG4gICAgICAgICAgICBsZXQgcHJlZGljdExpbmU6IExSUHJlZGljdFRhYmxlTGluZSA9IHtcbiAgICAgICAgICAgICAgICBpZDogc3RhdGVOb2RlLmlkLFxuICAgICAgICAgICAgICAgIGFjdGlvbjogbmV3IE1hcCgpLFxuICAgICAgICAgICAgICAgIGdvdG86IG5ldyBNYXAoKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZvcihsZXQgbm9uVGVybWluYWwgIG9mIHRoaXMubGV4ZXIubm9uVGVybWluYWxzKSB7XG4gICAgICAgICAgICAgICAgcHJlZGljdExpbmUuZ290by5zZXQobm9uVGVybWluYWwsW10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yKGxldCB0ZXJtaW5hbCAgb2YgdGhpcy5sZXhlci50ZXJtaW5hbHMpIHtcbiAgICAgICAgICAgICAgICBwcmVkaWN0TGluZS5hY3Rpb24uc2V0KHRlcm1pbmFsWzBdLFtdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByZWRpY3RMaW5lLmFjdGlvbi5zZXQoRW5kaW5nQ2hhcmFjdGVyLFtdKTtcbiAgICAgICAgICAgIGZvcihsZXQgZWRnZSBvZiBzdGF0ZU5vZGUuZWRnZXMpIHtcbiAgICAgICAgICAgICAgICBpZihlZGdlLnRvY2tlbiA9PT0gRW5kaW5nQ2hhcmFjdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHByZWRpY3RMaW5lLmFjdGlvbi5nZXQoZWRnZS50b2NrZW4pIS5wdXNoKFwiYWNjXCIpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYodGhpcy5sZXhlci5pc1Rlcm1pbmFsKGVkZ2UudG9ja2VuKSkge1xuICAgICAgICAgICAgICAgICAgICBwcmVkaWN0TGluZS5hY3Rpb24uZ2V0KGVkZ2UudG9ja2VuKSEucHVzaChgUyR7ZWRnZS5uZXh0LmlkfWApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHByZWRpY3RMaW5lLmdvdG8uZ2V0KGVkZ2UudG9ja2VuKSEucHVzaChlZGdlLm5leHQuaWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvcihsZXQgaXRlbSBvZiBzdGF0ZU5vZGUuaXRlbXMpIHtcbiAgICAgICAgICAgICAgICBpZihpdGVtLm1hdGNoUG9pbnQgPT09IGl0ZW0uZGVyaXZhdGlvbi5sZW5ndGgpIHsgLy8gcmVkdWNlXG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgdGVybWluYWwgb2YgdGhpcy5sZXhlci50ZXJtaW5hbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZWRpY3RMaW5lLmFjdGlvbi5nZXQodGVybWluYWxbMF0pIS5wdXNoKGByKCR7aXRlbS5ub25UZXJtaW5hbH0gPT4gJHtpdGVtLmRlcml2YXRpb24uam9pbihcIiBcIil9KWApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJlZGljdFRhYmxlLnB1c2gocHJlZGljdExpbmUpO1xuICAgICAgICB9ICAgXG4gICAgICAgIHByZWRpY3RUYWJsZS5zb3J0KChhLGIpPT57XG4gICAgICAgICAgICByZXR1cm4gYS5pZCAtIGIuaWQ7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcHJlZGljdFRhYmxlO1xuICAgIH1cbiAgICBnZW5lcmF0ZVNMUjFQcmVkaWN0VGFibGUoKSB7XG4gICAgICAgIGlmKCF0aGlzLmluaXRpYWxTdGF0ZU5vZGUgfHwgIXRoaXMuYWxsU3RhdGVOb2Rlc01hcCB8fCAhdGhpcy5sZXhlciB8fCAhdGhpcy5ncmFtbWVycykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiW2dlbmVyYXRlUHJlZGljdFRhYmxlXSBtdXN0IGNhbGwgZ2VuZXJhdGVTdGF0ZSBiZWZvcmUgZ2VuZXJhdGVQcmVkaWN0VGFibGVcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZm9sbG93U2V0ID0gZ2VuZXJhdGVGbGxvd1NldCh0aGlzLmxleGVyLHRoaXMuZ3JhbW1lcnMpO1xuICAgICAgICBjb25zdCBwcmVkaWN0VGFibGU6IExSUHJlZGljdFRhYmxlID0gW107XG4gICAgICAgIGZvcihsZXQgc3RhdGVOb2RlIG9mIHRoaXMuYWxsU3RhdGVOb2Rlc01hcC52YWx1ZXMoKSkge1xuICAgICAgICAgICAgbGV0IHByZWRpY3RMaW5lOiBMUlByZWRpY3RUYWJsZUxpbmUgPSB7XG4gICAgICAgICAgICAgICAgaWQ6IHN0YXRlTm9kZS5pZCxcbiAgICAgICAgICAgICAgICBhY3Rpb246IG5ldyBNYXAoKSxcbiAgICAgICAgICAgICAgICBnb3RvOiBuZXcgTWFwKClcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmb3IobGV0IG5vblRlcm1pbmFsICBvZiB0aGlzLmxleGVyLm5vblRlcm1pbmFscykge1xuICAgICAgICAgICAgICAgIHByZWRpY3RMaW5lLmdvdG8uc2V0KG5vblRlcm1pbmFsLFtdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvcihsZXQgdGVybWluYWwgIG9mIHRoaXMubGV4ZXIudGVybWluYWxzKSB7XG4gICAgICAgICAgICAgICAgcHJlZGljdExpbmUuYWN0aW9uLnNldCh0ZXJtaW5hbFswXSxbXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmVkaWN0TGluZS5hY3Rpb24uc2V0KEVuZGluZ0NoYXJhY3RlcixbXSk7XG4gICAgICAgICAgICBmb3IobGV0IGVkZ2Ugb2Ygc3RhdGVOb2RlLmVkZ2VzKSB7XG4gICAgICAgICAgICAgICAgaWYoZWRnZS50b2NrZW4gPT09IEVuZGluZ0NoYXJhY3Rlcikge1xuICAgICAgICAgICAgICAgICAgICBwcmVkaWN0TGluZS5hY3Rpb24uZ2V0KGVkZ2UudG9ja2VuKSEucHVzaChcImFjY1wiKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKHRoaXMubGV4ZXIuaXNUZXJtaW5hbChlZGdlLnRvY2tlbikpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJlZGljdExpbmUuYWN0aW9uLmdldChlZGdlLnRvY2tlbikhLnB1c2goYFMke2VkZ2UubmV4dC5pZH1gKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwcmVkaWN0TGluZS5nb3RvLmdldChlZGdlLnRvY2tlbikhLnB1c2goZWRnZS5uZXh0LmlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IobGV0IGl0ZW0gb2Ygc3RhdGVOb2RlLml0ZW1zKSB7XG4gICAgICAgICAgICAgICAgaWYoaXRlbS5tYXRjaFBvaW50ID09PSBpdGVtLmRlcml2YXRpb24ubGVuZ3RoKSB7IC8vIHJlZHVjZVxuICAgICAgICAgICAgICAgICAgICBsZXQgZm9sbG93Q2g6IHN0cmluZ1tdID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgc2V0TGluZSBvZiBmb2xsb3dTZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHNldExpbmUudG9ja2VuID09PSBpdGVtLm5vblRlcm1pbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9sbG93Q2ggPSBbLi4uc2V0TGluZS50ZXJtaW5hbHMudmFsdWVzKCldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgdGVybWluYWwgb2YgZm9sbG93Q2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZWRpY3RMaW5lLmFjdGlvbi5nZXQodGVybWluYWxbMF0pIS5wdXNoKGByKCR7aXRlbS5ub25UZXJtaW5hbH0gPT4gJHtpdGVtLmRlcml2YXRpb24uam9pbihcIiBcIil9KWApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJlZGljdFRhYmxlLnB1c2gocHJlZGljdExpbmUpO1xuICAgICAgICB9ICAgXG4gICAgICAgIHByZWRpY3RUYWJsZS5zb3J0KChhLGIpPT57XG4gICAgICAgICAgICByZXR1cm4gYS5pZCAtIGIuaWQ7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcHJlZGljdFRhYmxlO1xuICAgIH1cbiAgICBnZXQgc3RhdGVHcmFwaCgpOiBMUlN0YXRlTm9kZUZvclNob3cge1xuICAgICAgICBjb25zdCB2aXM6IGFueVtdID0gW107XG4gICAgICAgIGNvbnN0IGRmcyA9IChub2RlOiBhbnkpID0+IHtcbiAgICAgICAgICAgIGlmKHZpc1tub2RlLmlkXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNbbm9kZS5pZF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBuZXdOb2RlOiBhbnkgPSB7fTtcbiAgICAgICAgICAgIHZpc1tub2RlLmlkXSA9IG5ld05vZGU7XG4gICAgICAgICAgICBuZXdOb2RlLmlkID0gbm9kZS5pZDtcbiAgICAgICAgICAgIG5ld05vZGUuaXRlbXMgPSBub2RlLml0ZW1zLm1hcCgoaXRlbTogYW55KT0+e1xuICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZUl0ZW1Ub1N0cmluZyhpdGVtKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBuZXdOb2RlLmVkZ2VzID0gW107XG4gICAgICAgICAgICBmb3IobGV0IGVkZ2Ugb2Ygbm9kZS5lZGdlcykge1xuICAgICAgICAgICAgICAgIG5ld05vZGUuZWRnZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHRvY2tlbjogZWRnZS50b2NrZW4sXG4gICAgICAgICAgICAgICAgICAgIG5leHQ6IGRmcyhlZGdlLm5leHQpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXdOb2RlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZnModGhpcy5pbml0aWFsU3RhdGVOb2RlKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHN0YXRlSXRlbXNUb1N0cmluZyhpdGVtczogTFJTdGF0ZU5vZGVJdGVtW10pOiBzdHJpbmcgeyBcbiAgICBpdGVtcyAgPSBpdGVtcy5zb3J0KChhLGIpPT57XG4gICAgICAgIGlmKGE8Yikge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAxO1xuICAgIH0pXG4gICAgbGV0IGFucyA9IFwiXCI7XG4gICAgZm9yKGxldCBpdGVtIG9mIGl0ZW1zKSB7XG4gICAgICAgIGFucyArPSBgICR7c3RhdGVJdGVtVG9TdHJpbmcoaXRlbSl9YDtcbiAgICB9XG4gICAgcmV0dXJuIGFucztcbn1cbmZ1bmN0aW9uIHN0YXRlSXRlbVRvU3RyaW5nKGl0ZW06IExSU3RhdGVOb2RlSXRlbSk6IHN0cmluZyB7IFxuICAgIGxldCBhbnMgPSBgJHtpdGVtLm5vblRlcm1pbmFsfSA9PiBgO1xuICAgIGZvcihsZXQgaT0wO2k8aXRlbS5kZXJpdmF0aW9uLmxlbmd0aDtpKyspIHtcbiAgICAgICAgaWYoaT09PWl0ZW0ubWF0Y2hQb2ludCkge1xuICAgICAgICAgICAgaWYoIWkpYW5zICs9IFwiIFwiO1xuICAgICAgICAgICAgYW5zICs9IFwiwrcgXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYoaT09PWl0ZW0uZGVyaXZhdGlvbi5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICBhbnMgKz0gYCR7aXRlbS5kZXJpdmF0aW9uW2ldfWA7XG4gICAgICAgIH1lbHNlIHtcbiAgICAgICAgICAgIGFucyArPSBgJHtpdGVtLmRlcml2YXRpb25baV19IGA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFucztcbn1cblxuZnVuY3Rpb24gZXhwYW5kU3RhdGVJdGVtcyhpdGVtczogTFJTdGF0ZU5vZGVJdGVtW10sbm9uVGVybWluYWxzMkRlcml2YXRpb25NYXA6IE1hcDxzdHJpbmcsc3RyaW5nW11bXT4sbGV4ZXI6IExleGVyKSB7XG4gICAgZm9yKGxldCBpPTA7aTxpdGVtcy5sZW5ndGg7aSsrKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBpdGVtc1tpXTtcbiAgICAgICAgY29uc3QgdG9ja2VuID0gaXRlbS5kZXJpdmF0aW9uW2l0ZW0ubWF0Y2hQb2ludF07XG4gICAgICAgIGlmKGxleGVyLmlzVGVybWluYWwodG9ja2VuKSljb250aW51ZTtcbiAgICAgICAgY29uc3QgZGVyaXZhdGlvbnMgPSBub25UZXJtaW5hbHMyRGVyaXZhdGlvbk1hcC5nZXQodG9ja2VuKTtcbiAgICAgICAgZGVyaXZhdGlvbnM/LmZvckVhY2goZGVyaXZhdGlvbj0+e1xuICAgICAgICAgICAgbGV0IGluRmxhZyA9IGZhbHNlO1xuICAgICAgICAgICAgZm9yKGxldCBqSXRlbSBvZiBpdGVtcykge1xuICAgICAgICAgICAgICAgIGlmKGpJdGVtLm5vblRlcm1pbmFsID09PSB0b2NrZW4gJiYgakl0ZW0ubWF0Y2hQb2ludCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZihqSXRlbS5kZXJpdmF0aW9uLmxlbmd0aCAhPT0gZGVyaXZhdGlvbi5sZW5ndGgpY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIGxldCBlcXVhbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaT0wO2k8ZGVyaXZhdGlvbi5sZW5ndGg7aSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihqSXRlbS5kZXJpdmF0aW9uW2ldICE9PSBkZXJpdmF0aW9uW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXF1YWwgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZihlcXVhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5GbGFnID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoaW5GbGFnKXJldHVybiA7XG4gICAgICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBub25UZXJtaW5hbDogdG9ja2VuLFxuICAgICAgICAgICAgICAgIG1hdGNoUG9pbnQ6IDAsXG4gICAgICAgICAgICAgICAgZGVyaXZhdGlvbixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59IiwiaW1wb3J0IGdlbmVyYXRlRmlyc3RTZXQsIHsgZ2VuZXJhdGVGaXJzdFNldFByb2dyZXNzaXZlIH0gZnJvbSBcIkAvZmlyc3RTZXRcIjtcclxuaW1wb3J0IGdlbmVyYXRlRmxsb3dTZXQsIHsgZ2VuZXJhdGVGbGxvd1NldFByb2dyZXNzaXZlIH0gZnJvbSBcIkAvZm9sbG93U2V0XCI7XHJcbmltcG9ydCBMZXhlciBmcm9tIFwiQC9sZXhlclwiO1xyXG5pbXBvcnQgeyBHcmFtbWVyU2V0LCBQcmVkaWN0UHJvY2Vzc0xpbmUsIFByZWRpY3RUYWJsZSwgUHJvY2VzcywgUnVsZSB9IGZyb20gXCJAL3R5cGVzL3R5cGVcIjtcclxuaW1wb3J0IGdlbmVyYXRvclByZWRpY3RUYWJsZSwgeyBjaGVja1ByZWRpY2tUYWJsZUlzVmFsaWQsIGdlbmVyYXRlUHJlZGljdFRhYmxlUHJvZ3Jlc3NpdmUsIHByZWRpY3QgfSBmcm9tIFwiLi9wcmVkaWN0VGFibGVcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExMMVBhcnNlciB7XHJcbiAgICBwdWJsaWMgbGV4ZXI6IExleGVyO1xyXG4gICAgcHVibGljIHRleHRHcmFtbWVyczogQXJyYXk8c3RyaW5nPjtcclxuICAgIGNvbnN0cnVjdG9yKHRlcm1pbmFsczogQXJyYXk8W3N0cmluZywgUmVnRXhwXT4sIG5vblRlcm1pbmFsczogQXJyYXk8c3RyaW5nPiwgaW5HcmFtbWVyczogQXJyYXk8c3RyaW5nPikge1xyXG4gICAgICAgIHRoaXMubGV4ZXIgPSBuZXcgTGV4ZXIodGVybWluYWxzLCBub25UZXJtaW5hbHMpO1xyXG4gICAgICAgIHRoaXMudGV4dEdyYW1tZXJzID0gaW5HcmFtbWVycztcclxuICAgIH1cclxuICAgIGdldEZpcnN0U2V0KCk6IEdyYW1tZXJTZXQge1xyXG4gICAgICAgIHJldHVybiBnZW5lcmF0ZUZpcnN0U2V0KHRoaXMubGV4ZXIsIHRoaXMudGV4dEdyYW1tZXJzKTtcclxuICAgIH1cclxuICAgIGdldEZvbGxvd1NldChmaXJzdFNldD86IEdyYW1tZXJTZXQpOiBHcmFtbWVyU2V0IHtcclxuICAgICAgICBpZiAoIWZpcnN0U2V0KSB7XHJcbiAgICAgICAgICAgIGZpcnN0U2V0ID0gdGhpcy5nZXRGaXJzdFNldCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZ2VuZXJhdGVGbGxvd1NldCh0aGlzLmxleGVyLCB0aGlzLnRleHRHcmFtbWVycywgZmlyc3RTZXQpO1xyXG4gICAgfVxyXG4gICAgZ2V0UHJlZGljdFRhYmxlKGZpcnN0U2V0PzogR3JhbW1lclNldCwgZm9sbG93U2V0PzogR3JhbW1lclNldCk6IFByZWRpY3RUYWJsZSB7XHJcbiAgICAgICAgaWYgKCFmaXJzdFNldCkge1xyXG4gICAgICAgICAgICBmaXJzdFNldCA9IHRoaXMuZ2V0Rmlyc3RTZXQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFmb2xsb3dTZXQpIHtcclxuICAgICAgICAgICAgZm9sbG93U2V0ID0gdGhpcy5nZXRGb2xsb3dTZXQoZmlyc3RTZXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZ2VuZXJhdG9yUHJlZGljdFRhYmxlKHRoaXMubGV4ZXIsIHRoaXMudGV4dEdyYW1tZXJzLCBmaXJzdFNldCwgZm9sbG93U2V0KTtcclxuICAgIH1cclxuICAgIGdldFByZWRpY3RQcm9jZXNzKGlucHV0OiBzdHJpbmcsIHBhcnNlU3RhcnROb25UZXJtaW5hbDogc3RyaW5nLCBwcmVkaWN0VGFibGU/OiBQcmVkaWN0VGFibGUpOiBBcnJheTxQcmVkaWN0UHJvY2Vzc0xpbmU+IHtcclxuICAgICAgICBpZiAoIXByZWRpY3RUYWJsZSkge1xyXG4gICAgICAgICAgICBwcmVkaWN0VGFibGUgPSBnZW5lcmF0b3JQcmVkaWN0VGFibGUodGhpcy5sZXhlciwgdGhpcy50ZXh0R3JhbW1lcnMsIHRoaXMuZ2V0Rmlyc3RTZXQoKSwgdGhpcy5nZXRGb2xsb3dTZXQoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKCF0aGlzLmxleGVyLm5vblRlcm1pbmFscy5zb21lKG5vblRlcm1pbmFsPT57XHJcbiAgICAgICAgICAgIGlmKHBhcnNlU3RhcnROb25UZXJtaW5hbCA9PT0gbm9uVGVybWluYWwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9KSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCIxXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcHJlZGljdCh0aGlzLmxleGVyLCBwcmVkaWN0VGFibGUsIGlucHV0LCBwYXJzZVN0YXJ0Tm9uVGVybWluYWwpO1xyXG4gICAgfVxyXG4gICAgY2hlY2tQcmVkaWNrVGFibGVJc1ZhbGlkKHByZWRpY3RUYWJsZTogUHJlZGljdFRhYmxlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIGNoZWNrUHJlZGlja1RhYmxlSXNWYWxpZCh0aGlzLmxleGVyLCBwcmVkaWN0VGFibGUpO1xyXG4gICAgfVxyXG4gICAgY2hlY2tJc0xMMCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gY2hlY2tQcmVkaWNrVGFibGVJc1ZhbGlkKHRoaXMubGV4ZXIsIHRoaXMuZ2V0UHJlZGljdFRhYmxlKCkpO1xyXG4gICAgfVxyXG4gICAgZ2V0Rmlyc3RTZXRQcm9ncmVzc2l2ZSgpOiBJdGVyYWJsZUl0ZXJhdG9yPFJ1bGUgfCBQcm9jZXNzPEdyYW1tZXJTZXQ+PiB7XHJcbiAgICAgICAgcmV0dXJuIGdlbmVyYXRlRmlyc3RTZXRQcm9ncmVzc2l2ZSh0aGlzLmxleGVyLCB0aGlzLnRleHRHcmFtbWVycyk7XHJcbiAgICB9XHJcbiAgICBnZXRGb2xsb3dTZXRQcm9ncmVzc2l2ZShmaXJzdFNldD86IEdyYW1tZXJTZXQpOiBJdGVyYWJsZUl0ZXJhdG9yPFJ1bGUgfCBQcm9jZXNzPEdyYW1tZXJTZXQ+PiB7XHJcbiAgICAgICAgaWYgKCFmaXJzdFNldCkge1xyXG4gICAgICAgICAgICBmaXJzdFNldCA9IHRoaXMuZ2V0Rmlyc3RTZXQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGdlbmVyYXRlRmxsb3dTZXRQcm9ncmVzc2l2ZSh0aGlzLmxleGVyLCB0aGlzLnRleHRHcmFtbWVycywgZmlyc3RTZXQpO1xyXG4gICAgfVxyXG4gICAgZ2V0UHJlZGljdFRhYmxlUHJvZ3Jlc3NpdmUoZmlyc3RTZXQ/OiBHcmFtbWVyU2V0LCBmb2xsb3dTZXQ/OiBHcmFtbWVyU2V0KTogSXRlcmFibGVJdGVyYXRvcjxSdWxlIHwgUHJvY2VzczxQcmVkaWN0VGFibGU+PiB7XHJcbiAgICAgICAgaWYgKCFmaXJzdFNldCkge1xyXG4gICAgICAgICAgICBmaXJzdFNldCA9IHRoaXMuZ2V0Rmlyc3RTZXQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFmb2xsb3dTZXQpIHtcclxuICAgICAgICAgICAgZm9sbG93U2V0ID0gdGhpcy5nZXRGb2xsb3dTZXQoZmlyc3RTZXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZ2VuZXJhdGVQcmVkaWN0VGFibGVQcm9ncmVzc2l2ZSh0aGlzLmxleGVyLCB0aGlzLnRleHRHcmFtbWVycywgZmlyc3RTZXQsIGZvbGxvd1NldCk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4iXSwibmFtZXMiOlsidHJhbnNmZXJTdHJpbmcyR3JhbW1lcnMiLCJsZXhlciIsImdyYW1tZXJzIiwibWFwIiwiZ3JhbW1lciIsInJlcGxhY2VBbGwiLCJhcnIiLCJzcGxpdCIsImZpbHRlciIsInYiLCJkZXJpdmF0aW9ucyIsImRlcml2YXRpb24iLCJzcGxpdERlcml2YXRpb24iLCJub25UZXJtaW5hbCIsInNhZmVSZWdDaGFyYWN0ZXIiLCJjaGFyIiwiRW1wdHlDaGFyYWN0ZXIiLCJFbmRpbmdDaGFyYWN0ZXIiLCJMb2dMZXZlbCIsIk5vcm1hbCIsImxvZ0xldmVsX2luaXQiLCJFcnJvciIsImxvZ0xldmVsIiwibG9nQ2hhbm5lbCIsImNvbnN0cnVjdG9yIiwiY29uc29sZSIsInRoaXMiLCJsb2ciLCJpbmZvIiwid2FybiIsIldhcm5uaW5nIiwiZXJyb3IiLCJnZW5lcmF0ZUZpcnN0U2V0IiwiaW5HcmFtbWVycyIsImZpcnN0U2V0IiwiQXJyYXkiLCJ0b2NrZW4iLCJ0ZXJtaW5hbHMiLCJTZXQiLCJncmFtbWVyTWFwIiwiTWFwIiwiZm9yRWFjaCIsInNldCIsInB1c2giLCJ0ZXJtaW5hbCIsImlzVGVybWluYWwiLCJzZXRMaW5lIiwiZ2V0IiwibGVuZ3RoIiwiaGFzIiwiYWRkIiwiZmlyc3RTZXRNYXAiLCJoYXNDaGFuZ2UiLCJpIiwibmV4dFNldExpbmUiLCJzb3J0IiwiYSIsImIiLCJmcm9tIiwiZ2V0RGVyaXZhdGlvbkZpcnN0U2V0Iiwiam9pbiIsImdlbmVyYXRlRmxsb3dTZXQiLCJmb2xsb3dTZXQiLCJmb2xsb3dTZXRNYXAiLCJqIiwicFNldExpbmUiLCJMZXhlciIsIm5vblRlcm1pbmFscyIsImN1cnJlbnRMaW5lIiwiY3VycmVudENvbHVtbiIsInNvdXJjZSIsInNldFNvdXJjZSIsInJlbWFpblN0cmluZyIsInNsaWNlIiwibmV4dCIsIm9yaWdpbiIsIm1hdGNoUmVzdWx0IiwibWF0Y2giLCJwb3AiLCJlIiwibmV4dE5vdEVtcHR5VGVybWluYWwiLCJuZXh0Tm90RW1wdHkiLCJzdGVwIiwiYmFjayIsInBvcE5vdEVtcHR5VGVybWluYWwiLCJzdHIiLCJzb21lIiwiY291bnRUaW1lIiwiaW5TdHIiLCJSZWdFeHAiLCJnZXROZXdOb25UZXJtaW5hbCIsInRtcCIsImluZGV4T2YiLCJ1bnNoaWZ0IiwiZ2VuZXJhdG9yUHJlZGljdFRhYmxlIiwicHJlZGljdFRhYmxlIiwibm9uVGVybWluYWwyVGFibGVSb3dNYXAiLCJ0YWJsZUxpbmUiLCJ0ZXJtaW5hbDJEZXJpdmF0aW9uIiwibm9uVGVybWluYWwyRmlyc3RTZXRNYXAiLCJub25UZXJtaW5hbDJGb2xsb3dTZXRMaW5lIiwiZGVyaXZhdGlvbkZpcnN0U2V0IiwiaGFzU2V0IiwiY2VsbEdyYW1tZXIiLCJjaGVja1ByZWRpY2tUYWJsZUlzVmFsaWQiLCJ0YWJsZSIsInQyZCIsInNpbXBsZU5vblRlcm1pbmFsUmVnIiwic2ltcGxlVGVybWluYWxSZWciLCJnZXRUb2NrRnJvbVNpbXBsZUdyYW1tZXJzIiwiSlNPTiIsInN0cmluZ2lmeSIsImpzb25EYXRhIiwicGFyc2UiLCJzdGF0ZUl0ZW1zVG9TdHJpbmciLCJpdGVtcyIsImFucyIsIml0ZW0iLCJzdGF0ZUl0ZW1Ub1N0cmluZyIsIm1hdGNoUG9pbnQiLCJleHBhbmRTdGF0ZUl0ZW1zIiwibm9uVGVybWluYWxzMkRlcml2YXRpb25NYXAiLCJpbkZsYWciLCJqSXRlbSIsImVxdWFsIiwidGV4dEdyYW1tZXJzIiwiZ2V0Rmlyc3RTZXQiLCJnZXRGb2xsb3dTZXQiLCJnZXRQcmVkaWN0VGFibGUiLCJnZXRQcmVkaWN0UHJvY2VzcyIsImlucHV0IiwicGFyc2VTdGFydE5vblRlcm1pbmFsIiwiX2lucHV0IiwicHJlZGljdFByb2Nlc3MiLCJhc3RJZHgiLCJhc3ROb2RlIiwiaWQiLCJ0ZXh0IiwiY2hlY2siLCJhc3RTdGFjayIsImN1cnJlbnRTdGF0ZSIsInBhcnNlU3RhY2siLCJyZW1haW5pbmdJbnB1dCIsInBhcnNlQWN0aW9uIiwiY2hpbGRyZW4iLCJyZXZlcnNlIiwidG9TdHJpbmciLCJwcmVkaWN0IiwiY2hlY2tJc0xMMCIsImdldEZpcnN0U2V0UHJvZ3Jlc3NpdmUiLCJydWxlSW5kZXgiLCJyZXN1bHQiLCJnZW5lcmF0ZUZpcnN0U2V0UHJvZ3Jlc3NpdmUiLCJnZXRGb2xsb3dTZXRQcm9ncmVzc2l2ZSIsImdlbmVyYXRlRmxsb3dTZXRQcm9ncmVzc2l2ZSIsImdldFByZWRpY3RUYWJsZVByb2dyZXNzaXZlIiwiZ2VuZXJhdGVQcmVkaWN0VGFibGVQcm9ncmVzc2l2ZSIsImluaXRpYWxTdGF0ZU5vZGUiLCJhbGxTdGF0ZU5vZGVzTWFwIiwiZ2VuZXJhdGVTdGF0ZSIsInRvY2tlbkFuYVJlcyIsIkF1Z3VtZW50U3RhcnQiLCJlZGdlcyIsInZpcyIsInByZVNpemUiLCJzaXplIiwic3RhdGUiLCJ2YWx1ZXMiLCJtYXRjaEl0ZW1zIiwia2V5IiwiZ2VuZXJhdGVTdGF0ZVByb2dyZXNzaXZlIiwicHJlZGljdElucHV0Iiwic3RhY2siLCJzeW1ib2xzIiwibW92ZSIsImFjdGlvbiIsImNNb3ZlIiwic3RhcnRzV2l0aCIsInNoaWZ0IiwiTnVtYmVyIiwialByZWRpY3RMaW5lIiwiZ290byIsImdlbmVyYXRlTFIwUHJlZGljdFRhYmxlIiwic3RhdGVOb2RlIiwicHJlZGljdExpbmUiLCJlZGdlIiwiZ2VuZXJhdGVTTFIxUHJlZGljdFRhYmxlIiwiZm9sbG93Q2giLCJzdGF0ZUdyYXBoIiwiZGZzIiwibm9kZSIsIm5ld05vZGUiLCJnSSIsImZpcnN0VG9ja2VuMkRlcml2YXRpb25zTWFwIiwia2V5cyIsInVuaW9uTWFwIiwiZ0oiLCJrIiwiamdyYW1tZXIiLCJzcGxpY2UiLCJuZWVkSGFuZGxlSW5kZXgiLCJuZXdOb25UZXJtaW5hbFRvY2tlbiIsIm5ld0dyYW1tZXJzIiwibmV3Tm9uVGVybWluYWxHcmFtbWVycyIsImluZGV4IiwibmV3QWRkR3JhbW1lcnMiLCJ0bXBSZXN1bHQiLCJuZXdEZXJpdmF0aW9uIiwibmV3VW5UZXJtaW5hbCIsIm5ld1Jlc3VsdCIsImRlcmkiXSwibWFwcGluZ3MiOiJrQ0FHZ0IsU0FBQUEsRUFBd0JDLEVBQWNDLEdBQ2xELE9BQU9BLEVBQVNDLEtBQUlDLEdBQ1RBLEVBQVFDLFdBQVcsTUFBTyxNQUNsQ0YsS0FBSUMsSUFDSCxNQUFNRSxFQUFNRixFQUFRRyxNQUFNLGFBQWFDLFFBQU9DLEdBQVcsT0FBTkEsR0FBb0IsT0FBTkEsR0FBY0EsSUFDekVDLEVBQWNKLEVBQUksR0FBR0MsTUFBTSxLQUFLQyxRQUFPQyxHQUFLQSxHQUFXLE1BQU5BLElBQVdOLEtBQUlRLEdBQzNEVixFQUFNVyxnQkFBZ0JELEtBRWpDLE1BQU8sQ0FDSEUsWUFBYVAsRUFBSSxHQUNqQkksWUFBYUEsRUFDaEIsR0FHVCxDQVdNLFNBQVVJLEVBQWlCQyxHQUM3QixPQUFRQSxHQUNSLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDRCxNQUFPLEtBQUtBLElBQ2hCLFFBQ0ksT0FBT0EsRUFFZixDQ3BDTyxNQUFNQyxFQUFpQixJQUNqQkMsRUFBa0IsSUNGL0IsSUFBT0MsR0FDUCxTQUFnQkEsR0FFWEEsRUFLSkEsRUFBQSxPQUFBLEdB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
