!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).index={})}(this,(function(e){"use strict";function t(e,t){return t.map((e=>e.replaceAll(/\s/g,""))).map((t=>{const n=t.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),i=n[1].split("|").filter((e=>e&&"|"!==e)).map((t=>e.splitDerivation(t)));return{nonTerminal:n[0],derivations:i}}))}function n(e){switch(e){case"+":case"*":case"(":case")":return`\\${e}`;default:return e}}const i="ε",r="$";var o;!function(e){e[e.Normal=0]="Normal",e[e.Warnning=1]="Warnning",e[e.Error=2]="Error",e[e.None=3]="None"}(o||(o={}));let s=o.Normal;s=o.Error;var a=new class{logLevel;logChannel;constructor(e=o.Normal,t=console){this.logLevel=e,this.logChannel=t}log(...e){this.logLevel<=o.Normal&&this.logChannel.log("[normal]",...e)}warn(...e){this.logLevel<=o.Warnning&&this.logChannel.warn("[warn]",...e)}error(...e){this.logLevel<=o.Error&&this.logChannel.error("[error]",...e)}logTo(e){this.logChannel=e}}(s);function l(e,n){a.log("[generateFirstSet start]");const r=t(e,n);a.log("[grammers after transferString2Grammers]",r);const o=new Array(...r.map((e=>({tocken:e.nonTerminal,terminals:new Set})))),s=new Map;r.forEach((e=>{s.set(e.nonTerminal,e.derivations)})),o.push(...e.terminals.map((e=>({tocken:e[0],terminals:new Set([e[0]]),isTerminal:!0})))),o.forEach((e=>{if(!e.isTerminal)for(let t of s.get(e.tocken))1!==t.length||t[0]!==i||e.terminals.has(i)||e.terminals.add(i)}));const l=new Map;for(let e of o)l.set(e.tocken,e);for(;;){let t=!1;if(o.forEach((n=>{if(!n.isTerminal)for(let r of s.get(n.tocken))for(let o=0;o<r.length;o++){const s=r[o];if(e.isTerminal(s)){if(n.terminals.has(s)||(a.log(s),t=!0,n.terminals.add(s)),s!==i)break}else{const e=l.get(s);if(e.terminals.forEach((e=>{e!==i&&(n.terminals.has(e)||(t=!0,n.terminals.add(e)))})),!e.terminals.has(i))break}o===r.length-1&&n.terminals.add(i)}})),!t)break}return o.filter((e=>!e.isTerminal)).sort(((e,t)=>e.tocken<t.tocken?-1:1)).map((e=>(e.terminals=new Set(Array.from(e.terminals).sort(((e,t)=>e<t?-1:1))),e)))}function c(e,t,n){const r=new Map;n.forEach((e=>{r.set(e.tocken,e)}));const o=new Set;for(let n=0;n<t.length;n++){const s=t[n];if(e.isTerminal(s)){if(s!==i){o.add(s);break}}else if(r.get(s)?.terminals.forEach((e=>{o.add(e)})),!r.get(s).terminals.has(i))break;n===t.length-1&&o.add(i)}return{tocken:t.join(""),terminals:o}}function h(e,t,n){const r=new Set;for(let o=0;o<t.length;o++){const s=t[o];if(e.isTerminal(s)){if(s!==i){r.add(s);break}}else if(n.get(s)?.terminals.forEach((e=>{r.add(e)})),!n.get(s).terminals.has(i))break;o===t.length-1&&r.add(i)}return{tocken:t.join(""),terminals:r}}function m(e,n,o){a.log("[generateFllowSet start]"),o=o?Array.from(o):l(e,n);const s=t(e,n);a.log("[grammers after transferString2Grammers]",s);const c=new Array(...s.map((e=>({tocken:e.nonTerminal,terminals:new Set([r])})))),h=new Map;s.forEach((e=>{h.set(e.nonTerminal,e.derivations)})),c.push(...e.terminals.map((e=>({tocken:e[0],terminals:new Set([r]),isTerminal:!0}))));const m=new Map;for(let e of c)m.set(e.tocken,e);o.push(...e.terminals.map((e=>({tocken:e[0],terminals:new Set([e[0]]),isTerminal:!0}))));const f=new Map;for(let e of o)f.set(e.tocken,e);for(;;){let e=!1;if(s.forEach((t=>{for(let n of t.derivations)for(let t=n.length-2;t>=0;t--){const r=m.get(n[t]);for(let o=t+1;o<n.length;o++){const t=f.get(n[o]).terminals;for(let n of t)n!==i&&(r?.terminals.has(n)||(e=!0,r?.terminals.add(n)));if(!t.has(i))break}}})),s.forEach((t=>{const n=m.get(t.nonTerminal);for(let r of t.derivations)for(let t=r.length-1;t>=0;t--){const o=r[t],s=m.get(o);for(let t of n.terminals)t!==i&&(s?.terminals.has(t)||(e=!0,s?.terminals.add(t)));if(!f.get(o).terminals.has(i))break}})),!e)break}return c.filter((e=>!e.isTerminal)).sort(((e,t)=>e.tocken<t.tocken?-1:1)).map((e=>(e.terminals=new Set(Array.from(e.terminals).sort(((e,t)=>e<t?-1:1))),e)))}class f{nonTerminals;terminals;currentLine=0;currentColumn=0;source="";constructor(e,t){this.nonTerminals=[...t],this.terminals=[...e]}setSource(e){this.source=e,this.currentLine=0,this.currentColumn=0}remainString(){return this.source.slice(this.currentColumn)}next(){if(this.currentColumn>=this.source.length)return{tocken:r,origin:r};for(let e of this.terminals){const t=this.source.slice(this.currentColumn).match(e[1]);if(t)return{tocken:e[0],origin:t[0]}}throw new Error(`[词法分析]: 匹配下一个tocken失败  源输入字符串: ${this.source} 剩余字符串: ${this.source.slice(this.currentColumn)}`)}pop(){try{const e=this.next();return e.tocken!==r&&(this.currentColumn+=e.origin.length),e}catch(e){throw e}}nextNotEmptyTerminal(){for(;;){const e=this.next();if("whiteSpace"!==e.tocken)return e;this.currentColumn+=e.origin.length}}nextNotEmpty(e){const t=this.currentColumn;for(let t=0;t<e-1;t++)this.popNotEmptyTerminal();const n=this.nextNotEmptyTerminal();return this.currentColumn=t,n}popNotEmptyTerminal(){const e=this.nextNotEmptyTerminal();return e.tocken!==r&&(this.currentColumn+=e.origin.length),e}isTerminal(e){let t=!0;return this.nonTerminals.some((n=>n===e&&(t=!1,!0))),t}splitDerivation(e){const t=[];let i=0;const r=e;for(;e.length;){for(let n of this.nonTerminals){const i=e.match(new RegExp("^"+n));if(i){t.push(n),e=e.slice(i[0].length);break}}for(let i of this.terminals){const r=e.match(new RegExp("^"+n(i[0])));if(r){t.push(i[0]),e=e.slice(r[0].length);break}}if(i++,i>5e4)throw new Error(`[splitDerivation] error: excute over MAX_EXCUTE str: ${r}  remaining str: ${e} `)}return t}getNewNonTerminal(e){let t=e;for(;;)if(t+="'",-1===this.nonTerminals.indexOf(t))return this.nonTerminals.unshift(t),t}}function g(e,n,r,o){const s=t(e,n),l=[],c=new Map;e.nonTerminals.forEach((e=>{const t={nonTerminal:e,terminal2Derivation:new Map};c.set(e,t),l.push(t)}));const m=new Map,f=new Map;for(let e of o)f.set(e.tocken,e);for(let e of r)m.set(e.tocken,e);return s.forEach((t=>{for(let n of t.derivations){const r=h(e,n,m),o=c.get(t.nonTerminal);a.log(r);let s=new Map;for(let e of r.terminals){if(e===i)continue;let r=o?.terminal2Derivation.get(e);s.set(e,!0),r||(r={nonTerminal:t.nonTerminal,derivations:[]},o?.terminal2Derivation.set(e,r)),r.derivations.push(n)}if(r.terminals.has(i))for(let e of f.get(t.nonTerminal).terminals){if(s.has(e))continue;let i=o?.terminal2Derivation.get(e);i||(i={nonTerminal:t.nonTerminal,derivations:[]},o?.terminal2Derivation.set(e,i)),i.derivations.push(n)}}})),l}function d(e,t){for(let n of e.terminals){const e=n[0];t.forEach((t=>{const n=t.terminal2Derivation.get(e);if(n&&n.derivations.length>1)return!1}))}return!0}const p=/^[A-Z]'*/,u=/[a-z|\u0391-\u03C9]/;function k(e){const t=new Set,n=new Set;return e.forEach((e=>{const i=e.replaceAll(/\s/g,"").split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),r=i[0];t.add(r),i[1].split("|").filter((e=>e&&"|"!==e)).forEach((e=>{for(;e.length;){let i=null;if(i=e.match(p),i)t.add(i[0]),e=e.slice(i[0].length);else{if(i=e.match(u),!i)throw new Error(`[getTockFromSimpleGrammers error] cant recognize the character remaining: ${e}`);n.add(JSON.stringify([i[0],"^"+i[0]])),e=e.slice(i[0].length)}}}))})),{nonTerminals:Array.from(t).sort(((e,t)=>t.length-e.length)),terminals:Array.from(n).map((e=>{const t=JSON.parse(e);return t[1]=new RegExp(t[1]),t}))}}function T(e){e=e.sort(((e,t)=>e<t?-1:1));let t="";for(let n of e)t+=` ${S(n)}`;return t}function S(e){let t=`${e.nonTerminal} -> `;for(let n=0;n<e.derivation.length;n++)n===e.matchPoint&&(n||(t+=" "),t+="· "),n===e.derivation.length-1?t+=`${e.derivation[n]}`:t+=`${e.derivation[n]} `,n===e.derivation.length-1&&e.matchPoint===e.derivation.length&&(t+="·");return t}function v(e,t,n){for(let i=0;i<e.length;i++){const r=e[i],o=r.derivation[r.matchPoint];if(n.isTerminal(o))continue;t.get(o)?.forEach((t=>{let n=!1;for(let i of e)if(i.nonTerminal===o&&0===i.matchPoint){if(i.derivation.length!==t.length)continue;let e=!0;for(let n=0;n<t.length;n++)if(i.derivation[n]!==t[n]){e=!1;break}if(e){n=!0;break}}n||e.push({nonTerminal:o,matchPoint:0,derivation:t})}))}}const w="Augument_S";function x(e,t=!0){e=e.sort(((e,t)=>e<t?-1:1));let n="";for(let i of e)n+=` ${N(i,t)}`;return n}function N(e,t=!0){let n=`${e.nonTerminal} -> `;for(let t=0;t<e.derivation.length;t++)t===e.matchPoint&&(t||(n+=" "),n+="· "),t===e.derivation.length-1?n+=`${e.derivation[t]}`:n+=`${e.derivation[t]} `,t===e.derivation.length-1&&e.matchPoint===e.derivation.length&&(n+="·");return e.lookAheadTocken?.length&&t&&(n+=" , "+e.lookAheadTocken.join("/")),n}function P(e,t,n,r){for(let o=0;o<e.length;o++){const s=e[o],a=s.derivation[s.matchPoint];if(n.isTerminal(a))continue;const l=t.get(a),h=[...c(n,s.derivation.slice(s.matchPoint+1),r).terminals];h.length&&-1===h.indexOf(i)||h.push(...s.lookAheadTocken),l?.forEach((t=>{let n=!1;for(let i of e)if(i.nonTerminal===a&&0===i.matchPoint){if(i.derivation.length!==t.length)continue;let e=!0;for(let n=0;n<t.length;n++)if(i.derivation[n]!==t[n]){e=!1;break}if(e){n=!0;break}}n||e.push({nonTerminal:a,matchPoint:0,derivation:t,lookAheadTocken:h})}))}}function b(e,t){for(let n of e)if(n.id===t)return n}e.LL1Parser=class{lexer;textGrammers;constructor(e,t,n){this.lexer=new f(e,t),this.textGrammers=n}getFirstSet(){return l(this.lexer,this.textGrammers)}getFollowSet(e){return e||(e=this.getFirstSet()),m(this.lexer,this.textGrammers,e)}getPredictTable(e,t){return e||(e=this.getFirstSet()),t||(t=this.getFollowSet(e)),g(this.lexer,this.textGrammers,e,t)}getPredictProcess(e,t,n){if(n||(n=g(this.lexer,this.textGrammers,this.getFirstSet(),this.getFollowSet())),!this.lexer.nonTerminals.some((e=>t===e)))throw new Error("1");return function(e,t,n,o){let s=n.replaceAll(/\s/g,"");const l=[];let c=1;const h={id:0,text:o,check:!1},m=[h];let f={parseStack:[r,o],remainingInput:n,parseAction:""};e.setSource(s);const g=new Map;t.forEach((e=>{g.set(e.nonTerminal,e)}));try{for(;;){const t=f.parseStack[f.parseStack.length-1];if(e.isTerminal(t)){const n=e.next();if(t!==n.tocken)throw new Error(`[预测错误] 非终结符匹配错误: ${t} stack: ${f.parseStack} 剩余字符串: ${e.remainString()}`);{if(f.parseAction=`match ${n.tocken}${n.tocken===n.origin?"":": "+n.origin}`,l.push(f),f=JSON.parse(JSON.stringify(f)),e.pop(),f.parseAction="",f.remainingInput=e.remainString(),f.parseStack.pop(),0===f.parseStack.length)break;const t=m.pop();t.children||(t.children=[]),t.children.push({id:c++,text:n.origin,check:!1})}continue}const n=e.next(),r=g.get(t).terminal2Derivation.get(n.tocken);if(1!==r?.derivations?.length)throw new Error(`[预测错误] 分析输入错误  终结符: ${n}   剩余字符串: ${e.remainString()} 文法: ${r} `);f.parseAction=`Predict ${r.nonTerminal} => ${r.derivations[0].join(" ")}`,a.log("[predict State]",f),l.push(f),f=JSON.parse(JSON.stringify(f)),f.parseStack.pop();const o=m.pop(),s=r.derivations[0].filter((e=>e!==i));o.children||(o.children=[]);for(let e of s)o.children.push({id:c++,text:e,check:!1});m.push(...[...o.children].reverse()),f.parseStack.push(...s.reverse()),f.parseAction="",f.remainingInput=e.remainString()}}catch(e){f.parseAction=e.toString(),l.push(f)}return l.astNode=h,l}(this.lexer,n,e,t)}checkPredickTableIsValid(e){return d(this.lexer,e)}checkIsLL0(){return d(this.lexer,this.getPredictTable())}getFirstSetProgressive(){return function*(e,n){yield["1. 如果X式一个终结符号，那么FIRST(X) = X ","2. 如果 X => ε 是一个产生式，那么将e加人到 FIRST（X)中。","3. A => B0B1B2B3，i = 0，循环i\n            FIRST(Bi) - EmptyCharacter 加入到 FIRST(A)中\n            如果FIRST(B1)不含有EmptyCharacter退出循环\n            若B0 - B3均含有EmptyCharacter 将EmptyCharacter加入到FIRST(A)中\n        ","4. 去除所有终结符号的表项"],a.log("[generateFirstSet start]");const r=t(e,n);a.log("[grammers after transferString2Grammers]",r);const o=new Array(...r.map((e=>({tocken:e.nonTerminal,terminals:new Set})))),s=new Map;r.forEach((e=>{s.set(e.nonTerminal,e.derivations)})),o.push(...e.terminals.map((e=>({tocken:e[0],terminals:new Set([e[0]]),isTerminal:!0})))),yield{ruleIndex:0,result:o},o.forEach((e=>{if(!e.isTerminal)for(let t of s.get(e.tocken))1!==t.length||t[0]!==i||e.terminals.has(i)||e.terminals.add(i)})),yield{ruleIndex:1,result:o};const l=new Map;for(let e of o)l.set(e.tocken,e);for(;;){let t=!1;if(o.forEach((n=>{if(!n.isTerminal)for(let r of s.get(n.tocken))for(let o=0;o<r.length;o++){const s=r[o];if(e.isTerminal(s)){if(n.terminals.has(s)||(a.log(s),t=!0,n.terminals.add(s)),s!==i)break}else{const e=l.get(s);if(e.terminals.forEach((e=>{e!==i&&(n.terminals.has(e)||(t=!0,n.terminals.add(e)))})),!e.terminals.has(i))break}o===r.length-1&&n.terminals.add(i)}})),!t)break;yield{ruleIndex:2,result:o}}yield{ruleIndex:3,result:o.filter((e=>!e.isTerminal)).sort(((e,t)=>e.tocken<t.tocken?-1:1)).map((e=>(e.terminals=new Set(Array.from(e.terminals).sort(((e,t)=>e<t?-1:1))),e)))}}(this.lexer,this.textGrammers)}getFollowSetProgressive(e){return e||(e=this.getFirstSet()),function*(e,n,o){yield["1. 将$放到FOLLOW(S)中","2. 如果存在一个产生式A => aBb ， 那么FIRST(b) 中除ε 之外的所有符号都在FOLLOW(B)中。attention: A => aBCd 那么把first(Cd)加入到Follow(B)中去","3.如果存在一个产生式 A => aB ， 或存在产生式 A => aBb 且FIRST(b) 包含 ε ，那么FOLLOW(A)中的所有符号都在FOLLOW(B)中。","4. 去除所有终结符号的表项"],a.log("[generateFllowSet start]"),o=o?Array.from(o):l(e,n);const s=t(e,n);a.log("[grammers after transferString2Grammers]",s);const c=new Array(...s.map((e=>({tocken:e.nonTerminal,terminals:new Set([r])})))),h=new Map;s.forEach((e=>{h.set(e.nonTerminal,e.derivations)})),c.push(...e.terminals.map((e=>({tocken:e[0],terminals:new Set([r]),isTerminal:!0})))),yield{ruleIndex:0,result:c};const m=new Map;for(let e of c)m.set(e.tocken,e);o.push(...e.terminals.map((e=>({tocken:e[0],terminals:new Set([e[0]]),isTerminal:!0}))));const f=new Map;for(let e of o)f.set(e.tocken,e);for(;;){let e=!1;if(s.forEach((t=>{for(let n of t.derivations)for(let t=n.length-2;t>=0;t--){const r=m.get(n[t]);for(let o=t+1;o<n.length;o++){const t=f.get(n[o]).terminals;for(let n of t)n!==i&&(r?.terminals.has(n)||(e=!0,r?.terminals.add(n)));if(!t.has(i))break}}})),e&&(yield{ruleIndex:1,result:c},e=!1),s.forEach((t=>{const n=m.get(t.nonTerminal);for(let r of t.derivations)for(let t=r.length-1;t>=0;t--){const o=r[t],s=m.get(o);for(let t of n.terminals)t!==i&&(s?.terminals.has(t)||(e=!0,s?.terminals.add(t)));if(!f.get(o).terminals.has(i))break}})),e&&(yield{ruleIndex:2,result:c}),!e)break}yield{ruleIndex:3,result:c.filter((e=>!e.isTerminal)).sort(((e,t)=>e.tocken<t.tocken?-1:1)).map((e=>(e.terminals=new Set(Array.from(e.terminals).sort(((e,t)=>e<t?-1:1))),e)))}}(this.lexer,this.textGrammers,e)}getPredictProcessProgressive(e,t,n){if(n||(n=g(this.lexer,this.textGrammers,this.getFirstSet(),this.getFollowSet())),!this.lexer.nonTerminals.some((e=>t===e)))throw new Error("1");return function*(e,t,n,o){let s=n.replaceAll(/\s/g,"");const l=[];let c=1;const h={id:0,text:o,check:!1};l.astNode=h;const m=[h];let f={parseStack:[r,o],remainingInput:n,parseAction:""};e.setSource(s);const g=new Map;t.forEach((e=>{g.set(e.nonTerminal,e)})),yield l;try{for(;;){const t=f.parseStack[f.parseStack.length-1];if(e.isTerminal(t)){const n=e.next();if(t!==n.tocken)throw new Error(`[预测错误] 非终结符匹配错误: ${t} stack: ${f.parseStack} 剩余字符串: ${e.remainString()}`);{if(f.parseAction=`match ${n.tocken}${n.tocken===n.origin?"":": "+n.origin}`,l.push(f),f=JSON.parse(JSON.stringify(f)),e.pop(),f.parseAction="",f.remainingInput=e.remainString(),f.parseStack.pop(),0===f.parseStack.length)break;const t=m.pop();t.children||(t.children=[]),t.children.push({id:c++,text:n.origin,check:!1})}yield l;continue}const n=e.next(),r=g.get(t).terminal2Derivation.get(n.tocken);if(1!==r?.derivations?.length)throw new Error(`[预测错误] 分析输入错误  终结符: ${n}   剩余字符串: ${e.remainString()} 文法: ${r} `);f.parseAction=`Predict ${r.nonTerminal} => ${r.derivations[0].join(" ")}`,a.log("[predict State]",f),l.push(f),f=JSON.parse(JSON.stringify(f)),f.parseStack.pop();const o=m.pop(),s=r.derivations[0].filter((e=>e!==i));o.children||(o.children=[]);for(let e of s)o.children.push({id:c++,text:e,check:!1});m.push(...[...o.children].reverse()),f.parseStack.push(...s.reverse()),f.parseAction="",f.remainingInput=e.remainString(),yield l}}catch(e){f.parseAction=e.toString(),l.push(f)}return l.astNode=h,l}(this.lexer,n,e,t)}getPredictTableProgressive(e,n){return e||(e=this.getFirstSet()),n||(n=this.getFollowSet(e)),function*(e,n,r,o){yield["1. 对 First(u) 中的所有终结符 a （不含 ε ），置 M[A, a] = A -> u","2. 若 First(u) 含 ε ，则对 Follow(A) 中的所有符号 a （可含 $ ），置 M[A, a] = A -> u"];const s=t(e,n),l=[],c=new Map;e.nonTerminals.forEach((e=>{const t={nonTerminal:e,terminal2Derivation:new Map};c.set(e,t),l.push(t)}));const m=new Map,f=new Map;for(let e of o)f.set(e.tocken,e);for(let e of r)m.set(e.tocken,e);for(let t of s)for(let n of t.derivations){const r=h(e,n,m),o=c.get(t.nonTerminal);a.log(r);for(let e of r.terminals){if(e===i)continue;let r=o?.terminal2Derivation.get(e);r||(r={nonTerminal:t.nonTerminal,derivations:[]},o?.terminal2Derivation.set(e,r)),r.derivations.push(n),yield{ruleIndex:0,result:l}}if(r.terminals.has(i))for(let e of f.get(t.nonTerminal).terminals){let i=o?.terminal2Derivation.get(e);i||(i={nonTerminal:t.nonTerminal,derivations:[]},o?.terminal2Derivation.set(e,i)),i.derivations.push(n),yield{ruleIndex:1,result:l}}}}(this.lexer,this.textGrammers,e,n)}},e.LR1Parser=class{initialStateNode;allStateNodesMap;lexer;grammers;firstSet;constructor(){this.initialStateNode=null}generateState(e,t,n,i){if(!n||!i){const t=k(e);n=t.nonTerminals,i=t.terminals}a.log("[nonTerminals]",n),a.log("[terminals]",i),this.grammers=e,this.lexer=new f(i,n),this.firstSet=l(this.lexer,e);const o=new Map;for(let t of e){t=t.replaceAll(/\s/g,"");const e=t.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),n=e[0],i=e[1].split("|").filter((e=>e)).map((e=>this.lexer.splitDerivation(e)));o.set(n,i)}a.log(o),this.initialStateNode={id:0,items:[{nonTerminal:w,derivation:[t],matchPoint:0,lookAheadTocken:[r]}],edges:[]},P(this.initialStateNode.items,o,this.lexer,this.firstSet);const s=new Map;this.allStateNodesMap=s,s.set(x(this.initialStateNode.items),this.initialStateNode);const c=[];let h=0;for(;s.size!=h;){h=s.size;for(let e of s.values())if(!c[e.id]){c[e.id]=!0;for(let t of e.items)t.nonTerminal===w&&1===t.matchPoint&&e.edges.push({tocken:r,next:{id:-1,items:[],edges:[]}});for(let t of n){let n=[];for(let i of e.items)i.derivation.length!==i.matchPoint&&i.derivation[i.matchPoint]===t&&n.push({nonTerminal:i.nonTerminal,derivation:i.derivation,matchPoint:i.matchPoint+1,lookAheadTocken:i.lookAheadTocken});if(!n.length)continue;P(n,o,this.lexer,this.firstSet);const i=x(n);s.has(i)||s.set(i,{id:s.size,items:n,edges:[]}),e.edges.push({tocken:t,next:s.get(i)})}for(let t of i){let n=[];for(let i of e.items)i.derivation.length!==i.matchPoint&&i.derivation[i.matchPoint]===t[0]&&n.push({nonTerminal:i.nonTerminal,derivation:i.derivation,matchPoint:i.matchPoint+1,lookAheadTocken:i.lookAheadTocken});if(!n.length)continue;P(n,o,this.lexer,this.firstSet);const i=x(n);s.has(i)||s.set(i,{id:s.size,items:n,edges:[]}),e.edges.push({tocken:t[0],next:s.get(i)})}}}}predictInput(e,t){if(!this.lexer)throw new Error("[generatePredictTable] must call generateState before generatePredictTable");let n=[];for(e=e.replaceAll(/\s/g,""),n.push({stack:[0],symbols:[],input:[...this.lexer.splitDerivation(e),r]});;){const e=n[n.length-1],r=JSON.parse(JSON.stringify(e)),o=e.stack[e.stack.length-1];let s=b(t,o);for(let e of t)if(e.id===o){s=e;break}if(!s)throw new Error(`[predict] stateId: ${o} 的预测行找不到`);let a=!1,l=[];if(l=s.action.get(e.input[0]),l.length>1)throw new Error(`move collision ${l}`);if(!l.length){if(1!==s.action.get(i)?.length)throw new Error(`move is empty ${l}`);l=s.action.get(i),a=!0}let c=l[0];if("acc"===c){e.move="接受";break}if(c.startsWith("S"))e.move=`移入${e.input[0]}`,a?r.symbols.push(i):r.symbols.push(r.input.shift()),r.stack.push(Number(c.slice(1)));else{e.move=`根据${c}归约`;const n=c.slice(2,-1).replaceAll(/\s/g,""),i=n.split("=>")[0],o=this.lexer.splitDerivation(n.split("=>")[1]);for(let e=0;e<o.length;e++)r.stack.pop(),r.symbols.pop();r.symbols.push(i);const s=b(t,e.stack[r.stack.length-1]);r.stack.push(s.goto.get(i)[0])}n.push(r)}return n}mergeNewNode(e,t){if(e.id=Number(`${e.id}${t.id}`),e.items.length!==t.items.length)throw new Error("[mergeNewNode] 合并核心节点出错");for(let n=0;n<e.items.length;n++){const i=e.items[n],r=t.items[n];for(let e of r.lookAheadTocken)-1===i.lookAheadTocken?.indexOf(e)&&i.lookAheadTocken.push(e)}e.acc=e.acc||t.acc}generateLALRPredictTable(){if(!this.initialStateNode||!this.allStateNodesMap||!this.lexer)throw new Error("[generatePredictTable] must call generateState before generatePredictTable");const e=new Map;(()=>{const t=new Map,n=i=>{if(t.has(i.id))return;t.set(i.id,!0);const r=x(i.items,!1);let o=e.get(r);if(o)this.mergeNewNode(o,i);else{o={id:i.id,items:[],edges:[],acc:i.acc};for(let e of i.items)o.items.push(JSON.parse(JSON.stringify(e)));o.edges=[],e.set(r,o)}for(let e of i.edges)n(e.next)};n(this.initialStateNode)})();const t=new Map;(()=>{const n=new Map,i=r=>{if(n.has(r.id))return;n.set(r.id,!0);const o=x(r.items,!1);t.set(r.id,e.get(o).id);for(let e of r.edges)i(e.next)};i(this.initialStateNode)})();const n=e=>t.get(e),i=[],o=new Map;for(let t of this.allStateNodesMap.values()){if(o.get(n(t.id)))continue;o.set(n(t.id),!0);let s={id:n(t.id),action:new Map,goto:new Map};for(let e of this.lexer.nonTerminals)s.goto.set(e,[]);for(let e of this.lexer.terminals)s.action.set(e[0],[]);s.action.set(r,[]);for(let e of t.edges)e.tocken!==r?this.lexer.isTerminal(e.tocken)?s.action.get(e.tocken).push(`S${n(e.next.id)}`):s.goto.get(e.tocken).push(n(e.next.id)):s.action.get(e.tocken).push("acc");let a=t.items;n(t.id)!==t.id&&(a=e.get(x(t.items,!1)).items);for(let e of a)if(e.matchPoint===e.derivation.length){if(e.nonTerminal===w)continue;for(let t of e.lookAheadTocken)s.action.get(t).push(`r(${e.nonTerminal} => ${e.derivation.join(" ")})`)}i.push(s)}return i.sort(((e,t)=>e.id-t.id)),i}generateLR1PredictTable(){if(!this.initialStateNode||!this.allStateNodesMap||!this.lexer)throw new Error("[generatePredictTable] must call generateState before generatePredictTable");const e=[];for(let t of this.allStateNodesMap.values()){let n={id:t.id,action:new Map,goto:new Map};for(let e of this.lexer.nonTerminals)n.goto.set(e,[]);for(let e of this.lexer.terminals)n.action.set(e[0],[]);n.action.set(r,[]);for(let e of t.edges)e.tocken!==r?this.lexer.isTerminal(e.tocken)?n.action.get(e.tocken).push(`S${e.next.id}`):n.goto.get(e.tocken).push(e.next.id):n.action.get(e.tocken).push("acc");for(let e of t.items)if(e.matchPoint===e.derivation.length){if(e.nonTerminal===w)continue;for(let t of e.lookAheadTocken)n.action.get(t).push(`r(${e.nonTerminal} => ${e.derivation.join(" ")})`)}e.push(n)}return e.sort(((e,t)=>e.id-t.id)),e}get stateGraph(){const e=[],t=n=>{if(e[n.id])return e[n.id];const i={};e[n.id]=i,i.id=n.id,i.items=n.items.map((e=>N(e))),i.edges=[];for(let e of n.edges)i.edges.push({tocken:e.tocken,next:t(e.next)});return i};return t(this.initialStateNode)}},e.LRParser=class{initialStateNode;allStateNodesMap;lexer;grammers;constructor(){this.initialStateNode=null}generateState(e,t,n,i){if(!n||!i){const t=k(e);n=t.nonTerminals,i=t.terminals}const o="Augument_S";a.log("[nonTerminals]",n),a.log("[terminals]",i),this.grammers=e,this.lexer=new f(i,n);const s=new Map;for(let t of e){t=t.replaceAll(/\s/g,"");const e=t.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),n=e[0],i=e[1].split("|").filter((e=>e)).map((e=>this.lexer.splitDerivation(e)));s.set(n,i)}a.log(s),this.initialStateNode={id:0,items:[{nonTerminal:o,derivation:[t],matchPoint:0}],edges:[]},v(this.initialStateNode.items,s,this.lexer);const l=new Map;this.allStateNodesMap=l,l.set(T(this.initialStateNode.items),this.initialStateNode);const c=[];let h=0;for(;l.size!=h;){h=l.size;for(let e of l.values())if(!c[e.id]){c[e.id]=!0;for(let t of e.items)t.nonTerminal===o&&1===t.matchPoint&&e.edges.push({tocken:r,next:{id:-1,items:[],edges:[]}});for(let t of n){let n=[];for(let i of e.items)i.derivation.length!==i.matchPoint&&i.derivation[i.matchPoint]===t&&n.push({nonTerminal:i.nonTerminal,derivation:i.derivation,matchPoint:i.matchPoint+1});if(!n.length)continue;v(n,s,this.lexer);const i=T(n);l.has(i)||l.set(i,{id:l.size,items:n,edges:[]}),e.edges.push({tocken:t,next:l.get(i)})}for(let t of i){let n=[];for(let i of e.items)i.derivation.length!==i.matchPoint&&i.derivation[i.matchPoint]===t[0]&&n.push({nonTerminal:i.nonTerminal,derivation:i.derivation,matchPoint:i.matchPoint+1});if(!n.length)continue;v(n,s,this.lexer);const i=T(n);l.has(i)||l.set(i,{id:l.size,items:n,edges:[]}),e.edges.push({tocken:t[0],next:l.get(i)})}}}}*generateStateProgressive(e,t,n,i){if(!n||!i){const t=k(e);n=t.nonTerminals,i=t.terminals}const o="Augument_S";a.log("[nonTerminals]",n),a.log("[terminals]",i),this.grammers=e,this.lexer=new f(i,n);const s=new Map;for(let t of e){t=t.replaceAll(/\s/g,"");const e=t.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),n=e[0],i=e[1].split("|").filter((e=>e)).map((e=>this.lexer.splitDerivation(e)));s.set(n,i)}a.log(s),this.initialStateNode={id:0,items:[{nonTerminal:o,derivation:[t],matchPoint:0}],edges:[]},v(this.initialStateNode.items,s,this.lexer),yield;const l=new Map;this.allStateNodesMap=l,l.set(T(this.initialStateNode.items),this.initialStateNode);const c=[];let h=0;for(;l.size!=h;){h=l.size;for(let e of l.values())if(!c[e.id]){c[e.id]=!0;for(let t of e.items)t.nonTerminal===o&&1===t.matchPoint&&e.edges.push({tocken:r,next:{id:-1,items:[],edges:[]}});for(let t of n){let n=[];for(let i of e.items)i.derivation.length!==i.matchPoint&&i.derivation[i.matchPoint]===t&&n.push({nonTerminal:i.nonTerminal,derivation:i.derivation,matchPoint:i.matchPoint+1});if(!n.length)continue;v(n,s,this.lexer);const i=T(n);l.has(i)||l.set(i,{id:l.size,items:n,edges:[]}),e.edges.push({tocken:t,next:l.get(i)}),yield}for(let t of i){let n=[];for(let i of e.items)i.derivation.length!==i.matchPoint&&i.derivation[i.matchPoint]===t[0]&&n.push({nonTerminal:i.nonTerminal,derivation:i.derivation,matchPoint:i.matchPoint+1});if(!n.length)continue;v(n,s,this.lexer);const i=T(n);l.has(i)||l.set(i,{id:l.size,items:n,edges:[]}),e.edges.push({tocken:t[0],next:l.get(i)}),yield}}}}predictInput(e,t){if(!this.lexer)throw new Error("[generatePredictTable] must call generateState before generatePredictTable");let n=[];for(e=e.replaceAll(/\s/g,""),n.push({stack:[0],symbols:[],input:[...this.lexer.splitDerivation(e),r]});;){const e=n[n.length-1],r=JSON.parse(JSON.stringify(e)),o=t[e.stack[e.stack.length-1]];let s=!1,a=o.action.get(e.input[0]);if(a.length>1)throw new Error(`move collision ${a}`);if(!a.length){if(1!==o.action.get(i)?.length)throw new Error(`move is empty ${a}`);a=o.action.get(i),s=!0}let l=a[0];if("acc"===l){e.move="接受";break}if(l.startsWith("S"))e.move=`移入${e.input[0]}`,s?r.symbols.push(i):r.symbols.push(r.input.shift()),r.stack.push(Number(l.slice(1)));else{e.move=`根据${l}归约`;const n=l.slice(2,-1).replaceAll(/\s/g,""),i=n.split("=>")[0],o=this.lexer.splitDerivation(n.split("=>")[1]);for(let e=0;e<o.length;e++)r.stack.pop(),r.symbols.pop();r.symbols.push(i);const s=t[e.stack[r.stack.length-1]];r.stack.push(s.goto.get(i)[0])}n.push(r)}return n}generateLR0PredictTable(){if(!this.initialStateNode||!this.allStateNodesMap||!this.lexer)throw new Error("[generatePredictTable] must call generateState before generatePredictTable");const e=[];for(let t of this.allStateNodesMap.values()){let n={id:t.id,action:new Map,goto:new Map};for(let e of this.lexer.nonTerminals)n.goto.set(e,[]);for(let e of this.lexer.terminals)n.action.set(e[0],[]);n.action.set(r,[]);for(let e of t.edges)e.tocken!==r?this.lexer.isTerminal(e.tocken)?n.action.get(e.tocken).push(`S${e.next.id}`):n.goto.get(e.tocken).push(e.next.id):n.action.get(e.tocken).push("acc");for(let e of t.items)if(e.matchPoint===e.derivation.length){for(let t of this.lexer.terminals)n.action.get(t[0]).push(`r(${e.nonTerminal} => ${e.derivation.join(" ")})`);n.action.get(r)?.length||n.action.get(r).push(`r(${e.nonTerminal} => ${e.derivation.join(" ")})`)}e.push(n)}return e.sort(((e,t)=>e.id-t.id)),e}generateSLR1PredictTable(){if(!(this.initialStateNode&&this.allStateNodesMap&&this.lexer&&this.grammers))throw new Error("[generatePredictTable] must call generateState before generatePredictTable");const e=m(this.lexer,this.grammers),t=[];for(let n of this.allStateNodesMap.values()){let i={id:n.id,action:new Map,goto:new Map};for(let e of this.lexer.nonTerminals)i.goto.set(e,[]);for(let e of this.lexer.terminals)i.action.set(e[0],[]);i.action.set(r,[]);for(let e of n.edges)e.tocken!==r?this.lexer.isTerminal(e.tocken)?i.action.get(e.tocken).push(`S${e.next.id}`):i.goto.get(e.tocken).push(e.next.id):i.action.get(e.tocken).push("acc");for(let t of n.items)if(t.matchPoint===t.derivation.length){let n=[];for(let i of e)if(i.tocken===t.nonTerminal){n=[...i.terminals.values()];break}for(let e of n)i.action.get(e[0]).push(`r(${t.nonTerminal} => ${t.derivation.join(" ")})`)}t.push(i)}return t.sort(((e,t)=>e.id-t.id)),t}get stateGraph(){const e=[],t=n=>{if(e[n.id])return e[n.id];const i={};e[n.id]=i,i.id=n.id,i.items=n.items.map((e=>S(e))),i.edges=[];for(let e of n.edges)i.edges.push({tocken:e.tocken,next:t(e.next)});return i};return t(this.initialStateNode)}},e.Lexer=f,e.checkNeedClearRightRecursion=function(e,t,n){if(!t||!n){const i=k(e);t=i.nonTerminals,n=i.terminals}a.log("[nonTerminals]",t),a.log("[terminals]",n);let i=new f(n,t);const r=new Map;for(let t of e){t=t.replaceAll(/\s/g,"");const e=t.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),n=e[0],o=e[1].split("|").filter((e=>e)).map((e=>i.splitDerivation(e)));r.set(n,o)}a.log("[nonTerminals2DerivationMap]",r);for(let e=0;e<t.length;e++){const n=r.get(t[e]);for(let i=n.length-1;i>=0;i--){if(n[i][0]===t[e])return!0}}return!1},e.checkNeedliftUpCommonTocken=function(e,t,n){let i=e;if(!t||!n){const i=k(e);t=i.nonTerminals,n=i.terminals}let r=new f(n,t);for(let e of i){e=e.replaceAll(/\s/g,"");const t=e.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e))[1].split("|").filter((e=>e)).map((e=>(a.log("[debug]",i),r.splitDerivation(e)))),n=new Map;t.forEach((e=>{let t=n.get(e[0]);t?t.push(e.slice(1)):t=[e.slice(1)],n.set(e[0],t)}));for(let e of n.keys())if(1!==n.get(e)?.length)return!0}return!1},e.checkNeedunionGrammers=function(e){let t=new Map;for(let n of e){n=n.replaceAll(/\s/g,"");const e=n.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),i=e[0],r=e[1];if(t.has(i))return!0;t.set(i,[r])}return!1},e.clearRightRecursion=function(e,t,n){const r=[];if(!t||!n){const i=k(e);t=i.nonTerminals,n=i.terminals}a.log("[nonTerminals]",t),a.log("[terminals]",n);let o=new f(n,t);const s=new Map;for(let t of e){t=t.replaceAll(/\s/g,"");const e=t.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),n=e[0],i=e[1].split("|").filter((e=>e)).map((e=>o.splitDerivation(e)));s.set(n,i)}a.log("[nonTerminals2DerivationMap]",s);for(let e=0;e<t.length;e++){const n=s.get(t[e]);for(let i=0;i<e;i++){const e=s.get(t[i]);for(let r=n.length-1;r>=0;r--){const o=n[r];if(o[0]===t[i]){a.log(o,t[i]);for(let t of e)a.log("[-]",t),n?.push([...t,...o.slice(1)]);n?.splice(r,1)}}}const r=[];for(let i=n.length-1;i>=0;i--){n[i][0]===t[e]&&r.push(i)}if(r.length){const a=o.getNewNonTerminal(t[e]),l=[],c=[];for(let e=n.length-1;e>=0;e--)-1===r.indexOf(e)&&l.push([...n[e][0]===i?n[e].slice(1):n[e],a]);for(let e of r)c.push([...n[e].slice(1),a]);c.push([i]),s.set(t[e],[...l,...r.length?[]:n]),s.set(a,c)}a.log("[nonTerminals2DerivationMap in process]",s,n)}for(let e of s.keys()){const t=s.get(e).map((e=>e.join(" "))).join(" | ");r.push(`${e} => ${t}`)}return r},e.getTockFromSimpleGrammers=k,e.liftUpCommonTocken=function(e,t,n){let i=e;if(!t||!n){const i=k(e);t=i.nonTerminals,n=i.terminals}let r=new f(n,t);for(;;){let e=[];const t=i.map((t=>{const n=(t=t.replaceAll(/\s/g,"")).split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),o=n[0],s=n[1].split("|").filter((e=>e)).map((e=>(a.log("[debug]",i),r.splitDerivation(e)))),l=[],c=new Map;s.forEach((e=>{let t=c.get(e[0]);t?t.push(e.slice(1)):t=[e.slice(1)],c.set(e[0],t)}));for(let t of c.keys()){if(1===c.get(t)?.length){l.push(t+c.get(t)[0].join(""));continue}const n=c.get(t),i=r.getNewNonTerminal(o);l.push(t+i),e.push(i+" => "+n?.map((e=>e.join(" "))).join(" | "))}return o+" => "+l.join(" | ")}));a.log("[pre]",t,e);const n=[...t,...e];if(a.log("[com]",i,n),i.length===n.length)break;i=n}return i},e.unionGrammers=function(e,t,n){let i=new Map;const r=[];if(!t||!n){const i=k(e);t=i.nonTerminals,n=i.terminals}let o=new f(n,t);e.forEach((e=>{const t=(e=e.replaceAll(/\s/g,"")).split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),n=t[0],s=t[1].split("|").filter((e=>e)).map((e=>(a.log("[debug]",r),o.splitDerivation(e))));if(i.has(n)){const e=i.get(n);s.forEach((t=>{const n=t.join(" ");-1===e?.indexOf(n)&&e.push(n)}))}else i.set(n,s.map((e=>e.join(" "))))}));for(let e of i.keys()){const t=[...new Set(i.get(e))];r.push(`${e} => ${t.join("|")}`.split("|").join(" | "))}return a.log(r),r}}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
