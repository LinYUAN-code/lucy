!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).index={})}(this,(function(e){"use strict";function t(e,t){return t.map((e=>e.replaceAll(/\s/g,""))).map((t=>{const r=t.split(/(=>)|(->)/).filter((e=>"=>"!==e&&"->"!==e&&e)),n=r[1].split("|").filter((e=>e&&"|"!==e)).map((t=>e.splitDerivation(t)));return{nonTerminal:r[0],derivations:n}}))}function r(e){switch(e){case"+":case"*":case"(":case")":return`\\${e}`;default:return e}}const n="Îµ",i="$";var o;!function(e){e[e.Normal=0]="Normal",e[e.Warnning=1]="Warnning",e[e.Error=2]="Error",e[e.None=3]="None"}(o||(o={}));let s=o.Normal;s=o.Error;var a=new class{logLevel;logChannel;constructor(e=o.Normal,t=console){this.logLevel=e,this.logChannel=t}log(...e){this.logLevel<=o.Normal&&this.logChannel.log("[normal]",...e)}warn(...e){this.logLevel<=o.Warnning&&this.logChannel.warn("[warn]",...e)}error(...e){this.logLevel<=o.Error&&this.logChannel.error("[error]",...e)}logTo(e){this.logChannel=e}}(s);function l(e,r){a.log("[generateFirstSet start]");const i=t(e,r);a.log("[grammers after transferString2Grammers]",i);const o=new Array(...i.map((e=>({tocken:e.nonTerminal,terminals:new Set})))),s=new Map;i.forEach((e=>{s.set(e.nonTerminal,e.derivations)})),o.push(...e.terminals.map((e=>({tocken:e[0],terminals:new Set([e[0]]),isTerminal:!0})))),o.forEach((e=>{if(!e.isTerminal)for(let t of s.get(e.tocken))1!==t.length||t[0]!==n||e.terminals.has(n)||e.terminals.add(n)}));const l=new Map;for(let e of o)l.set(e.tocken,e);for(;;){let t=!1;if(o.forEach((r=>{if(!r.isTerminal)for(let i of s.get(r.tocken))for(let o=0;o<i.length;o++){const s=i[o];if(e.isTerminal(s)){if(r.terminals.has(s)||(a.log(s),t=!0,r.terminals.add(s)),s!==n)break}else{const e=l.get(s);if(e.terminals.forEach((e=>{e!==n&&(r.terminals.has(e)||(t=!0,r.terminals.add(e)))})),!e.terminals.has(n))break}o===i.length-1&&r.terminals.add(n)}})),!t)break}return o.filter((e=>!e.isTerminal)).sort(((e,t)=>e.tocken<t.tocken?-1:1)).map((e=>(e.terminals=new Set(Array.from(e.terminals).sort(((e,t)=>e<t?-1:1))),e)))}function c(e,t,r){const i=new Set;for(let o=0;o<t.length;o++){const s=t[o];if(e.isTerminal(s)){if(s!==n){i.add(s);break}}else if(r.get(s)?.terminals.forEach((e=>{i.add(e)})),!r.get(s).terminals.has(n))break;o===t.length-1&&i.add(n)}return{tocken:t.join(""),terminals:i}}class m{nonTerminals;terminals;currentLine=0;currentColumn=0;source="";constructor(e,t){this.nonTerminals=t,this.terminals=e}setSource(e){this.source=e,this.currentLine=0,this.currentColumn=0}remainString(){return this.source.slice(this.currentColumn)}next(){if(this.currentColumn===this.source.length)return{tocken:i,origin:i};for(let e of this.terminals){const t=this.source.slice(this.currentColumn).match(e[1]);if(t)return{tocken:e[0],origin:t[0]}}throw new Error(`[lexer next]: match next Terminal error \n sourecInput: ${this.source}\n remainString: ${this.source.slice(this.currentColumn)}`)}pop(){try{const e=this.next();return this.currentColumn+=e.origin.length,e}catch(e){throw e}}isTerminal(e){let t=!0;return this.nonTerminals.some((r=>r===e&&(t=!1,!0))),t}splitDerivation(e){const t=[];for(;e.length;){for(let r of this.nonTerminals){const n=e.match(new RegExp("^"+r));n&&(t.push(r),e=e.slice(n[0].length))}for(let n of this.terminals){const i=e.match(new RegExp("^"+r(n[0])));i&&(t.push(n[0]),e=e.slice(i[0].length))}}return a.log(t),t}}function h(e,r,i,o){const s=t(e,r),l=[],m=new Map;e.nonTerminals.forEach((e=>{const t={nonTerminal:e,terminal2Derivation:new Map};m.set(e,t),l.push(t)}));const h=new Map,f=new Map;for(let e of o)f.set(e.tocken,e);for(let e of i)h.set(e.tocken,e);return s.forEach((t=>{for(let r of t.derivations){const i=c(e,r,h),o=m.get(t.nonTerminal);a.log(i);for(let e of i.terminals){if(e===n)continue;let i=o?.terminal2Derivation.get(e);i||(i={nonTerminal:t.nonTerminal,derivations:[]},o?.terminal2Derivation.set(e,i)),i.derivations.push(r)}if(i.terminals.has(n))for(let e of f.get(t.nonTerminal).terminals){let n=o?.terminal2Derivation.get(e);n||(n={nonTerminal:t.nonTerminal,derivations:[]},o?.terminal2Derivation.set(e,n)),n.derivations.push(r)}}})),l}function f(e,t){for(let r of e.terminals){const e=r[0];t.forEach((t=>{const r=t.terminal2Derivation.get(e);if(r&&r.derivations.length>1)return!1}))}return!0}e.LL0Parser=class{lexer;textGrammers;constructor(e,t,r){this.lexer=new m(e,t),this.textGrammers=r}getFirstSet(){return l(this.lexer,this.textGrammers)}getFollowSet(e){return function(e,r,o){a.log("[generateFllowSet start]"),o||(o=l(e,r));const s=t(e,r);a.log("[grammers after transferString2Grammers]",s);const c=new Array(...s.map((e=>({tocken:e.nonTerminal,terminals:new Set([i])})))),m=new Map;s.forEach((e=>{m.set(e.nonTerminal,e.derivations)})),c.push(...e.terminals.map((e=>({tocken:e[0],terminals:new Set([i]),isTerminal:!0}))));const h=new Map;for(let e of c)h.set(e.tocken,e);o.push(...e.terminals.map((e=>({tocken:e[0],terminals:new Set([e[0]]),isTerminal:!0}))));const f=new Map;for(let e of o)f.set(e.tocken,e);for(;;){let e=!1;if(s.forEach((t=>{for(let r of t.derivations)for(let t=r.length-2;t>=0;t--){const i=h.get(r[t]);for(let o=t+1;o<r.length;o++){const t=f.get(r[o]).terminals;for(let r of t)r!==n&&(i?.terminals.has(r)||(e=!0,i?.terminals.add(r)));if(!t.has(n))break}}})),s.forEach((t=>{const r=h.get(t.nonTerminal);for(let i of t.derivations)for(let t=i.length-1;t>=0;t--){const o=i[t],s=h.get(o);for(let t of r.terminals)t!==n&&(s?.terminals.has(t)||(e=!0,s?.terminals.add(t)));if(!f.get(o).terminals.has(n))break}})),!e)break}return c.filter((e=>!e.isTerminal)).sort(((e,t)=>e.tocken<t.tocken?-1:1)).map((e=>(e.terminals=new Set(Array.from(e.terminals).sort(((e,t)=>e<t?-1:1))),e)))}(this.lexer,this.textGrammers,e)}getPredictTable(e,t){return e||(e=this.getFirstSet()),t||(t=this.getFollowSet(e)),h(this.lexer,this.textGrammers,e,t)}getPredictProcess(e,t,r){return r||(r=h(this.lexer,this.textGrammers,this.getFirstSet(),this.getFollowSet())),function(e,t,r,o){let s=r.replaceAll(/\s/g,"");const l=[];let c={parseStack:[i,o],remainingInput:r,parseAction:""};e.setSource(s);const m=new Map;for(t.forEach((e=>{m.set(e.nonTerminal,e)}));;){const t=c.parseStack[c.parseStack.length-1];if(e.isTerminal(t)){const r=e.next();if(t!==r.tocken)throw new Error(`[predict error] terminal match error tocken: ${t} stack: ${c.parseStack} remainingInput: ${e.remainString()}`);if(c.parseAction=`match ${r.tocken} ${r.origin}`,l.push(c),c=JSON.parse(JSON.stringify(c)),e.pop(),c.parseAction="",c.remainingInput=e.remainString(),c.parseStack.pop(),0===c.parseStack.length)break;continue}const r=e.next(),i=m.get(t).terminal2Derivation.get(r.tocken);if(1!==i.derivations.length)throw new Error(`[predict error] parse input fail \n terminal: ${r} \n  remainingInput: ${e.remainString()} \n grammer: ${i} `);c.parseAction=`Predict ${i.nonTerminal} => ${i.derivations[0].join(" ")}`,a.log("[predict State]",c),l.push(c),c=JSON.parse(JSON.stringify(c)),c.parseStack.pop(),c.parseStack.push(...i.derivations[0].filter((e=>e!==n)).reverse()),c.parseAction="",c.remainingInput=e.remainString()}return l}(this.lexer,r,e,t)}checkPredickTableIsValid(e){return f(this.lexer,e)}checkIsLL0(){return f(this.lexer,this.getPredictTable())}}}));
